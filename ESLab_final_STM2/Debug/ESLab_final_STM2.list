
ESLab_final_STM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b218  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  0800b3a8  0800b3a8  0000c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda0  0800bda0  0000d06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda0  0800bda0  0000cda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda8  0800bda8  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda8  0800bda8  0000cda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdac  0800bdac  0000cdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800bdb0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  2000006c  0800be1c  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015a8  0800be1c  0000d5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000216c7  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c3  00000000  00000000  0002e763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  00032828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018ea  00000000  00000000  00034800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae06  00000000  00000000  000360ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000253e4  00000000  00000000  00060ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101918  00000000  00000000  000862d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000994c  00000000  00000000  00187c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0019157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b390 	.word	0x0800b390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b390 	.word	0x0800b390

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000598:	1d39      	adds	r1, r7, #4
 800059a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059e:	2201      	movs	r2, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <__io_putchar+0x20>)
 80005a2:	f007 ffb5 	bl	8008510 <HAL_UART_Transmit>
	return ch;
 80005a6:	687b      	ldr	r3, [r7, #4]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200002b8 	.word	0x200002b8

080005b4 <Set_Servo_Angle>:
void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
    // Map angle (0-180) to pulse width (210-1050 counts)
    //210 for 0.5ms (0 degrees) and 1050 for 2.5ms (180 degrees)
    uint32_t pulse_length = 25 + (angle * (100) / 180);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2264      	movs	r2, #100	@ 0x64
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000640 <Set_Servo_Angle+0x8c>)
 80005cc:	fb82 1203 	smull	r1, r2, r2, r3
 80005d0:	441a      	add	r2, r3
 80005d2:	11d2      	asrs	r2, r2, #7
 80005d4:	17db      	asrs	r3, r3, #31
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	3319      	adds	r3, #25
 80005da:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d104      	bne.n	80005ec <Set_Servo_Angle+0x38>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005ea:	e023      	b.n	8000634 <Set_Servo_Angle+0x80>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d104      	bne.n	80005fc <Set_Servo_Angle+0x48>
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80005fa:	e01b      	b.n	8000634 <Set_Servo_Angle+0x80>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d104      	bne.n	800060c <Set_Servo_Angle+0x58>
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800060a:	e013      	b.n	8000634 <Set_Servo_Angle+0x80>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	2b0c      	cmp	r3, #12
 8000610:	d104      	bne.n	800061c <Set_Servo_Angle+0x68>
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800061a:	e00b      	b.n	8000634 <Set_Servo_Angle+0x80>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b10      	cmp	r3, #16
 8000620:	d104      	bne.n	800062c <Set_Servo_Angle+0x78>
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800062a:	e003      	b.n	8000634 <Set_Servo_Angle+0x80>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000634:	bf00      	nop
 8000636:	371c      	adds	r7, #28
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	b60b60b7 	.word	0xb60b60b7

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	uint8_t  MAC_Addr[6] = {0};
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	2300      	movs	r3, #0
 8000650:	81bb      	strh	r3, [r7, #12]
  uint8_t  IP_Addr[4] = {0};
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  Socket = -1;
 8000656:	4bb4      	ldr	r3, [pc, #720]	@ (8000928 <main+0x2e4>)
 8000658:	f04f 32ff 	mov.w	r2, #4294967295
 800065c:	601a      	str	r2, [r3, #0]
  int16_t Trials = CONNECTION_TRIAL_MAX;
 800065e:	230a      	movs	r3, #10
 8000660:	81fb      	strh	r3, [r7, #14]
  flag=0;
 8000662:	4bb2      	ldr	r3, [pc, #712]	@ (800092c <main+0x2e8>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
  type=0;
 8000668:	4bb1      	ldr	r3, [pc, #708]	@ (8000930 <main+0x2ec>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
  state=0;
 800066e:	4bb1      	ldr	r3, [pc, #708]	@ (8000934 <main+0x2f0>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f002 ff26 	bl	80034c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 fa48 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 fd5e 	bl	800113c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000680:	f000 faa6 	bl	8000bd0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000684:	f000 fadc 	bl	8000c40 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000688:	f000 fb18 	bl	8000cbc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800068c:	f000 fb7a 	bl	8000d84 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000690:	f000 fcc6 	bl	8001020 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000694:	f000 fcf4 	bl	8001080 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000698:	f000 fd22 	bl	80010e0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800069c:	f000 fb34 	bl	8000d08 <MX_SPI1_Init>
  MX_TIM2_Init();
 80006a0:	f000 fbae 	bl	8000e00 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006a4:	f000 fc38 	bl	8000f18 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Init Wifi module
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80006a8:	f002 fe1c 	bl	80032e4 <WIFI_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	f040 8085 	bne.w	80007be <main+0x17a>
    {
      printf("> WIFI Module Initialized.\n");
 80006b4:	48a0      	ldr	r0, [pc, #640]	@ (8000938 <main+0x2f4>)
 80006b6:	f009 f85f 	bl	8009778 <puts>
      if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2106      	movs	r1, #6
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fe5d 	bl	8003380 <WIFI_GetMAC_Address>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d112      	bne.n	80006f2 <main+0xae>
      {
        printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
                 MAC_Addr[0],
 80006cc:	7a3b      	ldrb	r3, [r7, #8]
        printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80006ce:	4618      	mov	r0, r3
                 MAC_Addr[1],
 80006d0:	7a7b      	ldrb	r3, [r7, #9]
        printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80006d2:	461c      	mov	r4, r3
                 MAC_Addr[2],
 80006d4:	7abb      	ldrb	r3, [r7, #10]
        printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80006d6:	461d      	mov	r5, r3
                 MAC_Addr[3],
 80006d8:	7afb      	ldrb	r3, [r7, #11]
                 MAC_Addr[4],
 80006da:	7b3a      	ldrb	r2, [r7, #12]
                 MAC_Addr[5]);
 80006dc:	7b79      	ldrb	r1, [r7, #13]
        printf("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80006de:	9102      	str	r1, [sp, #8]
 80006e0:	9201      	str	r2, [sp, #4]
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	462b      	mov	r3, r5
 80006e6:	4622      	mov	r2, r4
 80006e8:	4601      	mov	r1, r0
 80006ea:	4894      	ldr	r0, [pc, #592]	@ (800093c <main+0x2f8>)
 80006ec:	f008 ffdc 	bl	80096a8 <iprintf>
 80006f0:	e002      	b.n	80006f8 <main+0xb4>
      }
      else
      {
        printf("> ERROR : CANNOT get MAC address\n");
 80006f2:	4893      	ldr	r0, [pc, #588]	@ (8000940 <main+0x2fc>)
 80006f4:	f009 f840 	bl	8009778 <puts>
      }

      if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80006f8:	2203      	movs	r2, #3
 80006fa:	4992      	ldr	r1, [pc, #584]	@ (8000944 <main+0x300>)
 80006fc:	4892      	ldr	r0, [pc, #584]	@ (8000948 <main+0x304>)
 80006fe:	f002 fe1d 	bl	800333c <WIFI_Connect>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d156      	bne.n	80007b6 <main+0x172>
      {
        printf("> es-wifi module connected \n");
 8000708:	4890      	ldr	r0, [pc, #576]	@ (800094c <main+0x308>)
 800070a:	f009 f835 	bl	8009778 <puts>
        if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2104      	movs	r1, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fe54 	bl	80033c0 <WIFI_GetIP_Address>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d147      	bne.n	80007ae <main+0x16a>
        {
          printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
                 IP_Addr[0],
 800071e:	793b      	ldrb	r3, [r7, #4]
          printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8000720:	4619      	mov	r1, r3
                 IP_Addr[1],
 8000722:	797b      	ldrb	r3, [r7, #5]
          printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8000724:	461a      	mov	r2, r3
                 IP_Addr[2],
 8000726:	79bb      	ldrb	r3, [r7, #6]
          printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8000728:	4618      	mov	r0, r3
                 IP_Addr[3]);
 800072a:	79fb      	ldrb	r3, [r7, #7]
          printf("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4603      	mov	r3, r0
 8000730:	4887      	ldr	r0, [pc, #540]	@ (8000950 <main+0x30c>)
 8000732:	f008 ffb9 	bl	80096a8 <iprintf>

          printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
                 RemoteIP[0],
 8000736:	4b87      	ldr	r3, [pc, #540]	@ (8000954 <main+0x310>)
 8000738:	781b      	ldrb	r3, [r3, #0]
          printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 800073a:	4619      	mov	r1, r3
                 RemoteIP[1],
 800073c:	4b85      	ldr	r3, [pc, #532]	@ (8000954 <main+0x310>)
 800073e:	785b      	ldrb	r3, [r3, #1]
          printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8000740:	4618      	mov	r0, r3
                 RemoteIP[2],
 8000742:	4b84      	ldr	r3, [pc, #528]	@ (8000954 <main+0x310>)
 8000744:	789b      	ldrb	r3, [r3, #2]
          printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8000746:	461c      	mov	r4, r3
                 RemoteIP[3],
 8000748:	4b82      	ldr	r3, [pc, #520]	@ (8000954 <main+0x310>)
 800074a:	78db      	ldrb	r3, [r3, #3]
          printf("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 800074c:	461a      	mov	r2, r3
 800074e:	f641 7342 	movw	r3, #8002	@ 0x1f42
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	4623      	mov	r3, r4
 8000758:	4602      	mov	r2, r0
 800075a:	487f      	ldr	r0, [pc, #508]	@ (8000958 <main+0x314>)
 800075c:	f008 ffa4 	bl	80096a8 <iprintf>
  							 RemotePORT);

          while (Trials--)
 8000760:	e014      	b.n	800078c <main+0x148>
          {
            if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8000762:	2300      	movs	r3, #0
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	f641 7342 	movw	r3, #8002	@ 0x1f42
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4b79      	ldr	r3, [pc, #484]	@ (8000954 <main+0x310>)
 800076e:	4a7b      	ldr	r2, [pc, #492]	@ (800095c <main+0x318>)
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f002 fe48 	bl	8003408 <WIFI_OpenClientConnection>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d106      	bne.n	800078c <main+0x148>
            {
              printf("> TCP Connection opened successfully.\n");
 800077e:	4878      	ldr	r0, [pc, #480]	@ (8000960 <main+0x31c>)
 8000780:	f008 fffa 	bl	8009778 <puts>
              Socket = 0;
 8000784:	4b68      	ldr	r3, [pc, #416]	@ (8000928 <main+0x2e4>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
              break;
 800078a:	e007      	b.n	800079c <main+0x158>
          while (Trials--)
 800078c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000790:	b29a      	uxth	r2, r3
 8000792:	3a01      	subs	r2, #1
 8000794:	b292      	uxth	r2, r2
 8000796:	81fa      	strh	r2, [r7, #14]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1e2      	bne.n	8000762 <main+0x11e>
            }
          }
          if(Socket == -1)
 800079c:	4b62      	ldr	r3, [pc, #392]	@ (8000928 <main+0x2e4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a4:	d10e      	bne.n	80007c4 <main+0x180>
          {
            printf("> ERROR : Cannot open Connection\n");
 80007a6:	486f      	ldr	r0, [pc, #444]	@ (8000964 <main+0x320>)
 80007a8:	f008 ffe6 	bl	8009778 <puts>
 80007ac:	e00a      	b.n	80007c4 <main+0x180>
          }
        }
        else
        {
          printf("> ERROR : es-wifi module CANNOT get IP address\n");
 80007ae:	486e      	ldr	r0, [pc, #440]	@ (8000968 <main+0x324>)
 80007b0:	f008 ffe2 	bl	8009778 <puts>
 80007b4:	e006      	b.n	80007c4 <main+0x180>
        }
      }
      else
      {
        printf("> ERROR : es-wifi module NOT connected\n");
 80007b6:	486d      	ldr	r0, [pc, #436]	@ (800096c <main+0x328>)
 80007b8:	f008 ffde 	bl	8009778 <puts>
 80007bc:	e002      	b.n	80007c4 <main+0x180>
      }
    }
    else
    {
      printf("> ERROR : WIFI Module cannot be initialized.\n");
 80007be:	486c      	ldr	r0, [pc, #432]	@ (8000970 <main+0x32c>)
 80007c0:	f008 ffda 	bl	8009778 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Socket != -1)
 80007c4:	4b58      	ldr	r3, [pc, #352]	@ (8000928 <main+0x2e4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d0fa      	beq.n	80007c4 <main+0x180>
	  {
		ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 80007ce:	4b56      	ldr	r3, [pc, #344]	@ (8000928 <main+0x2e4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	4b66      	ldr	r3, [pc, #408]	@ (8000974 <main+0x330>)
 80007dc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80007e0:	4965      	ldr	r1, [pc, #404]	@ (8000978 <main+0x334>)
 80007e2:	f002 fe4d 	bl	8003480 <WIFI_ReceiveData>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b64      	ldr	r3, [pc, #400]	@ (800097c <main+0x338>)
 80007ec:	601a      	str	r2, [r3, #0]
		if(ret == WIFI_STATUS_OK)
 80007ee:	4b63      	ldr	r3, [pc, #396]	@ (800097c <main+0x338>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8167 	bne.w	8000ac6 <main+0x482>
		{
		  if(Datalen > 0)
 80007f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000974 <main+0x330>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0e1      	beq.n	80007c4 <main+0x180>
		  {
			RxData[Datalen]=0;
 8000800:	4b5c      	ldr	r3, [pc, #368]	@ (8000974 <main+0x330>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b5c      	ldr	r3, [pc, #368]	@ (8000978 <main+0x334>)
 8000808:	2100      	movs	r1, #0
 800080a:	5499      	strb	r1, [r3, r2]
			printf("Received: %s\n",RxData);
 800080c:	495a      	ldr	r1, [pc, #360]	@ (8000978 <main+0x334>)
 800080e:	485c      	ldr	r0, [pc, #368]	@ (8000980 <main+0x33c>)
 8000810:	f008 ff4a 	bl	80096a8 <iprintf>
			// Case 1: storing start
			  if (strcmp((char *)RxData, "storing start") == 0)
 8000814:	495b      	ldr	r1, [pc, #364]	@ (8000984 <main+0x340>)
 8000816:	4858      	ldr	r0, [pc, #352]	@ (8000978 <main+0x334>)
 8000818:	f7ff fcda 	bl	80001d0 <strcmp>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d137      	bne.n	8000892 <main+0x24e>
			  {
				printf("Command: storing start received\n");
 8000822:	4859      	ldr	r0, [pc, #356]	@ (8000988 <main+0x344>)
 8000824:	f008 ffa8 	bl	8009778 <puts>
				if(state==0){
 8000828:	4b42      	ldr	r3, [pc, #264]	@ (8000934 <main+0x2f0>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1c9      	bne.n	80007c4 <main+0x180>
					state=1;
 8000830:	4b40      	ldr	r3, [pc, #256]	@ (8000934 <main+0x2f0>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); // STBY = 1
 8000836:	2201      	movs	r2, #1
 8000838:	2110      	movs	r1, #16
 800083a:	4854      	ldr	r0, [pc, #336]	@ (800098c <main+0x348>)
 800083c:	f003 fbf0 	bl	8004020 <HAL_GPIO_WritePin>

					  // 設定馬達方向（AIN1 = 1, AIN2 = 0）
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);   // AIN1
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f003 fbea 	bl	8004020 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // AIN2
 800084c:	2200      	movs	r2, #0
 800084e:	2102      	movs	r1, #2
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f003 fbe4 	bl	8004020 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);   // AIN1
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	484b      	ldr	r0, [pc, #300]	@ (800098c <main+0x348>)
 800085e:	f003 fbdf 	bl	8004020 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // AIN2
 8000862:	2200      	movs	r2, #0
 8000864:	2102      	movs	r1, #2
 8000866:	4849      	ldr	r0, [pc, #292]	@ (800098c <main+0x348>)
 8000868:	f003 fbda 	bl	8004020 <HAL_GPIO_WritePin>
					  // 啟動 PWM（記得有先呼叫 HAL_TIM_PWM_Start）
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800086c:	2100      	movs	r1, #0
 800086e:	4848      	ldr	r0, [pc, #288]	@ (8000990 <main+0x34c>)
 8000870:	f006 fe58 	bl	8007524 <HAL_TIM_PWM_Start>
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000874:	2108      	movs	r1, #8
 8000876:	4846      	ldr	r0, [pc, #280]	@ (8000990 <main+0x34c>)
 8000878:	f006 fe54 	bl	8007524 <HAL_TIM_PWM_Start>
					  // 設定占空比（範圍要 <= Period）
					  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400); // 50% duty cycle，如果 Period 是 999
 800087c:	4b44      	ldr	r3, [pc, #272]	@ (8000990 <main+0x34c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
					  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 400);
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <main+0x34c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800088e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000890:	e798      	b.n	80007c4 <main+0x180>
				}

			  }
			  // Case 2: storing: A/B/C
			  else if (strncmp((char *)RxData, "storing: ", 9) == 0)
 8000892:	2209      	movs	r2, #9
 8000894:	493f      	ldr	r1, [pc, #252]	@ (8000994 <main+0x350>)
 8000896:	4838      	ldr	r0, [pc, #224]	@ (8000978 <main+0x334>)
 8000898:	f009 f8b2 	bl	8009a00 <strncmp>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f040 80a3 	bne.w	80009ea <main+0x3a6>
			  {
				char source;
				if (sscanf((char *)RxData, "storing: %c", &source) == 1)
 80008a4:	1cfb      	adds	r3, r7, #3
 80008a6:	461a      	mov	r2, r3
 80008a8:	493b      	ldr	r1, [pc, #236]	@ (8000998 <main+0x354>)
 80008aa:	4833      	ldr	r0, [pc, #204]	@ (8000978 <main+0x334>)
 80008ac:	f008 ff8c 	bl	80097c8 <siscanf>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d186      	bne.n	80007c4 <main+0x180>
				{
				  printf("Storing source: %c\n", source);
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	4619      	mov	r1, r3
 80008ba:	4838      	ldr	r0, [pc, #224]	@ (800099c <main+0x358>)
 80008bc:	f008 fef4 	bl	80096a8 <iprintf>
				  // 依據 A/B/C 做對應處理
				  switch (source)
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	2b43      	cmp	r3, #67	@ 0x43
 80008c4:	d072      	beq.n	80009ac <main+0x368>
 80008c6:	2b43      	cmp	r3, #67	@ 0x43
 80008c8:	f300 8089 	bgt.w	80009de <main+0x39a>
 80008cc:	2b41      	cmp	r3, #65	@ 0x41
 80008ce:	d002      	beq.n	80008d6 <main+0x292>
 80008d0:	2b42      	cmp	r3, #66	@ 0x42
 80008d2:	d010      	beq.n	80008f6 <main+0x2b2>
 80008d4:	e083      	b.n	80009de <main+0x39a>
				  {
					case 'A':
						printf("A\n");
 80008d6:	4832      	ldr	r0, [pc, #200]	@ (80009a0 <main+0x35c>)
 80008d8:	f008 ff4e 	bl	8009778 <puts>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008dc:	2100      	movs	r1, #0
 80008de:	4831      	ldr	r0, [pc, #196]	@ (80009a4 <main+0x360>)
 80008e0:	f006 fe20 	bl	8007524 <HAL_TIM_PWM_Start>
						Set_Servo_Angle(&htim3, TIM_CHANNEL_1, 90);
 80008e4:	225a      	movs	r2, #90	@ 0x5a
 80008e6:	2100      	movs	r1, #0
 80008e8:	482e      	ldr	r0, [pc, #184]	@ (80009a4 <main+0x360>)
 80008ea:	f7ff fe63 	bl	80005b4 <Set_Servo_Angle>
						HAL_Delay(TIME_TO_A);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f002 fe5c 	bl	80035ac <HAL_Delay>
					  // 處理 storing A
					  break;
 80008f4:	e0eb      	b.n	8000ace <main+0x48a>
					case 'B':
						printf("B\n");
 80008f6:	482c      	ldr	r0, [pc, #176]	@ (80009a8 <main+0x364>)
 80008f8:	f008 ff3e 	bl	8009778 <puts>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80008fc:	210c      	movs	r1, #12
 80008fe:	4829      	ldr	r0, [pc, #164]	@ (80009a4 <main+0x360>)
 8000900:	f006 fe10 	bl	8007524 <HAL_TIM_PWM_Start>
						Set_Servo_Angle(&htim3, TIM_CHANNEL_4, 90);
 8000904:	225a      	movs	r2, #90	@ 0x5a
 8000906:	210c      	movs	r1, #12
 8000908:	4826      	ldr	r0, [pc, #152]	@ (80009a4 <main+0x360>)
 800090a:	f7ff fe53 	bl	80005b4 <Set_Servo_Angle>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800090e:	2100      	movs	r1, #0
 8000910:	4824      	ldr	r0, [pc, #144]	@ (80009a4 <main+0x360>)
 8000912:	f006 fe07 	bl	8007524 <HAL_TIM_PWM_Start>
						Set_Servo_Angle(&htim3, TIM_CHANNEL_1, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	4822      	ldr	r0, [pc, #136]	@ (80009a4 <main+0x360>)
 800091c:	f7ff fe4a 	bl	80005b4 <Set_Servo_Angle>
						HAL_Delay(TIME_TO_B);
 8000920:	200f      	movs	r0, #15
 8000922:	f002 fe43 	bl	80035ac <HAL_Delay>
					  // 處理 storing B
					  break;
 8000926:	e0d2      	b.n	8000ace <main+0x48a>
 8000928:	20000aa4 	.word	0x20000aa4
 800092c:	20000aa0 	.word	0x20000aa0
 8000930:	20000ab0 	.word	0x20000ab0
 8000934:	20000ab1 	.word	0x20000ab1
 8000938:	0800b3a8 	.word	0x0800b3a8
 800093c:	0800b3c4 	.word	0x0800b3c4
 8000940:	0800b3f8 	.word	0x0800b3f8
 8000944:	0800b41c 	.word	0x0800b41c
 8000948:	0800b428 	.word	0x0800b428
 800094c:	0800b438 	.word	0x0800b438
 8000950:	0800b454 	.word	0x0800b454
 8000954:	20000000 	.word	0x20000000
 8000958:	0800b484 	.word	0x0800b484
 800095c:	0800b4b8 	.word	0x0800b4b8
 8000960:	0800b4c4 	.word	0x0800b4c4
 8000964:	0800b4ec 	.word	0x0800b4ec
 8000968:	0800b510 	.word	0x0800b510
 800096c:	0800b540 	.word	0x0800b540
 8000970:	0800b568 	.word	0x0800b568
 8000974:	20000aa8 	.word	0x20000aa8
 8000978:	200008ac 	.word	0x200008ac
 800097c:	20000aac 	.word	0x20000aac
 8000980:	0800b598 	.word	0x0800b598
 8000984:	0800b5a8 	.word	0x0800b5a8
 8000988:	0800b5b8 	.word	0x0800b5b8
 800098c:	48000800 	.word	0x48000800
 8000990:	20000220 	.word	0x20000220
 8000994:	0800b5d8 	.word	0x0800b5d8
 8000998:	0800b5e4 	.word	0x0800b5e4
 800099c:	0800b5f0 	.word	0x0800b5f0
 80009a0:	0800b604 	.word	0x0800b604
 80009a4:	2000026c 	.word	0x2000026c
 80009a8:	0800b608 	.word	0x0800b608
					case 'C':
						printf("C\n");
 80009ac:	484b      	ldr	r0, [pc, #300]	@ (8000adc <main+0x498>)
 80009ae:	f008 fee3 	bl	8009778 <puts>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009b2:	2100      	movs	r1, #0
 80009b4:	484a      	ldr	r0, [pc, #296]	@ (8000ae0 <main+0x49c>)
 80009b6:	f006 fdb5 	bl	8007524 <HAL_TIM_PWM_Start>
						Set_Servo_Angle(&htim3, TIM_CHANNEL_1, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	4848      	ldr	r0, [pc, #288]	@ (8000ae0 <main+0x49c>)
 80009c0:	f7ff fdf8 	bl	80005b4 <Set_Servo_Angle>
						HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80009c4:	210c      	movs	r1, #12
 80009c6:	4846      	ldr	r0, [pc, #280]	@ (8000ae0 <main+0x49c>)
 80009c8:	f006 fdac 	bl	8007524 <HAL_TIM_PWM_Start>
						Set_Servo_Angle(&htim3, TIM_CHANNEL_4, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	210c      	movs	r1, #12
 80009d0:	4843      	ldr	r0, [pc, #268]	@ (8000ae0 <main+0x49c>)
 80009d2:	f7ff fdef 	bl	80005b4 <Set_Servo_Angle>
						HAL_Delay(TIME_TO_C);
 80009d6:	200f      	movs	r0, #15
 80009d8:	f002 fde8 	bl	80035ac <HAL_Delay>
					  // 處理 storing C
					  break;
 80009dc:	e077      	b.n	8000ace <main+0x48a>
					default:
					  printf("Unknown source: %c\n", source);
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4840      	ldr	r0, [pc, #256]	@ (8000ae4 <main+0x4a0>)
 80009e4:	f008 fe60 	bl	80096a8 <iprintf>
					  break;
 80009e8:	e071      	b.n	8000ace <main+0x48a>
				  }
				}
			  }
			  // Case 3: deposit: <number>
			  else if (strncmp((char *)RxData, "deposit: ", 9) == 0)
 80009ea:	2209      	movs	r2, #9
 80009ec:	493e      	ldr	r1, [pc, #248]	@ (8000ae8 <main+0x4a4>)
 80009ee:	483f      	ldr	r0, [pc, #252]	@ (8000aec <main+0x4a8>)
 80009f0:	f009 f806 	bl	8009a00 <strncmp>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d138      	bne.n	8000a6c <main+0x428>
			  {
				  printf("deposit\n");
 80009fa:	483d      	ldr	r0, [pc, #244]	@ (8000af0 <main+0x4ac>)
 80009fc:	f008 febc 	bl	8009778 <puts>
				  if(state==0){
 8000a00:	4b3c      	ldr	r3, [pc, #240]	@ (8000af4 <main+0x4b0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f47f aedd 	bne.w	80007c4 <main+0x180>
					state=1;
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000af4 <main+0x4b0>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); // STBY = 1
 8000a10:	2201      	movs	r2, #1
 8000a12:	2110      	movs	r1, #16
 8000a14:	4838      	ldr	r0, [pc, #224]	@ (8000af8 <main+0x4b4>)
 8000a16:	f003 fb03 	bl	8004020 <HAL_GPIO_WritePin>

					  // 設定馬達方向（AIN1 = 1, AIN2 = 0）
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);   // AIN1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f003 fafd 	bl	8004020 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // AIN2
 8000a26:	2200      	movs	r2, #0
 8000a28:	2101      	movs	r1, #1
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f003 faf7 	bl	8004020 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);   // AIN1
 8000a32:	2201      	movs	r2, #1
 8000a34:	2102      	movs	r1, #2
 8000a36:	4830      	ldr	r0, [pc, #192]	@ (8000af8 <main+0x4b4>)
 8000a38:	f003 faf2 	bl	8004020 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET); // AIN2
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	482d      	ldr	r0, [pc, #180]	@ (8000af8 <main+0x4b4>)
 8000a42:	f003 faed 	bl	8004020 <HAL_GPIO_WritePin>
					  // 啟動 PWM（記得有先呼叫 HAL_TIM_PWM_Start）
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a46:	2100      	movs	r1, #0
 8000a48:	482c      	ldr	r0, [pc, #176]	@ (8000afc <main+0x4b8>)
 8000a4a:	f006 fd6b 	bl	8007524 <HAL_TIM_PWM_Start>
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a4e:	2108      	movs	r1, #8
 8000a50:	482a      	ldr	r0, [pc, #168]	@ (8000afc <main+0x4b8>)
 8000a52:	f006 fd67 	bl	8007524 <HAL_TIM_PWM_Start>
					  // 設定占空比（範圍要 <= Period）
					  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 400); // 50% duty cycle，如果 Period 是 999
 8000a56:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <main+0x4b8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000a5e:	635a      	str	r2, [r3, #52]	@ 0x34
					  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 400);
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <main+0x4b8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000a68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a6a:	e6ab      	b.n	80007c4 <main+0x180>
				}

			  }
			  else if(strcmp((char *)RxData, "stop") == 0){
 8000a6c:	4924      	ldr	r1, [pc, #144]	@ (8000b00 <main+0x4bc>)
 8000a6e:	481f      	ldr	r0, [pc, #124]	@ (8000aec <main+0x4a8>)
 8000a70:	f7ff fbae 	bl	80001d0 <strcmp>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d121      	bne.n	8000abe <main+0x47a>
				  printf("stop\n");
 8000a7a:	4821      	ldr	r0, [pc, #132]	@ (8000b00 <main+0x4bc>)
 8000a7c:	f008 fe7c 	bl	8009778 <puts>
				  state=0;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <main+0x4b0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET); // STBY = 1
 8000a86:	2200      	movs	r2, #0
 8000a88:	2110      	movs	r1, #16
 8000a8a:	481b      	ldr	r0, [pc, #108]	@ (8000af8 <main+0x4b4>)
 8000a8c:	f003 fac8 	bl	8004020 <HAL_GPIO_WritePin>

				  					  // 設定馬達方向（AIN1 = 1, AIN2 = 0）
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);   // AIN1
 8000a90:	2200      	movs	r2, #0
 8000a92:	2101      	movs	r1, #1
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f003 fac2 	bl	8004020 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // AIN2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa4:	f003 fabc 	bl	8004020 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);   // AIN1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4812      	ldr	r0, [pc, #72]	@ (8000af8 <main+0x4b4>)
 8000aae:	f003 fab7 	bl	8004020 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // AIN2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	4810      	ldr	r0, [pc, #64]	@ (8000af8 <main+0x4b4>)
 8000ab8:	f003 fab2 	bl	8004020 <HAL_GPIO_WritePin>
 8000abc:	e682      	b.n	80007c4 <main+0x180>
				  // 啟動 PWM（記得有先呼叫 HAL_TIM_PWM_Start）
			  }
			  else
			  {
				printf("Unknown command format\n");
 8000abe:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <main+0x4c0>)
 8000ac0:	f008 fe5a 	bl	8009778 <puts>
 8000ac4:	e67e      	b.n	80007c4 <main+0x180>
			  }
		  }
		}
		else
		{
		  TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 8000ac6:	4810      	ldr	r0, [pc, #64]	@ (8000b08 <main+0x4c4>)
 8000ac8:	f008 fe56 	bl	8009778 <puts>
		  break;
 8000acc:	e000      	b.n	8000ad0 <main+0x48c>
	  if(Socket != -1)
 8000ace:	e679      	b.n	80007c4 <main+0x180>
 8000ad0:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	0800b60c 	.word	0x0800b60c
 8000ae0:	2000026c 	.word	0x2000026c
 8000ae4:	0800b610 	.word	0x0800b610
 8000ae8:	0800b624 	.word	0x0800b624
 8000aec:	200008ac 	.word	0x200008ac
 8000af0:	0800b630 	.word	0x0800b630
 8000af4:	20000ab1 	.word	0x20000ab1
 8000af8:	48000800 	.word	0x48000800
 8000afc:	20000220 	.word	0x20000220
 8000b00:	0800b638 	.word	0x0800b638
 8000b04:	0800b640 	.word	0x0800b640
 8000b08:	0800b658 	.word	0x0800b658

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	@ 0x58
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2244      	movs	r2, #68	@ 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f008 ff68 	bl	80099f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b32:	f003 fd29 	bl	8004588 <HAL_PWREx_ControlVoltageScaling>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b3c:	f000 fc96 	bl	800146c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b40:	f003 fd04 	bl	800454c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b44:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <SystemClock_Config+0xc0>)
 8000b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b4a:	4a20      	ldr	r2, [pc, #128]	@ (8000bcc <SystemClock_Config+0xc0>)
 8000b4c:	f023 0318 	bic.w	r3, r3, #24
 8000b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b54:	2314      	movs	r3, #20
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b64:	2360      	movs	r3, #96	@ 0x60
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b74:	2328      	movs	r3, #40	@ 0x28
 8000b76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fe1f 	bl	80047cc <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b94:	f000 fc6a 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 f9e7 	bl	8004f84 <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bbc:	f000 fc56 	bl	800146c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bc0:	f004 feee 	bl	80059a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bc4:	bf00      	nop
 8000bc6:	3758      	adds	r7, #88	@ 0x58
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bd6:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <MX_DFSDM1_Init+0x6c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000be8:	2202      	movs	r2, #2
 8000bea:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bfe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_DFSDM1_Init+0x68>)
 8000c26:	f002 fdf7 	bl	8003818 <HAL_DFSDM_ChannelInit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c30:	f000 fc1c 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000088 	.word	0x20000088
 8000c3c:	40016020 	.word	0x40016020

08000c40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <MX_I2C2_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c4c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000c50:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c7e:	f003 f9ff 	bl	8004080 <HAL_I2C_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c88:	f000 fbf0 	bl	800146c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000c90:	f003 fa91 	bl	80041b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c9a:	f000 fbe7 	bl	800146c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_I2C2_Init+0x74>)
 8000ca2:	f003 fad3 	bl	800424c <HAL_I2CEx_ConfigDigitalFilter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 fbde 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000c0 	.word	0x200000c0
 8000cb8:	40005800 	.word	0x40005800

08000cbc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cc2:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <MX_QUADSPI_Init+0x48>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cce:	2204      	movs	r2, #4
 8000cd0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cd4:	2210      	movs	r2, #16
 8000cd6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cda:	2217      	movs	r2, #23
 8000cdc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_QUADSPI_Init+0x44>)
 8000cec:	f003 fcb2 	bl	8004654 <HAL_QSPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cf6:	f000 fbb9 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000114 	.word	0x20000114
 8000d04:	a0001000 	.word	0xa0001000

08000d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <MX_SPI1_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d20:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d22:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d56:	2207      	movs	r2, #7
 8000d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d62:	2208      	movs	r2, #8
 8000d64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_SPI1_Init+0x74>)
 8000d68:	f004 fffc 	bl	8005d64 <HAL_SPI_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f000 fb7b 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000158 	.word	0x20000158
 8000d80:	40013000 	.word	0x40013000

08000d84 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */
//
  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dfc <MX_SPI3_Init+0x78>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000d90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000d9e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000da2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000dde:	2208      	movs	r2, #8
 8000de0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_SPI3_Init+0x74>)
 8000de4:	f004 ffbe 	bl	8005d64 <HAL_SPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fb3d 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
//
  /* USER CODE END SPI3_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001bc 	.word	0x200001bc
 8000dfc:	40003c00 	.word	0x40003c00

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e32:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000e3a:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e3c:	221f      	movs	r2, #31
 8000e3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e40:	4b34      	ldr	r3, [pc, #208]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000e46:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4e:	4b31      	ldr	r3, [pc, #196]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e5a:	482e      	ldr	r0, [pc, #184]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e5c:	f006 faa9 	bl	80073b2 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e66:	f000 fb01 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4827      	ldr	r0, [pc, #156]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e78:	f006 fd6e 	bl	8007958 <HAL_TIM_ConfigClockSource>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e82:	f000 faf3 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e86:	4823      	ldr	r0, [pc, #140]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000e88:	f006 faea 	bl	8007460 <HAL_TIM_PWM_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e92:	f000 faeb 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481b      	ldr	r0, [pc, #108]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000ea6:	f007 fa5d 	bl	8008364 <HAL_TIMEx_MasterConfigSynchronization>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000eb0:	f000 fadc 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb4:	2360      	movs	r3, #96	@ 0x60
 8000eb6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000ecc:	f006 fc30 	bl	8007730 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ed6:	f000 fac9 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2208      	movs	r2, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000ee2:	f006 fc25 	bl	8007730 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000eec:	f000 fabe 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4807      	ldr	r0, [pc, #28]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000ef8:	f006 fc1a 	bl	8007730 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000f02:	f000 fab3 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f06:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <MX_TIM2_Init+0x114>)
 8000f08:	f000 fcba 	bl	8001880 <HAL_TIM_MspPostInit>

}
 8000f0c:	bf00      	nop
 8000f0e:	3738      	adds	r7, #56	@ 0x38
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000220 	.word	0x20000220

08000f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	@ 0x38
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f4a:	4b33      	ldr	r3, [pc, #204]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f4c:	4a33      	ldr	r2, [pc, #204]	@ (800101c <MX_TIM3_Init+0x104>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000f50:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f52:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000f56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f72:	4829      	ldr	r0, [pc, #164]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f74:	f006 fa1d 	bl	80073b2 <HAL_TIM_Base_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000f7e:	f000 fa75 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4822      	ldr	r0, [pc, #136]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000f90:	f006 fce2 	bl	8007958 <HAL_TIM_ConfigClockSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000f9a:	f000 fa67 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f9e:	481e      	ldr	r0, [pc, #120]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000fa0:	f006 fa5e 	bl	8007460 <HAL_TIM_PWM_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000faa:	f000 fa5f 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4816      	ldr	r0, [pc, #88]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000fbe:	f007 f9d1 	bl	8008364 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000fc8:	f000 fa50 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fcc:	2360      	movs	r3, #96	@ 0x60
 8000fce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480d      	ldr	r0, [pc, #52]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000fe4:	f006 fba4 	bl	8007730 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000fee:	f000 fa3d 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	220c      	movs	r2, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4807      	ldr	r0, [pc, #28]	@ (8001018 <MX_TIM3_Init+0x100>)
 8000ffa:	f006 fb99 	bl	8007730 <HAL_TIM_PWM_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001004:	f000 fa32 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <MX_TIM3_Init+0x100>)
 800100a:	f000 fc39 	bl	8001880 <HAL_TIM_MspPostInit>

}
 800100e:	bf00      	nop
 8001010:	3738      	adds	r7, #56	@ 0x38
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000026c 	.word	0x2000026c
 800101c:	40000400 	.word	0x40000400

08001020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001026:	4a15      	ldr	r2, [pc, #84]	@ (800107c <MX_USART1_UART_Init+0x5c>)
 8001028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_USART1_UART_Init+0x58>)
 8001064:	f007 fa06 	bl	8008474 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 f9fd 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200002b8 	.word	0x200002b8
 800107c:	40013800 	.word	0x40013800

08001080 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 8001086:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <MX_USART3_UART_Init+0x5c>)
 8001088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_USART3_UART_Init+0x58>)
 80010c4:	f007 f9d6 	bl	8008474 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010ce:	f000 f9cd 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000340 	.word	0x20000340
 80010dc:	40004800 	.word	0x40004800

080010e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ee:	2206      	movs	r2, #6
 80010f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001124:	f003 f8de 	bl	80042e4 <HAL_PCD_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 f99d 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200003c8 	.word	0x200003c8

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001152:	4bad      	ldr	r3, [pc, #692]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	4aac      	ldr	r2, [pc, #688]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115e:	4baa      	ldr	r3, [pc, #680]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4ba7      	ldr	r3, [pc, #668]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4aa6      	ldr	r2, [pc, #664]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4ba4      	ldr	r3, [pc, #656]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4ba1      	ldr	r3, [pc, #644]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4aa0      	ldr	r2, [pc, #640]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b9e      	ldr	r3, [pc, #632]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b9b      	ldr	r3, [pc, #620]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a9a      	ldr	r2, [pc, #616]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b98      	ldr	r3, [pc, #608]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b2:	4b95      	ldr	r3, [pc, #596]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a94      	ldr	r2, [pc, #592]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b92      	ldr	r3, [pc, #584]	@ (8001408 <MX_GPIO_Init+0x2cc>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80011d0:	488e      	ldr	r0, [pc, #568]	@ (800140c <MX_GPIO_Init+0x2d0>)
 80011d2:	f002 ff25 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011d6:	2200      	movs	r2, #0
 80011d8:	f240 215f 	movw	r1, #607	@ 0x25f
 80011dc:	488c      	ldr	r0, [pc, #560]	@ (8001410 <MX_GPIO_Init+0x2d4>)
 80011de:	f002 ff1f 	bl	8004020 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f240 1103 	movw	r1, #259	@ 0x103
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ec:	f002 ff18 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80011f0:	2200      	movs	r2, #0
 80011f2:	f24f 0104 	movw	r1, #61444	@ 0xf004
 80011f6:	4887      	ldr	r0, [pc, #540]	@ (8001414 <MX_GPIO_Init+0x2d8>)
 80011f8:	f002 ff12 	bl	8004020 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001202:	4885      	ldr	r0, [pc, #532]	@ (8001418 <MX_GPIO_Init+0x2dc>)
 8001204:	f002 ff0c 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120e:	4882      	ldr	r0, [pc, #520]	@ (8001418 <MX_GPIO_Init+0x2dc>)
 8001210:	f002 ff06 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	487e      	ldr	r0, [pc, #504]	@ (8001414 <MX_GPIO_Init+0x2d8>)
 800121a:	f002 ff01 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2101      	movs	r1, #1
 8001222:	487a      	ldr	r0, [pc, #488]	@ (800140c <MX_GPIO_Init+0x2d0>)
 8001224:	f002 fefc 	bl	8004020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001228:	f240 1315 	movw	r3, #277	@ 0x115
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4872      	ldr	r0, [pc, #456]	@ (800140c <MX_GPIO_Init+0x2d0>)
 8001242:	f002 fc37 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001246:	236a      	movs	r3, #106	@ 0x6a
 8001248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	486c      	ldr	r0, [pc, #432]	@ (800140c <MX_GPIO_Init+0x2d0>)
 800125c:	f002 fc2a 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001260:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001266:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4866      	ldr	r0, [pc, #408]	@ (8001410 <MX_GPIO_Init+0x2d4>)
 8001278:	f002 fc1c 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800127c:	f240 235f 	movw	r3, #607	@ 0x25f
 8001280:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	485e      	ldr	r0, [pc, #376]	@ (8001410 <MX_GPIO_Init+0x2d4>)
 8001296:	f002 fc0d 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|SPBTLE_RF_RST_Pin;
 800129a:	f240 1303 	movw	r3, #259	@ 0x103
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b6:	f002 fbfd 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012ba:	2310      	movs	r3, #16
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012be:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d2:	f002 fbef 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin;
 80012d6:	2320      	movs	r3, #32
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012da:	230b      	movs	r3, #11
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4849      	ldr	r0, [pc, #292]	@ (8001410 <MX_GPIO_Init+0x2d4>)
 80012ea:	f002 fbe3 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4844      	ldr	r0, [pc, #272]	@ (8001414 <MX_GPIO_Init+0x2d8>)
 8001304:	f002 fbd6 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001308:	f24f 0324 	movw	r3, #61476	@ 0xf024
 800130c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	483c      	ldr	r0, [pc, #240]	@ (8001414 <MX_GPIO_Init+0x2d8>)
 8001322:	f002 fbc7 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001326:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800132a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4836      	ldr	r0, [pc, #216]	@ (8001418 <MX_GPIO_Init+0x2dc>)
 800133e:	f002 fbb9 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001342:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	482f      	ldr	r0, [pc, #188]	@ (8001418 <MX_GPIO_Init+0x2dc>)
 800135c:	f002 fbaa 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001360:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001366:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4826      	ldr	r0, [pc, #152]	@ (8001410 <MX_GPIO_Init+0x2d4>)
 8001378:	f002 fb9c 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800137c:	2302      	movs	r3, #2
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800138c:	2305      	movs	r3, #5
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4820      	ldr	r0, [pc, #128]	@ (8001418 <MX_GPIO_Init+0x2dc>)
 8001398:	f002 fb8c 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800139c:	2378      	movs	r3, #120	@ 0x78
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ac:	2307      	movs	r3, #7
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4818      	ldr	r0, [pc, #96]	@ (8001418 <MX_GPIO_Init+0x2dc>)
 80013b8:	f002 fb7c 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80013bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c2:	2312      	movs	r3, #18
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ce:	2304      	movs	r3, #4
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	480e      	ldr	r0, [pc, #56]	@ (8001414 <MX_GPIO_Init+0x2d8>)
 80013da:	f002 fb6b 	bl	8003ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2017      	movs	r0, #23
 80013e4:	f002 f9e1 	bl	80037aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013e8:	2017      	movs	r0, #23
 80013ea:	f002 f9fa 	bl	80037e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2028      	movs	r0, #40	@ 0x28
 80013f4:	f002 f9d9 	bl	80037aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013f8:	2028      	movs	r0, #40	@ 0x28
 80013fa:	f002 f9f2 	bl	80037e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	@ 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	48001000 	.word	0x48001000
 8001410:	48000800 	.word	0x48000800
 8001414:	48000400 	.word	0x48000400
 8001418:	48000c00 	.word	0x48000c00

0800141c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d002      	beq.n	8001432 <HAL_GPIO_EXTI_Callback+0x16>
 800142c:	2b10      	cmp	r3, #16
 800142e:	d006      	beq.n	800143e <HAL_GPIO_EXTI_Callback+0x22>
		break;
	}

    default:
    {
      break;
 8001430:	e00b      	b.n	800144a <HAL_GPIO_EXTI_Callback+0x2e>
		SPI_WIFI_ISR();
 8001432:	f001 ff47 	bl	80032c4 <SPI_WIFI_ISR>
		printf("wifitest\n");
 8001436:	4807      	ldr	r0, [pc, #28]	@ (8001454 <HAL_GPIO_EXTI_Callback+0x38>)
 8001438:	f008 f99e 	bl	8009778 <puts>
		break;
 800143c:	e005      	b.n	800144a <HAL_GPIO_EXTI_Callback+0x2e>
		if (HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin) == GPIO_PIN_RESET)  // Falling edge (pressed)
 800143e:	2110      	movs	r1, #16
 8001440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001444:	f002 fdd4 	bl	8003ff0 <HAL_GPIO_ReadPin>
		break;
 8001448:	bf00      	nop
    }
  }
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800b68c 	.word	0x0800b68c

08001458 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 800145c:	4802      	ldr	r0, [pc, #8]	@ (8001468 <SPI3_IRQHandler+0x10>)
 800145e:	f005 fa7f 	bl	8006960 <HAL_SPI_IRQHandler>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000ac0 	.word	0x20000ac0

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <Error_Handler+0x8>

08001478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_MspInit+0x44>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6613      	str	r3, [r2, #96]	@ 0x60
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_MspInit+0x44>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0ac      	sub	sp, #176	@ 0xb0
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2288      	movs	r2, #136	@ 0x88
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f008 fa85 	bl	80099f0 <memset>
  if(DFSDM1_Init == 0)
 80014e6:	4b25      	ldr	r3, [pc, #148]	@ (800157c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d142      	bne.n	8001574 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80014ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 ff64 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800150a:	f7ff ffaf 	bl	800146c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001512:	4a1b      	ldr	r2, [pc, #108]	@ (8001580 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001514:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001518:	6613      	str	r3, [r2, #96]	@ 0x60
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4a15      	ldr	r2, [pc, #84]	@ (8001580 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800153e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001558:	2306      	movs	r3, #6
 800155a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001566:	f002 faa5 	bl	8003ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800156a:	4b04      	ldr	r3, [pc, #16]	@ (800157c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3301      	adds	r3, #1
 8001570:	4a02      	ldr	r2, [pc, #8]	@ (800157c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001572:	6013      	str	r3, [r2, #0]
  }

}
 8001574:	bf00      	nop
 8001576:	37b0      	adds	r7, #176	@ 0xb0
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000ab4 	.word	0x20000ab4
 8001580:	40021000 	.word	0x40021000
 8001584:	48001000 	.word	0x48001000

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0ac      	sub	sp, #176	@ 0xb0
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2288      	movs	r2, #136	@ 0x88
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 fa21 	bl	80099f0 <memset>
  if(hi2c->Instance==I2C2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <HAL_I2C_MspInit+0xb0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d13b      	bne.n	8001630 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 ff01 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015d0:	f7ff ff4c 	bl	800146c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d8:	4a18      	ldr	r2, [pc, #96]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80015ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001606:	2304      	movs	r3, #4
 8001608:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	@ (8001640 <HAL_I2C_MspInit+0xb8>)
 8001614:	f002 fa4e 	bl	8003ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161c:	4a07      	ldr	r2, [pc, #28]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 800161e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001622:	6593      	str	r3, [r2, #88]	@ 0x58
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <HAL_I2C_MspInit+0xb4>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001630:	bf00      	nop
 8001632:	37b0      	adds	r7, #176	@ 0xb0
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40005800 	.word	0x40005800
 800163c:	40021000 	.word	0x40021000
 8001640:	48000400 	.word	0x48000400

08001644 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_QSPI_MspInit+0x7c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d128      	bne.n	80016b8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_QSPI_MspInit+0x80>)
 8001668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <HAL_QSPI_MspInit+0x80>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6513      	str	r3, [r2, #80]	@ 0x50
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_QSPI_MspInit+0x80>)
 8001674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_QSPI_MspInit+0x80>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <HAL_QSPI_MspInit+0x80>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_QSPI_MspInit+0x80>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001696:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800169a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016a8:	230a      	movs	r3, #10
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <HAL_QSPI_MspInit+0x84>)
 80016b4:	f002 f9fe 	bl	8003ab4 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	a0001000 	.word	0xa0001000
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48001000 	.word	0x48001000

080016cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	@ 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a2f      	ldr	r2, [pc, #188]	@ (80017a8 <HAL_SPI_MspInit+0xdc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d129      	bne.n	8001742 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ee:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f2:	4a2e      	ldr	r2, [pc, #184]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 80016f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016fa:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	4a28      	ldr	r2, [pc, #160]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001712:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|ARD_D12_Pin|ARD_D11_Pin;
 800171e:	23e0      	movs	r3, #224	@ 0xe0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172e:	2305      	movs	r3, #5
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173c:	f002 f9ba 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001740:	e02d      	b.n	800179e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1a      	ldr	r2, [pc, #104]	@ (80017b0 <HAL_SPI_MspInit+0xe4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d128      	bne.n	800179e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 8001752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001756:	6593      	str	r3, [r2, #88]	@ 0x58
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_SPI_MspInit+0xe0>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800177c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800178e:	2306      	movs	r3, #6
 8001790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <HAL_SPI_MspInit+0xe8>)
 800179a:	f002 f98b 	bl	8003ab4 <HAL_GPIO_Init>
}
 800179e:	bf00      	nop
 80017a0:	3730      	adds	r7, #48	@ 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40003c00 	.word	0x40003c00
 80017b4:	48000800 	.word	0x48000800

080017b8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a11      	ldr	r2, [pc, #68]	@ (800180c <HAL_SPI_MspDeInit+0x54>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d10b      	bne.n	80017e2 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_SPI_MspDeInit+0x58>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <HAL_SPI_MspDeInit+0x58>)
 80017d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017d4:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|ARD_D12_Pin|ARD_D11_Pin);
 80017d6:	21e0      	movs	r1, #224	@ 0xe0
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017dc:	f002 fb14 	bl	8003e08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80017e0:	e00f      	b.n	8001802 <HAL_SPI_MspDeInit+0x4a>
  else if(hspi->Instance==SPI3)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <HAL_SPI_MspDeInit+0x5c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d10a      	bne.n	8001802 <HAL_SPI_MspDeInit+0x4a>
    __HAL_RCC_SPI3_CLK_DISABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_SPI_MspDeInit+0x58>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <HAL_SPI_MspDeInit+0x58>)
 80017f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80017f6:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80017f8:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80017fc:	4806      	ldr	r0, [pc, #24]	@ (8001818 <HAL_SPI_MspDeInit+0x60>)
 80017fe:	f002 fb03 	bl	8003e08 <HAL_GPIO_DeInit>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40013000 	.word	0x40013000
 8001810:	40021000 	.word	0x40021000
 8001814:	40003c00 	.word	0x40003c00
 8001818:	48000800 	.word	0x48000800

0800181c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800182c:	d10c      	bne.n	8001848 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_TIM_Base_MspInit+0x5c>)
 8001830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001832:	4a11      	ldr	r2, [pc, #68]	@ (8001878 <HAL_TIM_Base_MspInit+0x5c>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6593      	str	r3, [r2, #88]	@ 0x58
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <HAL_TIM_Base_MspInit+0x5c>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001846:	e010      	b.n	800186a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0b      	ldr	r2, [pc, #44]	@ (800187c <HAL_TIM_Base_MspInit+0x60>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10b      	bne.n	800186a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_TIM_Base_MspInit+0x5c>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_TIM_Base_MspInit+0x5c>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6593      	str	r3, [r2, #88]	@ 0x58
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_TIM_Base_MspInit+0x5c>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	40000400 	.word	0x40000400

08001880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	@ 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a0:	d11e      	bne.n	80018e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	4b22      	ldr	r3, [pc, #136]	@ (800192c <HAL_TIM_MspPostInit+0xac>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	4a21      	ldr	r2, [pc, #132]	@ (800192c <HAL_TIM_MspPostInit+0xac>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ae:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_TIM_MspPostInit+0xac>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80018ba:	f248 030c 	movw	r3, #32780	@ 0x800c
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018cc:	2301      	movs	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018da:	f002 f8eb 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018de:	e020      	b.n	8001922 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <HAL_TIM_MspPostInit+0xb0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11b      	bne.n	8001922 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_TIM_MspPostInit+0xac>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <HAL_TIM_MspPostInit+0xac>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_TIM_MspPostInit+0xac>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001902:	2312      	movs	r3, #18
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001912:	2302      	movs	r3, #2
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	@ (8001934 <HAL_TIM_MspPostInit+0xb4>)
 800191e:	f002 f8c9 	bl	8003ab4 <HAL_GPIO_Init>
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	@ 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40000400 	.word	0x40000400
 8001934:	48000400 	.word	0x48000400

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0ae      	sub	sp, #184	@ 0xb8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2288      	movs	r2, #136	@ 0x88
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f008 f849 	bl	80099f0 <memset>
  if(huart->Instance==USART1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a42      	ldr	r2, [pc, #264]	@ (8001a6c <HAL_UART_MspInit+0x134>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d13b      	bne.n	80019e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800196c:	2300      	movs	r3, #0
 800196e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fd29 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001980:	f7ff fd74 	bl	800146c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001984:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001988:	4a39      	ldr	r2, [pc, #228]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 800198a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800198e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001990:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a33      	ldr	r2, [pc, #204]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a8:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80019b4:	23c0      	movs	r3, #192	@ 0xc0
 80019b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019cc:	2307      	movs	r3, #7
 80019ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4826      	ldr	r0, [pc, #152]	@ (8001a74 <HAL_UART_MspInit+0x13c>)
 80019da:	f002 f86b 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019de:	e040      	b.n	8001a62 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a24      	ldr	r2, [pc, #144]	@ (8001a78 <HAL_UART_MspInit+0x140>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d13b      	bne.n	8001a62 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019ea:	2304      	movs	r3, #4
 80019ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fce8 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001a02:	f7ff fd33 	bl	800146c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	4a19      	ldr	r2, [pc, #100]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	4a13      	ldr	r2, [pc, #76]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2a:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <HAL_UART_MspInit+0x138>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001a36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a56:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	@ (8001a7c <HAL_UART_MspInit+0x144>)
 8001a5e:	f002 f829 	bl	8003ab4 <HAL_GPIO_Init>
}
 8001a62:	bf00      	nop
 8001a64:	37b8      	adds	r7, #184	@ 0xb8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000400 	.word	0x48000400
 8001a78:	40004800 	.word	0x40004800
 8001a7c:	48000c00 	.word	0x48000c00

08001a80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0ac      	sub	sp, #176	@ 0xb0
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2288      	movs	r2, #136	@ 0x88
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f007 ffa5 	bl	80099f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aae:	d17c      	bne.n	8001baa <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ab0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ab6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001aba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001ac6:	2318      	movs	r3, #24
 8001ac8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001aca:	2307      	movs	r3, #7
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001ad6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ada:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fc73 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001aec:	f7ff fcbe 	bl	800146c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af4:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b26:	f001 ffc5 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b2a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b44:	230a      	movs	r3, #10
 8001b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b54:	f001 ffae 	bl	8003ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b64:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b70:	4b10      	ldr	r3, [pc, #64]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d114      	bne.n	8001ba6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b80:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001b94:	f002 fd4e 	bl	8004634 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <HAL_PCD_MspInit+0x134>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001ba4:	e001      	b.n	8001baa <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001ba6:	f002 fd45 	bl	8004634 <HAL_PWREx_EnableVddUSB>
}
 8001baa:	bf00      	nop
 8001bac:	37b0      	adds	r7, #176	@ 0xb0
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <NMI_Handler+0x4>

08001bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <MemManage_Handler+0x4>

08001bd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <UsageFault_Handler+0x4>

08001be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0e:	f001 fcad 	bl	800356c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001c1a:	2020      	movs	r0, #32
 8001c1c:	f002 fa18 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001c20:	2040      	movs	r0, #64	@ 0x40
 8001c22:	f002 fa15 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001c26:	2080      	movs	r0, #128	@ 0x80
 8001c28:	f002 fa12 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001c2c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c30:	f002 fa0e 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001c3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c40:	f002 fa06 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001c44:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c48:	f002 fa02 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001c4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c50:	f002 f9fe 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001c54:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c58:	f002 f9fa 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001c5c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c60:	f002 f9f6 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f002 f9ef 	bl	8004050 <HAL_GPIO_EXTI_IRQHandler>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_kill>:

int _kill(int pid, int sig)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c90:	f007 ff94 	bl	8009bbc <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2216      	movs	r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
  return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_exit>:

void _exit (int status)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffe7 	bl	8001c86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <_exit+0x12>

08001cbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e00a      	b.n	8001ce4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cce:	f3af 8000 	nop.w
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf0      	blt.n	8001cce <_read+0x12>
  }

  return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e009      	b.n	8001d1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60ba      	str	r2, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc3d 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	dbf1      	blt.n	8001d08 <_write+0x12>
  }
  return len;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_close>:

int _close(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d56:	605a      	str	r2, [r3, #4]
  return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_isatty>:

int _isatty(int file)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da0:	4a14      	ldr	r2, [pc, #80]	@ (8001df4 <_sbrk+0x5c>)
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <_sbrk+0x60>)
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <_sbrk+0x64>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	@ (8001e00 <_sbrk+0x68>)
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d207      	bcs.n	8001dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc8:	f007 fef8 	bl	8009bbc <__errno>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	220c      	movs	r2, #12
 8001dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	e009      	b.n	8001dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dde:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <_sbrk+0x64>)
 8001de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20018000 	.word	0x20018000
 8001df8:	00000400 	.word	0x00000400
 8001dfc:	20000ab8 	.word	0x20000ab8
 8001e00:	200015a8 	.word	0x200015a8

08001e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <SystemInit+0x20>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0e:	4a05      	ldr	r2, [pc, #20]	@ (8001e24 <SystemInit+0x20>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff ffea 	bl	8001e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e32:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e34:	4a0d      	ldr	r2, [pc, #52]	@ (8001e6c <LoopForever+0xe>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e48:	4c0a      	ldr	r4, [pc, #40]	@ (8001e74 <LoopForever+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e56:	f007 feb7 	bl	8009bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5a:	f7fe fbf3 	bl	8000644 <main>

08001e5e <LoopForever>:

LoopForever:
    b LoopForever
 8001e5e:	e7fe      	b.n	8001e5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e6c:	0800bdb0 	.word	0x0800bdb0
  ldr r2, =_sbss
 8001e70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e74:	200015a8 	.word	0x200015a8

08001e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC1_2_IRQHandler>

08001e7a <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e88:	d906      	bls.n	8001e98 <Hex2Num+0x1e>
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b39      	cmp	r3, #57	@ 0x39
 8001e8e:	d803      	bhi.n	8001e98 <Hex2Num+0x1e>
        return a - '0';
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	3b30      	subs	r3, #48	@ 0x30
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e014      	b.n	8001ec2 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b60      	cmp	r3, #96	@ 0x60
 8001e9c:	d906      	bls.n	8001eac <Hex2Num+0x32>
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	2b66      	cmp	r3, #102	@ 0x66
 8001ea2:	d803      	bhi.n	8001eac <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	3b57      	subs	r3, #87	@ 0x57
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	e00a      	b.n	8001ec2 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b40      	cmp	r3, #64	@ 0x40
 8001eb0:	d906      	bls.n	8001ec0 <Hex2Num+0x46>
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b46      	cmp	r3, #70	@ 0x46
 8001eb6:	d803      	bhi.n	8001ec0 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	3b37      	subs	r3, #55	@ 0x37
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	e000      	b.n	8001ec2 <Hex2Num+0x48>
    }

    return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001ee0:	e012      	b.n	8001f08 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ffc4 	bl	8001e7a <Hex2Num>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	4413      	add	r3, r2
 8001efa:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3301      	adds	r3, #1
 8001f00:	607b      	str	r3, [r7, #4]
        done_count++;
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	3301      	adds	r3, #1
 8001f06:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f0e:	d903      	bls.n	8001f18 <ParseHexNumber+0x4a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b39      	cmp	r3, #57	@ 0x39
 8001f16:	d90f      	bls.n	8001f38 <ParseHexNumber+0x6a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b60      	cmp	r3, #96	@ 0x60
 8001f1e:	d903      	bls.n	8001f28 <ParseHexNumber+0x5a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b66      	cmp	r3, #102	@ 0x66
 8001f26:	d907      	bls.n	8001f38 <ParseHexNumber+0x6a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b40      	cmp	r3, #64	@ 0x40
 8001f2e:	d906      	bls.n	8001f3e <ParseHexNumber+0x70>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b46      	cmp	r3, #70	@ 0x46
 8001f36:	d802      	bhi.n	8001f3e <ParseHexNumber+0x70>
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d9d1      	bls.n	8001ee2 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7bba      	ldrb	r2, [r7, #14]
 8001f48:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f70:	d119      	bne.n	8001fa6 <ParseNumber+0x52>
        minus = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	607b      	str	r3, [r7, #4]
        done_count++;
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001f82:	e010      	b.n	8001fa6 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3b30      	subs	r3, #48	@ 0x30
 8001f96:	4413      	add	r3, r2
 8001f98:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
        done_count++;
 8001fa0:	7bbb      	ldrb	r3, [r7, #14]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b2f      	cmp	r3, #47	@ 0x2f
 8001fac:	d903      	bls.n	8001fb6 <ParseNumber+0x62>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b39      	cmp	r3, #57	@ 0x39
 8001fb4:	d9e6      	bls.n	8001f84 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <ParseNumber+0x6e>
        *cnt = done_count;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	7bba      	ldrb	r2, [r7, #14]
 8001fc0:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d002      	beq.n	8001fce <ParseNumber+0x7a>
        return 0 - sum;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	425b      	negs	r3, r3
 8001fcc:	e000      	b.n	8001fd0 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001fce:	68bb      	ldr	r3, [r7, #8]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d027      	beq.n	8002042 <ParseMAC+0x66>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d024      	beq.n	8002042 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001ff8:	e018      	b.n	800202c <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b3a      	cmp	r3, #58	@ 0x3a
 8002004:	d00d      	beq.n	8002022 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	75fa      	strb	r2, [r7, #23]
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	189c      	adds	r4, r3, r2
 8002012:	f107 0316 	add.w	r3, r7, #22
 8002016:	4619      	mov	r1, r3
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff ff58 	bl	8001ece <ParseHexNumber>
 800201e:	4603      	mov	r3, r0
 8002020:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8002022:	7dbb      	ldrb	r3, [r7, #22]
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4413      	add	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d906      	bls.n	8002042 <ParseMAC+0x66>
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d803      	bhi.n	8002042 <ParseMAC+0x66>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1db      	bne.n	8001ffa <ParseMAC+0x1e>
   }
  }
}
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}

0800204a <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d027      	beq.n	80020b0 <ParseIP+0x66>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d024      	beq.n	80020b0 <ParseIP+0x66>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d921      	bls.n	80020b0 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800206c:	e019      	b.n	80020a2 <ParseIP+0x58>
    uint8_t done_count = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b2e      	cmp	r3, #46	@ 0x2e
 8002078:	d00e      	beq.n	8002098 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 800207a:	f107 0316 	add.w	r3, r7, #22
 800207e:	4619      	mov	r1, r3
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff ff67 	bl	8001f54 <ParseNumber>
 8002086:	4601      	mov	r1, r0
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	75fa      	strb	r2, [r7, #23]
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4413      	add	r3, r2
 8002094:	b2ca      	uxtb	r2, r1
 8002096:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8002098:	7dbb      	ldrb	r3, [r7, #22]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d803      	bhi.n	80020b0 <ParseIP+0x66>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1de      	bne.n	800206e <ParseIP+0x24>
   }
  }
}
 80020b0:	bf00      	nop
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	3302      	adds	r3, #2
 80020ca:	4940      	ldr	r1, [pc, #256]	@ (80021cc <AT_ParseInfo+0x114>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 fcbd 	bl	8009a4c <strtok>
 80020d2:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80020d4:	e071      	b.n	80021ba <AT_ParseInfo+0x102>
    switch (num++) {
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	72fa      	strb	r2, [r7, #11]
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d866      	bhi.n	80021ae <AT_ParseInfo+0xf6>
 80020e0:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <AT_ParseInfo+0x30>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	08002105 	.word	0x08002105
 80020ec:	08002119 	.word	0x08002119
 80020f0:	08002131 	.word	0x08002131
 80020f4:	08002149 	.word	0x08002149
 80020f8:	08002161 	.word	0x08002161
 80020fc:	08002179 	.word	0x08002179
 8002100:	0800218d 	.word	0x0800218d
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	221f      	movs	r2, #31
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	4618      	mov	r0, r3
 800210c:	f007 fc8a 	bl	8009a24 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	77da      	strb	r2, [r3, #31]
      break;
 8002116:	e04b      	b.n	80021b0 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3320      	adds	r3, #32
 800211c:	2217      	movs	r2, #23
 800211e:	68f9      	ldr	r1, [r7, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f007 fc7f 	bl	8009a24 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 800212e:	e03f      	b.n	80021b0 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3338      	adds	r3, #56	@ 0x38
 8002134:	220f      	movs	r2, #15
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f007 fc73 	bl	8009a24 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8002146:	e033      	b.n	80021b0 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3348      	adds	r3, #72	@ 0x48
 800214c:	220f      	movs	r2, #15
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	4618      	mov	r0, r3
 8002152:	f007 fc67 	bl	8009a24 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 800215e:	e027      	b.n	80021b0 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3358      	adds	r3, #88	@ 0x58
 8002164:	220f      	movs	r2, #15
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	4618      	mov	r0, r3
 800216a:	f007 fc5b 	bl	8009a24 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8002176:	e01b      	b.n	80021b0 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8002178:	2100      	movs	r1, #0
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff feea 	bl	8001f54 <ParseNumber>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 800218a:	e011      	b.n	80021b0 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 800218c:	4910      	ldr	r1, [pc, #64]	@ (80021d0 <AT_ParseInfo+0x118>)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f007 fc5c 	bl	8009a4c <strtok>
 8002194:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3368      	adds	r3, #104	@ 0x68
 800219a:	221f      	movs	r2, #31
 800219c:	68f9      	ldr	r1, [r7, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	f007 fc40 	bl	8009a24 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 80021ac:	e000      	b.n	80021b0 <AT_ParseInfo+0xf8>

    default: break;
 80021ae:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80021b0:	4906      	ldr	r1, [pc, #24]	@ (80021cc <AT_ParseInfo+0x114>)
 80021b2:	2000      	movs	r0, #0
 80021b4:	f007 fc4a 	bl	8009a4c <strtok>
 80021b8:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d18a      	bne.n	80020d6 <AT_ParseInfo+0x1e>
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0800b6c8 	.word	0x0800b6c8
 80021d0:	0800b6cc 	.word	0x0800b6cc

080021d4 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3302      	adds	r3, #2
 80021e6:	4959      	ldr	r1, [pc, #356]	@ (800234c <AT_ParseConnSettings+0x178>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f007 fc2f 	bl	8009a4c <strtok>
 80021ee:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80021f0:	e0a2      	b.n	8002338 <AT_ParseConnSettings+0x164>
    switch (num++) {
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	73fa      	strb	r2, [r7, #15]
 80021f8:	2b0b      	cmp	r3, #11
 80021fa:	f200 808c 	bhi.w	8002316 <AT_ParseConnSettings+0x142>
 80021fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <AT_ParseConnSettings+0x30>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	08002235 	.word	0x08002235
 8002208:	0800224b 	.word	0x0800224b
 800220c:	08002263 	.word	0x08002263
 8002210:	08002277 	.word	0x08002277
 8002214:	0800228b 	.word	0x0800228b
 8002218:	0800229f 	.word	0x0800229f
 800221c:	080022af 	.word	0x080022af
 8002220:	080022bf 	.word	0x080022bf
 8002224:	080022cf 	.word	0x080022cf
 8002228:	080022df 	.word	0x080022df
 800222c:	080022ef 	.word	0x080022ef
 8002230:	08002303 	.word	0x08002303
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2220      	movs	r2, #32
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	f007 fbf2 	bl	8009a24 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8002248:	e066      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	3321      	adds	r3, #33	@ 0x21
 800224e:	2220      	movs	r2, #32
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f007 fbe6 	bl	8009a24 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8002260:	e05a      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8002262:	2100      	movs	r1, #0
 8002264:	68b8      	ldr	r0, [r7, #8]
 8002266:	f7ff fe75 	bl	8001f54 <ParseNumber>
 800226a:	4603      	mov	r3, r0
 800226c:	b2da      	uxtb	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8002274:	e050      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8002276:	2100      	movs	r1, #0
 8002278:	68b8      	ldr	r0, [r7, #8]
 800227a:	f7ff fe6b 	bl	8001f54 <ParseNumber>
 800227e:	4603      	mov	r3, r0
 8002280:	b2da      	uxtb	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8002288:	e046      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800228a:	2100      	movs	r1, #0
 800228c:	68b8      	ldr	r0, [r7, #8]
 800228e:	f7ff fe61 	bl	8001f54 <ParseNumber>
 8002292:	4603      	mov	r3, r0
 8002294:	b2da      	uxtb	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 800229c:	e03c      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	3348      	adds	r3, #72	@ 0x48
 80022a2:	2204      	movs	r2, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	68b8      	ldr	r0, [r7, #8]
 80022a8:	f7ff fecf 	bl	800204a <ParseIP>
      break;
 80022ac:	e034      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	334c      	adds	r3, #76	@ 0x4c
 80022b2:	2204      	movs	r2, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	68b8      	ldr	r0, [r7, #8]
 80022b8:	f7ff fec7 	bl	800204a <ParseIP>
      break;
 80022bc:	e02c      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	3350      	adds	r3, #80	@ 0x50
 80022c2:	2204      	movs	r2, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	68b8      	ldr	r0, [r7, #8]
 80022c8:	f7ff febf 	bl	800204a <ParseIP>
      break;
 80022cc:	e024      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3354      	adds	r3, #84	@ 0x54
 80022d2:	2204      	movs	r2, #4
 80022d4:	4619      	mov	r1, r3
 80022d6:	68b8      	ldr	r0, [r7, #8]
 80022d8:	f7ff feb7 	bl	800204a <ParseIP>
      break;
 80022dc:	e01c      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3358      	adds	r3, #88	@ 0x58
 80022e2:	2204      	movs	r2, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	68b8      	ldr	r0, [r7, #8]
 80022e8:	f7ff feaf 	bl	800204a <ParseIP>
      break;
 80022ec:	e014      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 80022ee:	2100      	movs	r1, #0
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f7ff fe2f 	bl	8001f54 <ParseNumber>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8002300:	e00a      	b.n	8002318 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8002302:	2100      	movs	r1, #0
 8002304:	68b8      	ldr	r0, [r7, #8]
 8002306:	f7ff fe25 	bl	8001f54 <ParseNumber>
 800230a:	4603      	mov	r3, r0
 800230c:	b2da      	uxtb	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8002314:	e000      	b.n	8002318 <AT_ParseConnSettings+0x144>

    default:
      break;
 8002316:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002318:	490c      	ldr	r1, [pc, #48]	@ (800234c <AT_ParseConnSettings+0x178>)
 800231a:	2000      	movs	r0, #0
 800231c:	f007 fb96 	bl	8009a4c <strtok>
 8002320:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <AT_ParseConnSettings+0x164>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	3b01      	subs	r3, #1
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002330:	d102      	bne.n	8002338 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f47f af59 	bne.w	80021f2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	0800b6c8 	.word	0x0800b6c8

08002350 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800236a:	2b00      	cmp	r3, #0
 800236c:	d056      	beq.n	800241c <AT_ExecuteCommand+0xcc>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002374:	2b00      	cmp	r3, #0
 8002376:	d051      	beq.n	800241c <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 800237e:	68b8      	ldr	r0, [r7, #8]
 8002380:	f7fd ff30 	bl	80001e4 <strlen>
 8002384:	4603      	mov	r3, r0
 8002386:	b299      	uxth	r1, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 800238e:	461a      	mov	r2, r3
 8002390:	68b8      	ldr	r0, [r7, #8]
 8002392:	47a0      	blx	r4
 8002394:	4603      	mov	r3, r0
 8002396:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	dd3e      	ble.n	800241c <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 80023aa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80023b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	dd27      	ble.n	800240e <AT_ExecuteCommand+0xbe>
 80023be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023c2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023c6:	dc22      	bgt.n	800240e <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80023c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023d0:	d105      	bne.n	80023de <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 80023d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29b      	uxth	r3, r3
 80023dc:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 80023de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 80023ea:	490f      	ldr	r1, [pc, #60]	@ (8002428 <AT_ExecuteCommand+0xd8>)
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f007 fb89 	bl	8009b04 <strstr>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e010      	b.n	800241e <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80023fc:	490b      	ldr	r1, [pc, #44]	@ (800242c <AT_ExecuteCommand+0xdc>)
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f007 fb80 	bl	8009b04 <strstr>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800240a:	2305      	movs	r3, #5
 800240c:	e007      	b.n	800241e <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800240e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002412:	f113 0f04 	cmn.w	r3, #4
 8002416:	d101      	bne.n	800241c <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8002418:	2306      	movs	r3, #6
 800241a:	e000      	b.n	800241e <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 800241c:	2304      	movs	r3, #4
}
 800241e:	4618      	mov	r0, r3
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	bf00      	nop
 8002428:	0800b6e0 	.word	0x0800b6e0
 800242c:	0800b6ec 	.word	0x0800b6ec

08002430 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002444:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8087 	beq.w	8002560 <AT_RequestReceiveData+0x130>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8081 	beq.w	8002560 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8002464:	68b8      	ldr	r0, [r7, #8]
 8002466:	f7fd febd 	bl	80001e4 <strlen>
 800246a:	4603      	mov	r3, r0
 800246c:	b299      	uxth	r1, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8002474:	461a      	mov	r2, r3
 8002476:	68b8      	ldr	r0, [r7, #8]
 8002478:	47a0      	blx	r4
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	dd6f      	ble.n	8002560 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800248c:	2100      	movs	r1, #0
 800248e:	6938      	ldr	r0, [r7, #16]
 8002490:	4798      	blx	r3
 8002492:	4603      	mov	r3, r0
 8002494:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b0d      	cmp	r3, #13
 800249c:	d104      	bne.n	80024a8 <AT_RequestReceiveData+0x78>
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	3301      	adds	r3, #1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b0a      	cmp	r3, #10
 80024a6:	d001      	beq.n	80024ac <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 80024a8:	2304      	movs	r3, #4
 80024aa:	e05a      	b.n	8002562 <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3b02      	subs	r3, #2
 80024b0:	617b      	str	r3, [r7, #20]
    p += 2;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	3302      	adds	r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b07      	cmp	r3, #7
 80024bc:	d94a      	bls.n	8002554 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 80024be:	e002      	b.n	80024c6 <AT_RequestReceiveData+0x96>
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <AT_RequestReceiveData+0xaa>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b15      	cmp	r3, #21
 80024d8:	d0f2      	beq.n	80024c0 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3b08      	subs	r3, #8
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	491f      	ldr	r1, [pc, #124]	@ (800256c <AT_RequestReceiveData+0x13c>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f007 fb08 	bl	8009b04 <strstr>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	3b08      	subs	r3, #8
 8002500:	b29a      	uxth	r2, r3
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002504:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	429a      	cmp	r2, r3
 800250e:	d202      	bcs.n	8002516 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8002510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f007 fb79 	bl	8009c16 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e01c      	b.n	8002562 <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3b04      	subs	r3, #4
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	2204      	movs	r2, #4
 8002532:	490f      	ldr	r1, [pc, #60]	@ (8002570 <AT_RequestReceiveData+0x140>)
 8002534:	4618      	mov	r0, r3
 8002536:	f007 fa4b 	bl	80099d0 <memcmp>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d104      	bne.n	800254a <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	2200      	movs	r2, #0
 8002544:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002546:	2305      	movs	r3, #5
 8002548:	e00b      	b.n	8002562 <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	2200      	movs	r2, #0
 800254e:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002550:	2305      	movs	r3, #5
 8002552:	e006      	b.n	8002562 <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f113 0f04 	cmn.w	r3, #4
 800255a:	d101      	bne.n	8002560 <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800255c:	2306      	movs	r3, #6
 800255e:	e000      	b.n	8002562 <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8002560:	2304      	movs	r3, #4
}
 8002562:	4618      	mov	r0, r3
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	bf00      	nop
 800256c:	0800b6e0 	.word	0x0800b6e0
 8002570:	0800b6f4 	.word	0x0800b6f4

08002574 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800257c:	2302      	movs	r3, #2
 800257e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002586:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01b      	beq.n	80025cc <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800259a:	2000      	movs	r0, #0
 800259c:	4798      	blx	r3
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d113      	bne.n	80025cc <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80025aa:	461a      	mov	r2, r3
 80025ac:	490a      	ldr	r1, [pc, #40]	@ (80025d8 <ES_WIFI_Init+0x64>)
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fece 	bl	8002350 <AT_ExecuteCommand>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80025c4:	4619      	mov	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fd76 	bl	80020b8 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	0800b6fc 	.word	0x0800b6fc

080025dc <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <ES_WIFI_RegisterBusIO+0x2c>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <ES_WIFI_RegisterBusIO+0x2c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <ES_WIFI_RegisterBusIO+0x2c>
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <ES_WIFI_RegisterBusIO+0x2c>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8002608:	2302      	movs	r3, #2
 800260a:	e014      	b.n	8002636 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
	...

08002644 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4932      	ldr	r1, [pc, #200]	@ (8002724 <ES_WIFI_Connect+0xe0>)
 800265c:	4618      	mov	r0, r3
 800265e:	f007 f893 	bl	8009788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800266e:	461a      	mov	r2, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fe6d 	bl	8002350 <AT_ExecuteCommand>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d14b      	bne.n	8002718 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4927      	ldr	r1, [pc, #156]	@ (8002728 <ES_WIFI_Connect+0xe4>)
 800268a:	4618      	mov	r0, r3
 800268c:	f007 f87c 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800269c:	461a      	mov	r2, r3
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fe56 	bl	8002350 <AT_ExecuteCommand>
 80026a4:	4603      	mov	r3, r0
 80026a6:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d134      	bne.n	8002718 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	491b      	ldr	r1, [pc, #108]	@ (800272c <ES_WIFI_Connect+0xe8>)
 80026c0:	4618      	mov	r0, r3
 80026c2:	f007 f861 	bl	8009788 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80026d2:	461a      	mov	r2, r3
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fe3b 	bl	8002350 <AT_ExecuteCommand>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d119      	bne.n	8002718 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80026ea:	4911      	ldr	r1, [pc, #68]	@ (8002730 <ES_WIFI_Connect+0xec>)
 80026ec:	4618      	mov	r0, r3
 80026ee:	f007 f84b 	bl	8009788 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80026fe:	461a      	mov	r2, r3
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fe25 	bl	8002350 <AT_ExecuteCommand>
 8002706:	4603      	mov	r3, r0
 8002708:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8002718:	7dfb      	ldrb	r3, [r7, #23]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	0800b714 	.word	0x0800b714
 8002728:	0800b71c 	.word	0x0800b71c
 800272c:	0800b724 	.word	0x0800b724
 8002730:	0800b72c 	.word	0x0800b72c

08002734 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002742:	4913      	ldr	r1, [pc, #76]	@ (8002790 <ES_WIFI_IsConnected+0x5c>)
 8002744:	4618      	mov	r0, r3
 8002746:	f007 f81f 	bl	8009788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002756:	461a      	mov	r2, r3
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fdf9 	bl	8002350 <AT_ExecuteCommand>
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800276e:	2b31      	cmp	r3, #49	@ 0x31
 8002770:	bf0c      	ite	eq
 8002772:	2301      	moveq	r3, #1
 8002774:	2300      	movne	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	0800b730 	.word	0x0800b730

08002794 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027a2:	4910      	ldr	r1, [pc, #64]	@ (80027e4 <ES_WIFI_GetNetworkSettings+0x50>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f006 ffef 	bl	8009788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027b6:	461a      	mov	r2, r3
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff fdc9 	bl	8002350 <AT_ExecuteCommand>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d108      	bne.n	80027da <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	338d      	adds	r3, #141	@ 0x8d
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f7ff fcfd 	bl	80021d4 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	0800b738 	.word	0x0800b738

080027e8 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	4613      	mov	r3, r2
 80027f4:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80027fc:	4913      	ldr	r1, [pc, #76]	@ (800284c <ES_WIFI_GetMACAddress+0x64>)
 80027fe:	4618      	mov	r0, r3
 8002800:	f006 ffc2 	bl	8009788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002810:	461a      	mov	r2, r3
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fd9c 	bl	8002350 <AT_ExecuteCommand>
 8002818:	4603      	mov	r3, r0
 800281a:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10e      	bne.n	8002840 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002828:	3302      	adds	r3, #2
 800282a:	4909      	ldr	r1, [pc, #36]	@ (8002850 <ES_WIFI_GetMACAddress+0x68>)
 800282c:	4618      	mov	r0, r3
 800282e:	f007 f90d 	bl	8009a4c <strtok>
 8002832:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	461a      	mov	r2, r3
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6938      	ldr	r0, [r7, #16]
 800283c:	f7ff fbce 	bl	8001fdc <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 8002840:	7dfb      	ldrb	r3, [r7, #23]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	0800b788 	.word	0x0800b788
 8002850:	0800b78c 	.word	0x0800b78c

08002854 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b087      	sub	sp, #28
 8002858:	af02      	add	r7, sp, #8
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <ES_WIFI_StartClientConnection+0x1e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d105      	bne.n	800287e <ES_WIFI_StartClientConnection+0x2a>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	885b      	ldrh	r3, [r3, #2]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <ES_WIFI_StartClientConnection+0x2a>
 800287a:	2302      	movs	r3, #2
 800287c:	e0c1      	b.n	8002a02 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	785b      	ldrb	r3, [r3, #1]
 8002888:	461a      	mov	r2, r3
 800288a:	4960      	ldr	r1, [pc, #384]	@ (8002a0c <ES_WIFI_StartClientConnection+0x1b8>)
 800288c:	f006 ff7c 	bl	8009788 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800289c:	461a      	mov	r2, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff fd56 	bl	8002350 <AT_ExecuteCommand>
 80028a4:	4603      	mov	r3, r0
 80028a6:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d114      	bne.n	80028d8 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4955      	ldr	r1, [pc, #340]	@ (8002a10 <ES_WIFI_StartClientConnection+0x1bc>)
 80028bc:	f006 ff64 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80028cc:	461a      	mov	r2, r3
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fd3e 	bl	8002350 <AT_ExecuteCommand>
 80028d4:	4603      	mov	r3, r0
 80028d6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d114      	bne.n	8002908 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	889b      	ldrh	r3, [r3, #4]
 80028e8:	461a      	mov	r2, r3
 80028ea:	494a      	ldr	r1, [pc, #296]	@ (8002a14 <ES_WIFI_StartClientConnection+0x1c0>)
 80028ec:	f006 ff4c 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80028fc:	461a      	mov	r2, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fd26 	bl	8002350 <AT_ExecuteCommand>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11c      	bne.n	8002948 <ES_WIFI_StartClientConnection+0xf4>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <ES_WIFI_StartClientConnection+0xca>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d114      	bne.n	8002948 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	885b      	ldrh	r3, [r3, #2]
 8002928:	461a      	mov	r2, r3
 800292a:	493b      	ldr	r1, [pc, #236]	@ (8002a18 <ES_WIFI_StartClientConnection+0x1c4>)
 800292c:	f006 ff2c 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800293c:	461a      	mov	r2, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fd06 	bl	8002350 <AT_ExecuteCommand>
 8002944:	4603      	mov	r3, r0
 8002946:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d128      	bne.n	80029a0 <ES_WIFI_StartClientConnection+0x14c>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <ES_WIFI_StartClientConnection+0x10a>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d120      	bne.n	80029a0 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	799b      	ldrb	r3, [r3, #6]
 8002968:	4619      	mov	r1, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	79db      	ldrb	r3, [r3, #7]
 800296e:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002974:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	9200      	str	r2, [sp, #0]
 800297e:	4623      	mov	r3, r4
 8002980:	460a      	mov	r2, r1
 8002982:	4926      	ldr	r1, [pc, #152]	@ (8002a1c <ES_WIFI_StartClientConnection+0x1c8>)
 8002984:	f006 ff00 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002994:	461a      	mov	r2, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fcda 	bl	8002350 <AT_ExecuteCommand>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d116      	bne.n	80029d4 <ES_WIFI_StartClientConnection+0x180>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d112      	bne.n	80029d4 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80029b4:	491a      	ldr	r1, [pc, #104]	@ (8002a20 <ES_WIFI_StartClientConnection+0x1cc>)
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 fee6 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80029c8:	461a      	mov	r2, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fcc0 	bl	8002350 <AT_ExecuteCommand>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d112      	bne.n	8002a00 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80029e0:	4910      	ldr	r1, [pc, #64]	@ (8002a24 <ES_WIFI_StartClientConnection+0x1d0>)
 80029e2:	4618      	mov	r0, r3
 80029e4:	f006 fed0 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80029f4:	461a      	mov	r2, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fcaa 	bl	8002350 <AT_ExecuteCommand>
 80029fc:	4603      	mov	r3, r0
 80029fe:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd90      	pop	{r4, r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	0800b7f0 	.word	0x0800b7f0
 8002a10:	0800b7f8 	.word	0x0800b7f8
 8002a14:	0800b800 	.word	0x0800b800
 8002a18:	0800b808 	.word	0x0800b808
 8002a1c:	0800b810 	.word	0x0800b810
 8002a20:	0800b820 	.word	0x0800b820
 8002a24:	0800b828 	.word	0x0800b828

08002a28 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	460b      	mov	r3, r1
 8002a36:	72fb      	strb	r3, [r7, #11]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002a46:	2301      	movs	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e001      	b.n	8002a50 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8002a56:	f200 808b 	bhi.w	8002b70 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a60:	7afa      	ldrb	r2, [r7, #11]
 8002a62:	4946      	ldr	r1, [pc, #280]	@ (8002b7c <ES_WIFI_ReceiveData+0x154>)
 8002a64:	4618      	mov	r0, r3
 8002a66:	f006 fe8f 	bl	8009788 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a76:	461a      	mov	r2, r3
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fc69 	bl	8002350 <AT_ExecuteCommand>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d165      	bne.n	8002b54 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002a8e:	893a      	ldrh	r2, [r7, #8]
 8002a90:	493b      	ldr	r1, [pc, #236]	@ (8002b80 <ES_WIFI_ReceiveData+0x158>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	f006 fe78 	bl	8009788 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff fc52 	bl	8002350 <AT_ExecuteCommand>
 8002aac:	4603      	mov	r3, r0
 8002aae:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d141      	bne.n	8002b3a <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4931      	ldr	r1, [pc, #196]	@ (8002b84 <ES_WIFI_ReceiveData+0x15c>)
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 fe61 	bl	8009788 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff fc3b 	bl	8002350 <AT_ExecuteCommand>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d120      	bne.n	8002b26 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002aea:	4927      	ldr	r1, [pc, #156]	@ (8002b88 <ES_WIFI_ReceiveData+0x160>)
 8002aec:	4618      	mov	r0, r3
 8002aee:	f006 fe4b 	bl	8009788 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002af8:	893a      	ldrh	r2, [r7, #8]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	4613      	mov	r3, r2
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff fc94 	bl	8002430 <AT_RequestReceiveData>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02e      	beq.n	8002b70 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8002b12:	f640 12aa 	movw	r2, #2474	@ 0x9aa
 8002b16:	491d      	ldr	r1, [pc, #116]	@ (8002b8c <ES_WIFI_ReceiveData+0x164>)
 8002b18:	481d      	ldr	r0, [pc, #116]	@ (8002b90 <ES_WIFI_ReceiveData+0x168>)
 8002b1a:	f006 fdc5 	bl	80096a8 <iprintf>
 8002b1e:	481d      	ldr	r0, [pc, #116]	@ (8002b94 <ES_WIFI_ReceiveData+0x16c>)
 8002b20:	f006 fe2a 	bl	8009778 <puts>
 8002b24:	e024      	b.n	8002b70 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8002b26:	f640 12af 	movw	r2, #2479	@ 0x9af
 8002b2a:	4918      	ldr	r1, [pc, #96]	@ (8002b8c <ES_WIFI_ReceiveData+0x164>)
 8002b2c:	4818      	ldr	r0, [pc, #96]	@ (8002b90 <ES_WIFI_ReceiveData+0x168>)
 8002b2e:	f006 fdbb 	bl	80096a8 <iprintf>
 8002b32:	4819      	ldr	r0, [pc, #100]	@ (8002b98 <ES_WIFI_ReceiveData+0x170>)
 8002b34:	f006 fe20 	bl	8009778 <puts>
 8002b38:	e01a      	b.n	8002b70 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8002b3a:	f640 12b4 	movw	r2, #2484	@ 0x9b4
 8002b3e:	4913      	ldr	r1, [pc, #76]	@ (8002b8c <ES_WIFI_ReceiveData+0x164>)
 8002b40:	4813      	ldr	r0, [pc, #76]	@ (8002b90 <ES_WIFI_ReceiveData+0x168>)
 8002b42:	f006 fdb1 	bl	80096a8 <iprintf>
 8002b46:	4815      	ldr	r0, [pc, #84]	@ (8002b9c <ES_WIFI_ReceiveData+0x174>)
 8002b48:	f006 fe16 	bl	8009778 <puts>
        *Receivedlen = 0;
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e00d      	b.n	8002b70 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8002b54:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8002b58:	490c      	ldr	r1, [pc, #48]	@ (8002b8c <ES_WIFI_ReceiveData+0x164>)
 8002b5a:	480d      	ldr	r0, [pc, #52]	@ (8002b90 <ES_WIFI_ReceiveData+0x168>)
 8002b5c:	f006 fda4 	bl	80096a8 <iprintf>
 8002b60:	480f      	ldr	r0, [pc, #60]	@ (8002ba0 <ES_WIFI_ReceiveData+0x178>)
 8002b62:	f006 fe09 	bl	8009778 <puts>
      issue15++;
 8002b66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba4 <ES_WIFI_ReceiveData+0x17c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba4 <ES_WIFI_ReceiveData+0x17c>)
 8002b6e:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	0800b7f0 	.word	0x0800b7f0
 8002b80:	0800ba30 	.word	0x0800ba30
 8002b84:	0800ba38 	.word	0x0800ba38
 8002b88:	0800ba40 	.word	0x0800ba40
 8002b8c:	0800b880 	.word	0x0800b880
 8002b90:	0800b898 	.word	0x0800b898
 8002b94:	0800ba44 	.word	0x0800ba44
 8002b98:	0800ba64 	.word	0x0800ba64
 8002b9c:	0800ba7c 	.word	0x0800ba7c
 8002ba0:	0800ba9c 	.word	0x0800ba9c
 8002ba4:	20000abc 	.word	0x20000abc

08002ba8 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	@ 0x30
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002bb0:	4b57      	ldr	r3, [pc, #348]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	4a56      	ldr	r2, [pc, #344]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bbc:	4b54      	ldr	r3, [pc, #336]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc8:	4b51      	ldr	r3, [pc, #324]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bcc:	4a50      	ldr	r2, [pc, #320]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be4:	4a4a      	ldr	r2, [pc, #296]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002be6:	f043 0304 	orr.w	r3, r3, #4
 8002bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bec:	4b48      	ldr	r3, [pc, #288]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf8:	4b45      	ldr	r3, [pc, #276]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfc:	4a44      	ldr	r2, [pc, #272]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002bfe:	f043 0310 	orr.w	r3, r3, #16
 8002c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c04:	4b42      	ldr	r3, [pc, #264]	@ (8002d10 <SPI_WIFI_MspInit+0x168>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002c10:	2200      	movs	r2, #0
 8002c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c16:	483f      	ldr	r0, [pc, #252]	@ (8002d14 <SPI_WIFI_MspInit+0x16c>)
 8002c18:	f001 fa02 	bl	8004020 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002c1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c20:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c22:	2301      	movs	r3, #1
 8002c24:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	4619      	mov	r1, r3
 8002c34:	4837      	ldr	r0, [pc, #220]	@ (8002d14 <SPI_WIFI_MspInit+0x16c>)
 8002c36:	f000 ff3d 	bl	8003ab4 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8002c3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c42:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4831      	ldr	r0, [pc, #196]	@ (8002d18 <SPI_WIFI_MspInit+0x170>)
 8002c54:	f000 ff2e 	bl	8003ab4 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c5c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	4619      	mov	r1, r3
 8002c74:	4828      	ldr	r0, [pc, #160]	@ (8002d18 <SPI_WIFI_MspInit+0x170>)
 8002c76:	f000 ff1d 	bl	8003ab4 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	4826      	ldr	r0, [pc, #152]	@ (8002d18 <SPI_WIFI_MspInit+0x170>)
 8002c80:	f001 f9ce 	bl	8004020 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002c84:	2301      	movs	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002c90:	2301      	movs	r3, #1
 8002c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	481f      	ldr	r0, [pc, #124]	@ (8002d18 <SPI_WIFI_MspInit+0x170>)
 8002c9c:	f000 ff0a 	bl	8003ab4 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002cb6:	f107 031c 	add.w	r3, r7, #28
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4817      	ldr	r0, [pc, #92]	@ (8002d1c <SPI_WIFI_MspInit+0x174>)
 8002cbe:	f000 fef9 	bl	8003ab4 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cc6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002cd4:	2306      	movs	r3, #6
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480f      	ldr	r0, [pc, #60]	@ (8002d1c <SPI_WIFI_MspInit+0x174>)
 8002ce0:	f000 fee8 	bl	8003ab4 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002ce4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ce8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002cfa:	f107 031c 	add.w	r3, r7, #28
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4806      	ldr	r0, [pc, #24]	@ (8002d1c <SPI_WIFI_MspInit+0x174>)
 8002d02:	f000 fed7 	bl	8003ab4 <HAL_GPIO_Init>
}
 8002d06:	bf00      	nop
 8002d08:	3730      	adds	r7, #48	@ 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	48000400 	.word	0x48000400
 8002d18:	48001000 	.word	0x48001000
 8002d1c:	48000800 	.word	0x48000800

08002d20 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d145      	bne.n	8002dc0 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <SPI_WIFI_Init+0xb8>)
 8002d38:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002d3a:	4826      	ldr	r0, [pc, #152]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d3c:	f7ff ff34 	bl	8002ba8 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002d40:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d42:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d46:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002d48:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d50:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002d54:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002d56:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d68:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d6c:	2210      	movs	r2, #16
 8002d6e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002d70:	4b18      	ldr	r3, [pc, #96]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002d76:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8002d7c:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002d82:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002d88:	4812      	ldr	r0, [pc, #72]	@ (8002dd4 <SPI_WIFI_Init+0xb4>)
 8002d8a:	f002 ffeb 	bl	8005d64 <HAL_SPI_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	e018      	b.n	8002dcc <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2007      	movs	r0, #7
 8002da0:	f000 fd03 	bl	80037aa <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002da4:	2007      	movs	r0, #7
 8002da6:	f000 fd1c 	bl	80037e2 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2033      	movs	r0, #51	@ 0x33
 8002db0:	f000 fcfb 	bl	80037aa <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002db4:	2033      	movs	r0, #51	@ 0x33
 8002db6:	f000 fd14 	bl	80037e2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002dba:	200a      	movs	r0, #10
 8002dbc:	f000 fa08 	bl	80031d0 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002dc0:	f000 f80c 	bl	8002ddc <SPI_WIFI_ResetModule>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000ac0 	.word	0x20000ac0
 8002dd8:	40003c00 	.word	0x40003c00

08002ddc <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002de2:	f000 fbd7 	bl	8003594 <HAL_GetTick>
 8002de6:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002dec:	2200      	movs	r2, #0
 8002dee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002df2:	4835      	ldr	r0, [pc, #212]	@ (8002ec8 <SPI_WIFI_ResetModule+0xec>)
 8002df4:	f001 f914 	bl	8004020 <HAL_GPIO_WritePin>
 8002df8:	200a      	movs	r0, #10
 8002dfa:	f000 fbd7 	bl	80035ac <HAL_Delay>
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e04:	4830      	ldr	r0, [pc, #192]	@ (8002ec8 <SPI_WIFI_ResetModule+0xec>)
 8002e06:	f001 f90b 	bl	8004020 <HAL_GPIO_WritePin>
 8002e0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e0e:	f000 fbcd 	bl	80035ac <HAL_Delay>
  WIFI_ENABLE_NSS();
 8002e12:	2200      	movs	r2, #0
 8002e14:	2101      	movs	r1, #1
 8002e16:	482c      	ldr	r0, [pc, #176]	@ (8002ec8 <SPI_WIFI_ResetModule+0xec>)
 8002e18:	f001 f902 	bl	8004020 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002e1c:	200f      	movs	r0, #15
 8002e1e:	f000 f9d7 	bl	80031d0 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8002e22:	e02b      	b.n	8002e7c <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d907      	bls.n	8002e3a <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4826      	ldr	r0, [pc, #152]	@ (8002ec8 <SPI_WIFI_ResetModule+0xec>)
 8002e30:	f001 f8f6 	bl	8004020 <HAL_GPIO_WritePin>
      return -1;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
 8002e38:	e042      	b.n	8002ec0 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	463a      	mov	r2, r7
 8002e3e:	18d1      	adds	r1, r2, r3
 8002e40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e44:	2201      	movs	r2, #1
 8002e46:	4821      	ldr	r0, [pc, #132]	@ (8002ecc <SPI_WIFI_ResetModule+0xf0>)
 8002e48:	f003 f857 	bl	8005efa <HAL_SPI_Receive>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3302      	adds	r3, #2
 8002e54:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8002e56:	f000 fb9d 	bl	8003594 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e64:	d202      	bcs.n	8002e6c <SPI_WIFI_ResetModule+0x90>
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4815      	ldr	r0, [pc, #84]	@ (8002ec8 <SPI_WIFI_ResetModule+0xec>)
 8002e72:	f001 f8d5 	bl	8004020 <HAL_GPIO_WritePin>
      return -1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e021      	b.n	8002ec0 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	4812      	ldr	r0, [pc, #72]	@ (8002ec8 <SPI_WIFI_ResetModule+0xec>)
 8002e80:	f001 f8b6 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d0cc      	beq.n	8002e24 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	480e      	ldr	r0, [pc, #56]	@ (8002ec8 <SPI_WIFI_ResetModule+0xec>)
 8002e90:	f001 f8c6 	bl	8004020 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002e94:	783b      	ldrb	r3, [r7, #0]
 8002e96:	2b15      	cmp	r3, #21
 8002e98:	d10e      	bne.n	8002eb8 <SPI_WIFI_ResetModule+0xdc>
 8002e9a:	787b      	ldrb	r3, [r7, #1]
 8002e9c:	2b15      	cmp	r3, #21
 8002e9e:	d10b      	bne.n	8002eb8 <SPI_WIFI_ResetModule+0xdc>
 8002ea0:	78bb      	ldrb	r3, [r7, #2]
 8002ea2:	2b0d      	cmp	r3, #13
 8002ea4:	d108      	bne.n	8002eb8 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002ea8:	2b0a      	cmp	r3, #10
 8002eaa:	d105      	bne.n	8002eb8 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002eac:	793b      	ldrb	r3, [r7, #4]
 8002eae:	2b3e      	cmp	r3, #62	@ 0x3e
 8002eb0:	d102      	bne.n	8002eb8 <SPI_WIFI_ResetModule+0xdc>
 8002eb2:	797b      	ldrb	r3, [r7, #5]
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d002      	beq.n	8002ebe <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	e000      	b.n	8002ec0 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	48001000 	.word	0x48001000
 8002ecc:	20000ac0 	.word	0x20000ac0

08002ed0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002ed4:	4802      	ldr	r0, [pc, #8]	@ (8002ee0 <SPI_WIFI_DeInit+0x10>)
 8002ed6:	f002 ffe8 	bl	8005eaa <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000ac0 	.word	0x20000ac0

08002ee4 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002eec:	f000 fb52 	bl	8003594 <HAL_GetTick>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002ef4:	e00a      	b.n	8002f0c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002ef6:	f000 fb4d 	bl	8003594 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d902      	bls.n	8002f0c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	e007      	b.n	8002f1c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	4805      	ldr	r0, [pc, #20]	@ (8002f24 <wait_cmddata_rdy_high+0x40>)
 8002f10:	f001 f86e 	bl	8003ff0 <HAL_GPIO_ReadPin>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d1ed      	bne.n	8002ef6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	48001000 	.word	0x48001000

08002f28 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002f30:	f000 fb30 	bl	8003594 <HAL_GetTick>
 8002f34:	4603      	mov	r3, r0
 8002f36:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8002f38:	e00a      	b.n	8002f50 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002f3a:	f000 fb2b 	bl	8003594 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1ad2      	subs	r2, r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d902      	bls.n	8002f50 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4e:	e004      	b.n	8002f5a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8002f50:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <wait_cmddata_rdy_rising_event+0x3c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d0f0      	beq.n	8002f3a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002f58:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000b2c 	.word	0x20000b2c

08002f68 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002f70:	f000 fb10 	bl	8003594 <HAL_GetTick>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8002f78:	e00a      	b.n	8002f90 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002f7a:	f000 fb0b 	bl	8003594 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d902      	bls.n	8002f90 <wait_spi_rx_event+0x28>
    {
      return -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	e004      	b.n	8002f9a <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8002f90:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <wait_spi_rx_event+0x3c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d0f0      	beq.n	8002f7a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002f98:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000b24 	.word	0x20000b24

08002fa8 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002fb0:	f000 faf0 	bl	8003594 <HAL_GetTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 8002fb8:	e00a      	b.n	8002fd0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002fba:	f000 faeb 	bl	8003594 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d902      	bls.n	8002fd0 <wait_spi_tx_event+0x28>
    {
      return -1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e004      	b.n	8002fda <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002fd0:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <wait_spi_tx_event+0x3c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d0f0      	beq.n	8002fba <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002fd8:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000b28 	.word	0x20000b28

08002fe8 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	4834      	ldr	r0, [pc, #208]	@ (80030d0 <SPI_WIFI_ReceiveData+0xe8>)
 8003000:	f001 f80e 	bl	8004020 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8003004:	2003      	movs	r0, #3
 8003006:	f000 f8e3 	bl	80031d0 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff8b 	bl	8002f28 <wait_cmddata_rdy_rising_event>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	da02      	bge.n	800301e <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8003018:	f06f 0302 	mvn.w	r3, #2
 800301c:	e054      	b.n	80030c8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800301e:	2200      	movs	r2, #0
 8003020:	2101      	movs	r1, #1
 8003022:	482b      	ldr	r0, [pc, #172]	@ (80030d0 <SPI_WIFI_ReceiveData+0xe8>)
 8003024:	f000 fffc 	bl	8004020 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8003028:	200f      	movs	r0, #15
 800302a:	f000 f8d1 	bl	80031d0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800302e:	e03d      	b.n	80030ac <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8003030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003034:	897b      	ldrh	r3, [r7, #10]
 8003036:	429a      	cmp	r2, r3
 8003038:	db02      	blt.n	8003040 <SPI_WIFI_ReceiveData+0x58>
 800303a:	897b      	ldrh	r3, [r7, #10]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d13c      	bne.n	80030ba <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8003040:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <SPI_WIFI_ReceiveData+0xec>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	2201      	movs	r2, #1
 800304c:	4619      	mov	r1, r3
 800304e:	4822      	ldr	r0, [pc, #136]	@ (80030d8 <SPI_WIFI_ReceiveData+0xf0>)
 8003050:	f003 fb32 	bl	80066b8 <HAL_SPI_Receive_IT>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800305a:	2201      	movs	r2, #1
 800305c:	2101      	movs	r1, #1
 800305e:	481c      	ldr	r0, [pc, #112]	@ (80030d0 <SPI_WIFI_ReceiveData+0xe8>)
 8003060:	f000 ffde 	bl	8004020 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	e02e      	b.n	80030c8 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff7b 	bl	8002f68 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8003072:	7d3a      	ldrb	r2, [r7, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	7d7a      	ldrb	r2, [r7, #21]
 800307e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8003080:	8afb      	ldrh	r3, [r7, #22]
 8003082:	3302      	adds	r3, #2
 8003084:	b29b      	uxth	r3, r3
 8003086:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3302      	adds	r3, #2
 800308c:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 800308e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003092:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003096:	db09      	blt.n	80030ac <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8003098:	2201      	movs	r2, #1
 800309a:	2101      	movs	r1, #1
 800309c:	480c      	ldr	r0, [pc, #48]	@ (80030d0 <SPI_WIFI_ReceiveData+0xe8>)
 800309e:	f000 ffbf 	bl	8004020 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80030a2:	f7ff fe9b 	bl	8002ddc <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80030a6:	f06f 0303 	mvn.w	r3, #3
 80030aa:	e00d      	b.n	80030c8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80030ac:	2102      	movs	r1, #2
 80030ae:	4808      	ldr	r0, [pc, #32]	@ (80030d0 <SPI_WIFI_ReceiveData+0xe8>)
 80030b0:	f000 ff9e 	bl	8003ff0 <HAL_GPIO_ReadPin>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d0ba      	beq.n	8003030 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80030ba:	2201      	movs	r2, #1
 80030bc:	2101      	movs	r1, #1
 80030be:	4804      	ldr	r0, [pc, #16]	@ (80030d0 <SPI_WIFI_ReceiveData+0xe8>)
 80030c0:	f000 ffae 	bl	8004020 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80030c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	48001000 	.word	0x48001000
 80030d4:	20000b24 	.word	0x20000b24
 80030d8:	20000ac0 	.word	0x20000ac0

080030dc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	460b      	mov	r3, r1
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fef9 	bl	8002ee4 <wait_cmddata_rdy_high>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da02      	bge.n	80030fe <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80030f8:	f04f 33ff 	mov.w	r3, #4294967295
 80030fc:	e04f      	b.n	800319e <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 80030fe:	4b2a      	ldr	r3, [pc, #168]	@ (80031a8 <SPI_WIFI_SendData+0xcc>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8003104:	2200      	movs	r2, #0
 8003106:	2101      	movs	r1, #1
 8003108:	4828      	ldr	r0, [pc, #160]	@ (80031ac <SPI_WIFI_SendData+0xd0>)
 800310a:	f000 ff89 	bl	8004020 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800310e:	200f      	movs	r0, #15
 8003110:	f000 f85e 	bl	80031d0 <SPI_WIFI_DelayUs>
  if (len > 1)
 8003114:	897b      	ldrh	r3, [r7, #10]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d919      	bls.n	800314e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800311a:	4b25      	ldr	r3, [pc, #148]	@ (80031b0 <SPI_WIFI_SendData+0xd4>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	4822      	ldr	r0, [pc, #136]	@ (80031b4 <SPI_WIFI_SendData+0xd8>)
 800312c:	f003 fa3c 	bl	80065a8 <HAL_SPI_Transmit_IT>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8003136:	2201      	movs	r2, #1
 8003138:	2101      	movs	r1, #1
 800313a:	481c      	ldr	r0, [pc, #112]	@ (80031ac <SPI_WIFI_SendData+0xd0>)
 800313c:	f000 ff70 	bl	8004020 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	e02b      	b.n	800319e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff2d 	bl	8002fa8 <wait_spi_tx_event>
  }

  if (len & 1)
 800314e:	897b      	ldrh	r3, [r7, #10]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	3b01      	subs	r3, #1
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8003164:	230a      	movs	r3, #10
 8003166:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8003168:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <SPI_WIFI_SendData+0xd4>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	480f      	ldr	r0, [pc, #60]	@ (80031b4 <SPI_WIFI_SendData+0xd8>)
 8003178:	f003 fa16 	bl	80065a8 <HAL_SPI_Transmit_IT>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8003182:	2201      	movs	r2, #1
 8003184:	2101      	movs	r1, #1
 8003186:	4809      	ldr	r0, [pc, #36]	@ (80031ac <SPI_WIFI_SendData+0xd0>)
 8003188:	f000 ff4a 	bl	8004020 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
 8003190:	e005      	b.n	800319e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff07 	bl	8002fa8 <wait_spi_tx_event>
  }
  return len;
 800319a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000b2c 	.word	0x20000b2c
 80031ac:	48001000 	.word	0x48001000
 80031b0:	20000b28 	.word	0x20000b28
 80031b4:	20000ac0 	.word	0x20000ac0

080031b8 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f9f3 	bl	80035ac <HAL_Delay>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <SPI_WIFI_DelayUs+0x94>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d122      	bne.n	800322e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80031e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003268 <SPI_WIFI_DelayUs+0x98>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1f      	ldr	r2, [pc, #124]	@ (800326c <SPI_WIFI_DelayUs+0x9c>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80031fe:	f000 f9c9 	bl	8003594 <HAL_GetTick>
 8003202:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8003204:	e002      	b.n	800320c <SPI_WIFI_DelayUs+0x3c>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8003212:	f000 f9bf 	bl	8003594 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a11      	ldr	r2, [pc, #68]	@ (8003264 <SPI_WIFI_DelayUs+0x94>)
 800321e:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8003220:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <SPI_WIFI_DelayUs+0x94>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <SPI_WIFI_DelayUs+0x5e>
 8003228:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <SPI_WIFI_DelayUs+0x94>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800322e:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <SPI_WIFI_DelayUs+0x98>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a0f      	ldr	r2, [pc, #60]	@ (8003270 <SPI_WIFI_DelayUs+0xa0>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	0c9a      	lsrs	r2, r3, #18
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <SPI_WIFI_DelayUs+0x94>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800324e:	e002      	b.n	8003256 <SPI_WIFI_DelayUs+0x86>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	3b01      	subs	r3, #1
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f9      	bne.n	8003250 <SPI_WIFI_DelayUs+0x80>
  return;
 800325c:	bf00      	nop
}
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000b30 	.word	0x20000b30
 8003268:	20000004 	.word	0x20000004
 800326c:	10624dd3 	.word	0x10624dd3
 8003270:	431bde83 	.word	0x431bde83

08003274 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_SPI_RxCpltCallback+0x24>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <HAL_SPI_RxCpltCallback+0x24>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000b24 	.word	0x20000b24

0800329c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_SPI_TxCpltCallback+0x24>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80032ac:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <HAL_SPI_TxCpltCallback+0x24>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
  }
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000b28 	.word	0x20000b28

080032c4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <SPI_WIFI_ISR+0x1c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80032d0:	4b03      	ldr	r3, [pc, #12]	@ (80032e0 <SPI_WIFI_ISR+0x1c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
   }
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	20000b2c 	.word	0x20000b2c

080032e4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <WIFI_Init+0x40>)
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <WIFI_Init+0x44>)
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <WIFI_Init+0x48>)
 80032f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <WIFI_Init+0x4c>)
 80032fa:	490e      	ldr	r1, [pc, #56]	@ (8003334 <WIFI_Init+0x50>)
 80032fc:	480e      	ldr	r0, [pc, #56]	@ (8003338 <WIFI_Init+0x54>)
 80032fe:	f7ff f96d 	bl	80025dc <ES_WIFI_RegisterBusIO>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003308:	480b      	ldr	r0, [pc, #44]	@ (8003338 <WIFI_Init+0x54>)
 800330a:	f7ff f933 	bl	8002574 <ES_WIFI_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003318:	79fb      	ldrb	r3, [r7, #7]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	08002fe9 	.word	0x08002fe9
 8003328:	080030dd 	.word	0x080030dd
 800332c:	080031b9 	.word	0x080031b9
 8003330:	08002ed1 	.word	0x08002ed1
 8003334:	08002d21 	.word	0x08002d21
 8003338:	20000b34 	.word	0x20000b34

0800333c <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	4809      	ldr	r0, [pc, #36]	@ (800337c <WIFI_Connect+0x40>)
 8003356:	f7ff f975 	bl	8002644 <ES_WIFI_Connect>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003360:	4806      	ldr	r0, [pc, #24]	@ (800337c <WIFI_Connect+0x40>)
 8003362:	f7ff fa17 	bl	8002794 <ES_WIFI_GetNetworkSettings>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003370:	7dfb      	ldrb	r3, [r7, #23]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000b34 	.word	0x20000b34

08003380 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <WIFI_GetMAC_Address+0x32>
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	461a      	mov	r2, r3
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4806      	ldr	r0, [pc, #24]	@ (80033bc <WIFI_GetMAC_Address+0x3c>)
 80033a4:	f7ff fa20 	bl	80027e8 <ES_WIFI_GetMACAddress>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000b34 	.word	0x20000b34

080033c0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <WIFI_GetIP_Address+0x38>
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d90d      	bls.n	80033f8 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80033dc:	4809      	ldr	r0, [pc, #36]	@ (8003404 <WIFI_GetIP_Address+0x44>)
 80033de:	f7ff f9a9 	bl	8002734 <ES_WIFI_IsConnected>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d107      	bne.n	80033f8 <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80033e8:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <WIFI_GetIP_Address+0x44>)
 80033ea:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000b34 	.word	0x20000b34

08003408 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8003424:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003426:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8003428:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800342a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800342c:	7afb      	ldrb	r3, [r7, #11]
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	3302      	adds	r3, #2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	3303      	adds	r3, #3
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003458:	f107 0310 	add.w	r3, r7, #16
 800345c:	4619      	mov	r1, r3
 800345e:	4807      	ldr	r0, [pc, #28]	@ (800347c <WIFI_OpenClientConnection+0x74>)
 8003460:	f7ff f9f8 	bl	8002854 <ES_WIFI_StartClientConnection>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8003470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003474:	4618      	mov	r0, r3
 8003476:	3728      	adds	r7, #40	@ 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000b34 	.word	0x20000b34

08003480 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	b2d9      	uxtb	r1, r3
 8003498:	88fa      	ldrh	r2, [r7, #6]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	4806      	ldr	r0, [pc, #24]	@ (80034c0 <WIFI_ReceiveData+0x40>)
 80034a8:	f7ff fabe 	bl	8002a28 <ES_WIFI_ReceiveData>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000b34 	.word	0x20000b34

080034c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ce:	2003      	movs	r0, #3
 80034d0:	f000 f960 	bl	8003794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034d4:	200f      	movs	r0, #15
 80034d6:	f000 f80d 	bl	80034f4 <HAL_InitTick>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	71fb      	strb	r3, [r7, #7]
 80034e4:	e001      	b.n	80034ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034e6:	f7fd ffc7 	bl	8001478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034ea:	79fb      	ldrb	r3, [r7, #7]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003500:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <HAL_InitTick+0x6c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d023      	beq.n	8003550 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003508:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <HAL_InitTick+0x70>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <HAL_InitTick+0x6c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003516:	fbb3 f3f1 	udiv	r3, r3, r1
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f96d 	bl	80037fe <HAL_SYSTICK_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d809      	bhi.n	8003544 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003530:	2200      	movs	r2, #0
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	f000 f937 	bl	80037aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800353c:	4a0a      	ldr	r2, [pc, #40]	@ (8003568 <HAL_InitTick+0x74>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e007      	b.n	8003554 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e004      	b.n	8003554 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	e001      	b.n	8003554 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	2000000c 	.word	0x2000000c
 8003564:	20000004 	.word	0x20000004
 8003568:	20000008 	.word	0x20000008

0800356c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_IncTick+0x20>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_IncTick+0x24>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4413      	add	r3, r2
 800357c:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <HAL_IncTick+0x24>)
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	2000000c 	.word	0x2000000c
 8003590:	20001434 	.word	0x20001434

08003594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return uwTick;
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <HAL_GetTick+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20001434 	.word	0x20001434

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff ffee 	bl	8003594 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d005      	beq.n	80035d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_Delay+0x44>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035d2:	bf00      	nop
 80035d4:	f7ff ffde 	bl	8003594 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f7      	bhi.n	80035d4 <HAL_Delay+0x28>
  {
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	2000000c 	.word	0x2000000c

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	@ (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	@ (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4907      	ldr	r1, [pc, #28]	@ (8003690 <__NVIC_EnableIRQ+0x38>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db0a      	blt.n	80036be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	490c      	ldr	r1, [pc, #48]	@ (80036e0 <__NVIC_SetPriority+0x4c>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	440b      	add	r3, r1
 80036b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036bc:	e00a      	b.n	80036d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4908      	ldr	r1, [pc, #32]	@ (80036e4 <__NVIC_SetPriority+0x50>)
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3b04      	subs	r3, #4
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	440b      	add	r3, r1
 80036d2:	761a      	strb	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	@ 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f1c3 0307 	rsb	r3, r3, #7
 8003702:	2b04      	cmp	r3, #4
 8003704:	bf28      	it	cs
 8003706:	2304      	movcs	r3, #4
 8003708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3304      	adds	r3, #4
 800370e:	2b06      	cmp	r3, #6
 8003710:	d902      	bls.n	8003718 <NVIC_EncodePriority+0x30>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3b03      	subs	r3, #3
 8003716:	e000      	b.n	800371a <NVIC_EncodePriority+0x32>
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	401a      	ands	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003730:	f04f 31ff 	mov.w	r1, #4294967295
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43d9      	mvns	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	4313      	orrs	r3, r2
         );
}
 8003742:	4618      	mov	r0, r3
 8003744:	3724      	adds	r7, #36	@ 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003760:	d301      	bcc.n	8003766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003762:	2301      	movs	r3, #1
 8003764:	e00f      	b.n	8003786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <SysTick_Config+0x40>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800376e:	210f      	movs	r1, #15
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	f7ff ff8e 	bl	8003694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <SysTick_Config+0x40>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800377e:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <SysTick_Config+0x40>)
 8003780:	2207      	movs	r2, #7
 8003782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	e000e010 	.word	0xe000e010

08003794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff29 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037bc:	f7ff ff3e 	bl	800363c <__NVIC_GetPriorityGrouping>
 80037c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7ff ff8e 	bl	80036e8 <NVIC_EncodePriority>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff5d 	bl	8003694 <__NVIC_SetPriority>
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4603      	mov	r3, r0
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff31 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffa2 	bl	8003750 <SysTick_Config>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0ac      	b.n	8003984 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f8b2 	bl	8003998 <DFSDM_GetChannelFromInstance>
 8003834:	4603      	mov	r3, r0
 8003836:	4a55      	ldr	r2, [pc, #340]	@ (800398c <HAL_DFSDM_ChannelInit+0x174>)
 8003838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e09f      	b.n	8003984 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd fe3b 	bl	80014c0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800384a:	4b51      	ldr	r3, [pc, #324]	@ (8003990 <HAL_DFSDM_ChannelInit+0x178>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	4a4f      	ldr	r2, [pc, #316]	@ (8003990 <HAL_DFSDM_ChannelInit+0x178>)
 8003852:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003854:	4b4e      	ldr	r3, [pc, #312]	@ (8003990 <HAL_DFSDM_ChannelInit+0x178>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d125      	bne.n	80038a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800385c:	4b4d      	ldr	r3, [pc, #308]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a4c      	ldr	r2, [pc, #304]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 8003862:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003866:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003868:	4b4a      	ldr	r3, [pc, #296]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4948      	ldr	r1, [pc, #288]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003876:	4b47      	ldr	r3, [pc, #284]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a46      	ldr	r2, [pc, #280]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 800387c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003880:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	791b      	ldrb	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800388a:	4b42      	ldr	r3, [pc, #264]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	3b01      	subs	r3, #1
 8003894:	041b      	lsls	r3, r3, #16
 8003896:	493f      	ldr	r1, [pc, #252]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800389c:	4b3d      	ldr	r3, [pc, #244]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003994 <HAL_DFSDM_ChannelInit+0x17c>)
 80038a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80038b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80038cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 020f 	bic.w	r2, r2, #15
 80038e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800390c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 0207 	and.w	r2, r2, #7
 8003938:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003964:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f810 	bl	8003998 <DFSDM_GetChannelFromInstance>
 8003978:	4602      	mov	r2, r0
 800397a:	4904      	ldr	r1, [pc, #16]	@ (800398c <HAL_DFSDM_ChannelInit+0x174>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	2000143c 	.word	0x2000143c
 8003990:	20001438 	.word	0x20001438
 8003994:	40016000 	.word	0x40016000

08003998 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a14 <DFSDM_GetChannelFromInstance+0x7c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d102      	bne.n	80039ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e02b      	b.n	8003a06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a19      	ldr	r2, [pc, #100]	@ (8003a18 <DFSDM_GetChannelFromInstance+0x80>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d102      	bne.n	80039bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e024      	b.n	8003a06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a17      	ldr	r2, [pc, #92]	@ (8003a1c <DFSDM_GetChannelFromInstance+0x84>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d102      	bne.n	80039ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80039c4:	2302      	movs	r3, #2
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e01d      	b.n	8003a06 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <DFSDM_GetChannelFromInstance+0x88>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d102      	bne.n	80039d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80039d2:	2304      	movs	r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e016      	b.n	8003a06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a12      	ldr	r2, [pc, #72]	@ (8003a24 <DFSDM_GetChannelFromInstance+0x8c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d102      	bne.n	80039e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80039e0:	2305      	movs	r3, #5
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e00f      	b.n	8003a06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a28 <DFSDM_GetChannelFromInstance+0x90>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d102      	bne.n	80039f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80039ee:	2306      	movs	r3, #6
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e008      	b.n	8003a06 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0d      	ldr	r2, [pc, #52]	@ (8003a2c <DFSDM_GetChannelFromInstance+0x94>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d102      	bne.n	8003a02 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80039fc:	2307      	movs	r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e001      	b.n	8003a06 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003a02:	2303      	movs	r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40016000 	.word	0x40016000
 8003a18:	40016020 	.word	0x40016020
 8003a1c:	40016040 	.word	0x40016040
 8003a20:	40016080 	.word	0x40016080
 8003a24:	400160a0 	.word	0x400160a0
 8003a28:	400160c0 	.word	0x400160c0
 8003a2c:	400160e0 	.word	0x400160e0

08003a30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d005      	beq.n	8003a54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	e029      	b.n	8003aa8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 020e 	bic.w	r2, r2, #14
 8003a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a78:	f003 021c 	and.w	r2, r3, #28
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	2101      	movs	r1, #1
 8003a82:	fa01 f202 	lsl.w	r2, r1, r2
 8003a86:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
    }
  }
  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac2:	e17f      	b.n	8003dc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8171 	beq.w	8003dbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d005      	beq.n	8003af4 <HAL_GPIO_Init+0x40>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d130      	bne.n	8003b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0201 	and.w	r2, r3, #1
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d118      	bne.n	8003b94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	f003 0201 	and.w	r2, r3, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d017      	beq.n	8003bd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	2203      	movs	r2, #3
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d123      	bne.n	8003c24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	08da      	lsrs	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	6939      	ldr	r1, [r7, #16]
 8003c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80ac 	beq.w	8003dbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <HAL_GPIO_Init+0x330>)
 8003c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003de4 <HAL_GPIO_Init+0x330>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c72:	4b5c      	ldr	r3, [pc, #368]	@ (8003de4 <HAL_GPIO_Init+0x330>)
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003de8 <HAL_GPIO_Init+0x334>)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	3302      	adds	r3, #2
 8003c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	220f      	movs	r2, #15
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ca8:	d025      	beq.n	8003cf6 <HAL_GPIO_Init+0x242>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4f      	ldr	r2, [pc, #316]	@ (8003dec <HAL_GPIO_Init+0x338>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01f      	beq.n	8003cf2 <HAL_GPIO_Init+0x23e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4e      	ldr	r2, [pc, #312]	@ (8003df0 <HAL_GPIO_Init+0x33c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d019      	beq.n	8003cee <HAL_GPIO_Init+0x23a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4d      	ldr	r2, [pc, #308]	@ (8003df4 <HAL_GPIO_Init+0x340>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x236>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8003df8 <HAL_GPIO_Init+0x344>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x232>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a4b      	ldr	r2, [pc, #300]	@ (8003dfc <HAL_GPIO_Init+0x348>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x22e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e00 <HAL_GPIO_Init+0x34c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x22a>
 8003cda:	2306      	movs	r3, #6
 8003cdc:	e00c      	b.n	8003cf8 <HAL_GPIO_Init+0x244>
 8003cde:	2307      	movs	r3, #7
 8003ce0:	e00a      	b.n	8003cf8 <HAL_GPIO_Init+0x244>
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	e008      	b.n	8003cf8 <HAL_GPIO_Init+0x244>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	e006      	b.n	8003cf8 <HAL_GPIO_Init+0x244>
 8003cea:	2303      	movs	r3, #3
 8003cec:	e004      	b.n	8003cf8 <HAL_GPIO_Init+0x244>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e002      	b.n	8003cf8 <HAL_GPIO_Init+0x244>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_GPIO_Init+0x244>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	f002 0203 	and.w	r2, r2, #3
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	4093      	lsls	r3, r2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d08:	4937      	ldr	r1, [pc, #220]	@ (8003de8 <HAL_GPIO_Init+0x334>)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	3302      	adds	r3, #2
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d16:	4b3b      	ldr	r3, [pc, #236]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d3a:	4a32      	ldr	r2, [pc, #200]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d40:	4b30      	ldr	r3, [pc, #192]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d64:	4a27      	ldr	r2, [pc, #156]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d6a:	4b26      	ldr	r3, [pc, #152]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d94:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003db8:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <HAL_GPIO_Init+0x350>)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f47f ae78 	bne.w	8003ac4 <HAL_GPIO_Init+0x10>
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40010000 	.word	0x40010000
 8003dec:	48000400 	.word	0x48000400
 8003df0:	48000800 	.word	0x48000800
 8003df4:	48000c00 	.word	0x48000c00
 8003df8:	48001000 	.word	0x48001000
 8003dfc:	48001400 	.word	0x48001400
 8003e00:	48001800 	.word	0x48001800
 8003e04:	40010400 	.word	0x40010400

08003e08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e16:	e0cd      	b.n	8003fb4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e18:	2201      	movs	r2, #1
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80c0 	beq.w	8003fae <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003e2e:	4a68      	ldr	r2, [pc, #416]	@ (8003fd0 <HAL_GPIO_DeInit+0x1c8>)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e56:	d025      	beq.n	8003ea4 <HAL_GPIO_DeInit+0x9c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003fd4 <HAL_GPIO_DeInit+0x1cc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d01f      	beq.n	8003ea0 <HAL_GPIO_DeInit+0x98>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a5d      	ldr	r2, [pc, #372]	@ (8003fd8 <HAL_GPIO_DeInit+0x1d0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d019      	beq.n	8003e9c <HAL_GPIO_DeInit+0x94>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003fdc <HAL_GPIO_DeInit+0x1d4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <HAL_GPIO_DeInit+0x90>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a5b      	ldr	r2, [pc, #364]	@ (8003fe0 <HAL_GPIO_DeInit+0x1d8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00d      	beq.n	8003e94 <HAL_GPIO_DeInit+0x8c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe4 <HAL_GPIO_DeInit+0x1dc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d007      	beq.n	8003e90 <HAL_GPIO_DeInit+0x88>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a59      	ldr	r2, [pc, #356]	@ (8003fe8 <HAL_GPIO_DeInit+0x1e0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d101      	bne.n	8003e8c <HAL_GPIO_DeInit+0x84>
 8003e88:	2306      	movs	r3, #6
 8003e8a:	e00c      	b.n	8003ea6 <HAL_GPIO_DeInit+0x9e>
 8003e8c:	2307      	movs	r3, #7
 8003e8e:	e00a      	b.n	8003ea6 <HAL_GPIO_DeInit+0x9e>
 8003e90:	2305      	movs	r3, #5
 8003e92:	e008      	b.n	8003ea6 <HAL_GPIO_DeInit+0x9e>
 8003e94:	2304      	movs	r3, #4
 8003e96:	e006      	b.n	8003ea6 <HAL_GPIO_DeInit+0x9e>
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e004      	b.n	8003ea6 <HAL_GPIO_DeInit+0x9e>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e002      	b.n	8003ea6 <HAL_GPIO_DeInit+0x9e>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e000      	b.n	8003ea6 <HAL_GPIO_DeInit+0x9e>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	f002 0203 	and.w	r2, r2, #3
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	4093      	lsls	r3, r2
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d132      	bne.n	8003f1c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	494b      	ldr	r1, [pc, #300]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003ec4:	4b49      	ldr	r3, [pc, #292]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4947      	ldr	r1, [pc, #284]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003ed2:	4b46      	ldr	r3, [pc, #280]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	4944      	ldr	r1, [pc, #272]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003ee0:	4b42      	ldr	r3, [pc, #264]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	4940      	ldr	r1, [pc, #256]	@ (8003fec <HAL_GPIO_DeInit+0x1e4>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003efe:	4a34      	ldr	r2, [pc, #208]	@ (8003fd0 <HAL_GPIO_DeInit+0x1c8>)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	4830      	ldr	r0, [pc, #192]	@ (8003fd0 <HAL_GPIO_DeInit+0x1c8>)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	400a      	ands	r2, r1
 8003f16:	3302      	adds	r3, #2
 8003f18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2103      	movs	r1, #3
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	220f      	movs	r2, #15
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	08d2      	lsrs	r2, r2, #3
 8003f50:	4019      	ands	r1, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3208      	adds	r2, #8
 8003f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2103      	movs	r1, #3
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	2101      	movs	r1, #1
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	401a      	ands	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	2103      	movs	r1, #3
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	401a      	ands	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f47f af2b 	bne.w	8003e18 <HAL_GPIO_DeInit+0x10>
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	48000400 	.word	0x48000400
 8003fd8:	48000800 	.word	0x48000800
 8003fdc:	48000c00 	.word	0x48000c00
 8003fe0:	48001000 	.word	0x48001000
 8003fe4:	48001400 	.word	0x48001400
 8003fe8:	48001800 	.word	0x48001800
 8003fec:	40010400 	.word	0x40010400

08003ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	887b      	ldrh	r3, [r7, #2]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e001      	b.n	8004012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	807b      	strh	r3, [r7, #2]
 800402c:	4613      	mov	r3, r2
 800402e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004030:	787b      	ldrb	r3, [r7, #1]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800403c:	e002      	b.n	8004044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800403e:	887a      	ldrh	r2, [r7, #2]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800405a:	4b08      	ldr	r3, [pc, #32]	@ (800407c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004066:	4a05      	ldr	r2, [pc, #20]	@ (800407c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800406c:	88fb      	ldrh	r3, [r7, #6]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd f9d4 	bl	800141c <HAL_GPIO_EXTI_Callback>
  }
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e08d      	b.n	80041ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd fa6e 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	@ 0x24
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	e006      	b.n	8004108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d108      	bne.n	8004122 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	e007      	b.n	8004132 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004144:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004154:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69d9      	ldr	r1, [r3, #28]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d138      	bne.n	800423e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e032      	b.n	8004240 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2224      	movs	r2, #36	@ 0x24
 80041e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004208:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b20      	cmp	r3, #32
 8004260:	d139      	bne.n	80042d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004268:	2b01      	cmp	r3, #1
 800426a:	d101      	bne.n	8004270 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800426c:	2302      	movs	r3, #2
 800426e:	e033      	b.n	80042d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	@ 0x24
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800429e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0201 	orr.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e000      	b.n	80042d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042d6:	2302      	movs	r3, #2
  }
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e101      	b.n	80044fa <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fbb8 	bl	8001a80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2203      	movs	r2, #3
 8004314:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f004 fe7e 	bl	8009024 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7c1a      	ldrb	r2, [r3, #16]
 8004330:	f88d 2000 	strb.w	r2, [sp]
 8004334:	3304      	adds	r3, #4
 8004336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004338:	f004 fe47 	bl	8008fca <USB_CoreInit>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0d5      	b.n	80044fa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f004 fe76 	bl	8009046 <USB_SetCurrentMode>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0c6      	b.n	80044fa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800436c:	2300      	movs	r3, #0
 800436e:	73fb      	strb	r3, [r7, #15]
 8004370:	e04a      	b.n	8004408 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004372:	7bfa      	ldrb	r2, [r7, #15]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	3315      	adds	r3, #21
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004386:	7bfa      	ldrb	r2, [r7, #15]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3314      	adds	r3, #20
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800439a:	7bfa      	ldrb	r2, [r7, #15]
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	b298      	uxth	r0, r3
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	332e      	adds	r3, #46	@ 0x2e
 80043ae:	4602      	mov	r2, r0
 80043b0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3318      	adds	r3, #24
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	331c      	adds	r3, #28
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	3320      	adds	r3, #32
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043ee:	7bfa      	ldrb	r2, [r7, #15]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3324      	adds	r3, #36	@ 0x24
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	3301      	adds	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	791b      	ldrb	r3, [r3, #4]
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3af      	bcc.n	8004372 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	e044      	b.n	80044a2 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800445a:	7bfa      	ldrb	r2, [r7, #15]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	3301      	adds	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	791b      	ldrb	r3, [r3, #4]
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3b5      	bcc.n	8004418 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	7c1a      	ldrb	r2, [r3, #16]
 80044b4:	f88d 2000 	strb.w	r2, [sp]
 80044b8:	3304      	adds	r3, #4
 80044ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044bc:	f004 fe10 	bl	80090e0 <USB_DevInit>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e013      	b.n	80044fa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7b1b      	ldrb	r3, [r3, #12]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d102      	bne.n	80044ee <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f80a 	bl	8004502 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f004 ffb5 	bl	8009462 <USB_DevDisconnect>

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004534:	f043 0303 	orr.w	r3, r3, #3
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a04      	ldr	r2, [pc, #16]	@ (8004568 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455a:	6013      	str	r3, [r2, #0]
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40007000 	.word	0x40007000

0800456c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004570:	4b04      	ldr	r3, [pc, #16]	@ (8004584 <HAL_PWREx_GetVoltageRange+0x18>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40007000 	.word	0x40007000

08004588 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004596:	d130      	bne.n	80045fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004598:	4b23      	ldr	r3, [pc, #140]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a4:	d038      	beq.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045a6:	4b20      	ldr	r3, [pc, #128]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045b6:	4b1d      	ldr	r3, [pc, #116]	@ (800462c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2232      	movs	r2, #50	@ 0x32
 80045bc:	fb02 f303 	mul.w	r3, r2, r3
 80045c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004630 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	0c9b      	lsrs	r3, r3, #18
 80045c8:	3301      	adds	r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045cc:	e002      	b.n	80045d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045d4:	4b14      	ldr	r3, [pc, #80]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045e0:	d102      	bne.n	80045e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f2      	bne.n	80045ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80045e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045f4:	d110      	bne.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e00f      	b.n	800461a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80045fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004606:	d007      	beq.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004608:	4b07      	ldr	r3, [pc, #28]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004610:	4a05      	ldr	r2, [pc, #20]	@ (8004628 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004616:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40007000 	.word	0x40007000
 800462c:	20000004 	.word	0x20000004
 8004630:	431bde83 	.word	0x431bde83

08004634 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <HAL_PWREx_EnableVddUSB+0x1c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <HAL_PWREx_EnableVddUSB+0x1c>)
 800463e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004642:	6053      	str	r3, [r2, #4]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40007000 	.word	0x40007000

08004654 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af02      	add	r7, sp, #8
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800465c:	f7fe ff9a 	bl	8003594 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e063      	b.n	8004734 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc ffdf 	bl	8001644 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004686:	f241 3188 	movw	r1, #5000	@ 0x1388
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f858 	bl	8004740 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	3b01      	subs	r3, #1
 80046a0:	021a      	lsls	r2, r3, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2120      	movs	r1, #32
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f850 	bl	800475c <QSPI_WaitFlagStateUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80046c0:	7afb      	ldrb	r3, [r7, #11]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d131      	bne.n	800472a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6852      	ldr	r2, [r2, #4]
 80046d8:	0611      	lsls	r1, r2, #24
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	4311      	orrs	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	4b13      	ldr	r3, [pc, #76]	@ (800473c <HAL_QSPI_Init+0xe8>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6912      	ldr	r2, [r2, #16]
 80046f6:	0411      	lsls	r1, r2, #16
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6952      	ldr	r2, [r2, #20]
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6992      	ldr	r2, [r2, #24]
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	430b      	orrs	r3, r1
 800470a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004732:	7afb      	ldrb	r3, [r7, #11]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	ffe0f8fe 	.word	0xffe0f8fe

08004740 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800476c:	e01a      	b.n	80047a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d016      	beq.n	80047a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fe ff0d 	bl	8003594 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2204      	movs	r2, #4
 8004790:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e00e      	b.n	80047c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1d6      	bne.n	800476e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e3ca      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047de:	4b97      	ldr	r3, [pc, #604]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e8:	4b94      	ldr	r3, [pc, #592]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80e4 	beq.w	80049c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <HAL_RCC_OscConfig+0x4a>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	f040 808b 	bne.w	8004924 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b01      	cmp	r3, #1
 8004812:	f040 8087 	bne.w	8004924 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004816:	4b89      	ldr	r3, [pc, #548]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_RCC_OscConfig+0x62>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e3a2      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1a      	ldr	r2, [r3, #32]
 8004832:	4b82      	ldr	r3, [pc, #520]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d004      	beq.n	8004848 <HAL_RCC_OscConfig+0x7c>
 800483e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004846:	e005      	b.n	8004854 <HAL_RCC_OscConfig+0x88>
 8004848:	4b7c      	ldr	r3, [pc, #496]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800484a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004854:	4293      	cmp	r3, r2
 8004856:	d223      	bcs.n	80048a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fd55 	bl	800530c <RCC_SetFlashLatencyFromMSIRange>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e383      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800486c:	4b73      	ldr	r3, [pc, #460]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a72      	ldr	r2, [pc, #456]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004872:	f043 0308 	orr.w	r3, r3, #8
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b70      	ldr	r3, [pc, #448]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	496d      	ldr	r1, [pc, #436]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800488a:	4b6c      	ldr	r3, [pc, #432]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	4968      	ldr	r1, [pc, #416]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
 800489e:	e025      	b.n	80048ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a0:	4b66      	ldr	r3, [pc, #408]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a65      	ldr	r2, [pc, #404]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80048a6:	f043 0308 	orr.w	r3, r3, #8
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b63      	ldr	r3, [pc, #396]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	4960      	ldr	r1, [pc, #384]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048be:	4b5f      	ldr	r3, [pc, #380]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	495b      	ldr	r1, [pc, #364]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fd15 	bl	800530c <RCC_SetFlashLatencyFromMSIRange>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e343      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ec:	f000 fc4a 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b52      	ldr	r3, [pc, #328]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	4950      	ldr	r1, [pc, #320]	@ (8004a40 <HAL_RCC_OscConfig+0x274>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	4a4e      	ldr	r2, [pc, #312]	@ (8004a44 <HAL_RCC_OscConfig+0x278>)
 800490a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800490c:	4b4e      	ldr	r3, [pc, #312]	@ (8004a48 <HAL_RCC_OscConfig+0x27c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fdef 	bl	80034f4 <HAL_InitTick>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d052      	beq.n	80049c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	e327      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d032      	beq.n	8004992 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800492c:	4b43      	ldr	r3, [pc, #268]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a42      	ldr	r2, [pc, #264]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004938:	f7fe fe2c 	bl	8003594 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004940:	f7fe fe28 	bl	8003594 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e310      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004952:	4b3a      	ldr	r3, [pc, #232]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800495e:	4b37      	ldr	r3, [pc, #220]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a36      	ldr	r2, [pc, #216]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004964:	f043 0308 	orr.w	r3, r3, #8
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4b34      	ldr	r3, [pc, #208]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4931      	ldr	r1, [pc, #196]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800497c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	492c      	ldr	r1, [pc, #176]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]
 8004990:	e01a      	b.n	80049c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004992:	4b2a      	ldr	r3, [pc, #168]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a29      	ldr	r2, [pc, #164]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800499e:	f7fe fdf9 	bl	8003594 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049a6:	f7fe fdf5 	bl	8003594 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e2dd      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049b8:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCC_OscConfig+0x1da>
 80049c4:	e000      	b.n	80049c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d074      	beq.n	8004abe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d005      	beq.n	80049e6 <HAL_RCC_OscConfig+0x21a>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	d10e      	bne.n	80049fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d10b      	bne.n	80049fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d064      	beq.n	8004abc <HAL_RCC_OscConfig+0x2f0>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d160      	bne.n	8004abc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e2ba      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x24a>
 8004a08:	4b0c      	ldr	r3, [pc, #48]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e026      	b.n	8004a64 <HAL_RCC_OscConfig+0x298>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a1e:	d115      	bne.n	8004a4c <HAL_RCC_OscConfig+0x280>
 8004a20:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a05      	ldr	r2, [pc, #20]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004a26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b03      	ldr	r3, [pc, #12]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a02      	ldr	r2, [pc, #8]	@ (8004a3c <HAL_RCC_OscConfig+0x270>)
 8004a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e014      	b.n	8004a64 <HAL_RCC_OscConfig+0x298>
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	0800bb5c 	.word	0x0800bb5c
 8004a44:	20000004 	.word	0x20000004
 8004a48:	20000008 	.word	0x20000008
 8004a4c:	4ba0      	ldr	r3, [pc, #640]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a9f      	ldr	r2, [pc, #636]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b9d      	ldr	r3, [pc, #628]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a9c      	ldr	r2, [pc, #624]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fd92 	bl	8003594 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fe fd8e 	bl	8003594 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	@ 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e276      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a86:	4b92      	ldr	r3, [pc, #584]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2a8>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe fd7e 	bl	8003594 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fe fd7a 	bl	8003594 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	@ 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e262      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aae:	4b88      	ldr	r3, [pc, #544]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x2d0>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d060      	beq.n	8004b8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_OscConfig+0x310>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d119      	bne.n	8004b0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d116      	bne.n	8004b0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004adc:	4b7c      	ldr	r3, [pc, #496]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_OscConfig+0x328>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e23f      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b76      	ldr	r3, [pc, #472]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	4973      	ldr	r1, [pc, #460]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b08:	e040      	b.n	8004b8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d023      	beq.n	8004b5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b12:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6e      	ldr	r2, [pc, #440]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fe fd39 	bl	8003594 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b26:	f7fe fd35 	bl	8003594 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e21d      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b38:	4b65      	ldr	r3, [pc, #404]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0f0      	beq.n	8004b26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b44:	4b62      	ldr	r3, [pc, #392]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	495f      	ldr	r1, [pc, #380]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
 8004b58:	e018      	b.n	8004b8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fe fd15 	bl	8003594 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6e:	f7fe fd11 	bl	8003594 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e1f9      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b80:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d03c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01c      	beq.n	8004bda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba6:	4a4a      	ldr	r2, [pc, #296]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fe fcf0 	bl	8003594 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7fe fcec 	bl	8003594 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e1d4      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bca:	4b41      	ldr	r3, [pc, #260]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x3ec>
 8004bd8:	e01b      	b.n	8004c12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bda:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be0:	4a3b      	ldr	r2, [pc, #236]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fe fcd3 	bl	8003594 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf2:	f7fe fccf 	bl	8003594 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1b7      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c04:	4b32      	ldr	r3, [pc, #200]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1ef      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80a6 	beq.w	8004d6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c20:	2300      	movs	r3, #0
 8004c22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c24:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10d      	bne.n	8004c4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	4b27      	ldr	r3, [pc, #156]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	4a26      	ldr	r2, [pc, #152]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c3c:	4b24      	ldr	r3, [pc, #144]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c4c:	4b21      	ldr	r3, [pc, #132]	@ (8004cd4 <HAL_RCC_OscConfig+0x508>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d118      	bne.n	8004c8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c58:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd4 <HAL_RCC_OscConfig+0x508>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <HAL_RCC_OscConfig+0x508>)
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c64:	f7fe fc96 	bl	8003594 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6c:	f7fe fc92 	bl	8003594 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e17a      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <HAL_RCC_OscConfig+0x508>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d108      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4d8>
 8004c92:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c98:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ca2:	e029      	b.n	8004cf8 <HAL_RCC_OscConfig+0x52c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b05      	cmp	r3, #5
 8004caa:	d115      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x50c>
 8004cac:	4b08      	ldr	r3, [pc, #32]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb2:	4a07      	ldr	r2, [pc, #28]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004cb4:	f043 0304 	orr.w	r3, r3, #4
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	4a03      	ldr	r2, [pc, #12]	@ (8004cd0 <HAL_RCC_OscConfig+0x504>)
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ccc:	e014      	b.n	8004cf8 <HAL_RCC_OscConfig+0x52c>
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	4b9c      	ldr	r3, [pc, #624]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	4a9b      	ldr	r2, [pc, #620]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce8:	4b98      	ldr	r3, [pc, #608]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cee:	4a97      	ldr	r2, [pc, #604]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d016      	beq.n	8004d2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fe fc48 	bl	8003594 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d08:	f7fe fc44 	bl	8003594 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e12a      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0ed      	beq.n	8004d08 <HAL_RCC_OscConfig+0x53c>
 8004d2c:	e015      	b.n	8004d5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2e:	f7fe fc31 	bl	8003594 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d36:	f7fe fc2d 	bl	8003594 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e113      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d4c:	4b7f      	ldr	r3, [pc, #508]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1ed      	bne.n	8004d36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d5a:	7ffb      	ldrb	r3, [r7, #31]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d60:	4b7a      	ldr	r3, [pc, #488]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d64:	4a79      	ldr	r2, [pc, #484]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80fe 	beq.w	8004f72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	f040 80d0 	bne.w	8004f20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d80:	4b72      	ldr	r3, [pc, #456]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f003 0203 	and.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d130      	bne.n	8004df6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d127      	bne.n	8004df6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d11f      	bne.n	8004df6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004dc0:	2a07      	cmp	r2, #7
 8004dc2:	bf14      	ite	ne
 8004dc4:	2201      	movne	r2, #1
 8004dc6:	2200      	moveq	r2, #0
 8004dc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d113      	bne.n	8004df6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d109      	bne.n	8004df6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	3b01      	subs	r3, #1
 8004df0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d06e      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d069      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dfc:	4b53      	ldr	r3, [pc, #332]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e08:	4b50      	ldr	r3, [pc, #320]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0ad      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e18:	4b4c      	ldr	r3, [pc, #304]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e24:	f7fe fbb6 	bl	8003594 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fe fbb2 	bl	8003594 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e09a      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e3e:	4b43      	ldr	r3, [pc, #268]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e4a:	4b40      	ldr	r3, [pc, #256]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	4b40      	ldr	r3, [pc, #256]	@ (8004f50 <HAL_RCC_OscConfig+0x784>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e5a:	3a01      	subs	r2, #1
 8004e5c:	0112      	lsls	r2, r2, #4
 8004e5e:	4311      	orrs	r1, r2
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e64:	0212      	lsls	r2, r2, #8
 8004e66:	4311      	orrs	r1, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e6c:	0852      	lsrs	r2, r2, #1
 8004e6e:	3a01      	subs	r2, #1
 8004e70:	0552      	lsls	r2, r2, #21
 8004e72:	4311      	orrs	r1, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e78:	0852      	lsrs	r2, r2, #1
 8004e7a:	3a01      	subs	r2, #1
 8004e7c:	0652      	lsls	r2, r2, #25
 8004e7e:	4311      	orrs	r1, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e84:	0912      	lsrs	r2, r2, #4
 8004e86:	0452      	lsls	r2, r2, #17
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	4930      	ldr	r1, [pc, #192]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e90:	4b2e      	ldr	r3, [pc, #184]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2d      	ldr	r2, [pc, #180]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ea8:	f7fe fb74 	bl	8003594 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb0:	f7fe fb70 	bl	8003594 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e058      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec2:	4b22      	ldr	r3, [pc, #136]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ece:	e050      	b.n	8004f72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e04f      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d148      	bne.n	8004f72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eec:	4b17      	ldr	r3, [pc, #92]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a16      	ldr	r2, [pc, #88]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ef8:	f7fe fb4c 	bl	8003594 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fe fb48 	bl	8003594 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e030      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f12:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x734>
 8004f1e:	e028      	b.n	8004f72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b0c      	cmp	r3, #12
 8004f24:	d023      	beq.n	8004f6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	4b09      	ldr	r3, [pc, #36]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a08      	ldr	r2, [pc, #32]	@ (8004f4c <HAL_RCC_OscConfig+0x780>)
 8004f2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7fe fb2f 	bl	8003594 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f38:	e00c      	b.n	8004f54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fe fb2b 	bl	8003594 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d905      	bls.n	8004f54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e013      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f54:	4b09      	ldr	r3, [pc, #36]	@ (8004f7c <HAL_RCC_OscConfig+0x7b0>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1ec      	bne.n	8004f3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f60:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <HAL_RCC_OscConfig+0x7b0>)
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	4905      	ldr	r1, [pc, #20]	@ (8004f7c <HAL_RCC_OscConfig+0x7b0>)
 8004f66:	4b06      	ldr	r3, [pc, #24]	@ (8004f80 <HAL_RCC_OscConfig+0x7b4>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
 8004f6c:	e001      	b.n	8004f72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	feeefffc 	.word	0xfeeefffc

08004f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0e7      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f98:	4b75      	ldr	r3, [pc, #468]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d910      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b72      	ldr	r3, [pc, #456]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 0207 	bic.w	r2, r3, #7
 8004fae:	4970      	ldr	r1, [pc, #448]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b6e      	ldr	r3, [pc, #440]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0cf      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	4b66      	ldr	r3, [pc, #408]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d908      	bls.n	8004ff6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe4:	4b63      	ldr	r3, [pc, #396]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	4960      	ldr	r1, [pc, #384]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04c      	beq.n	800509c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800500a:	4b5a      	ldr	r3, [pc, #360]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d121      	bne.n	800505a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e0a6      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005022:	4b54      	ldr	r3, [pc, #336]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d115      	bne.n	800505a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e09a      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800503a:	4b4e      	ldr	r3, [pc, #312]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e08e      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504a:	4b4a      	ldr	r3, [pc, #296]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e086      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800505a:	4b46      	ldr	r3, [pc, #280]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4943      	ldr	r1, [pc, #268]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506c:	f7fe fa92 	bl	8003594 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7fe fa8e 	bl	8003594 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e06e      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	4b3a      	ldr	r3, [pc, #232]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 020c 	and.w	r2, r3, #12
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	429a      	cmp	r2, r3
 800509a:	d1eb      	bne.n	8005074 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d010      	beq.n	80050ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	4b31      	ldr	r3, [pc, #196]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d208      	bcs.n	80050ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	492b      	ldr	r1, [pc, #172]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ca:	4b29      	ldr	r3, [pc, #164]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d210      	bcs.n	80050fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d8:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 0207 	bic.w	r2, r3, #7
 80050e0:	4923      	ldr	r1, [pc, #140]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e8:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <HAL_RCC_ClockConfig+0x1ec>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d001      	beq.n	80050fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e036      	b.n	8005168 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005106:	4b1b      	ldr	r3, [pc, #108]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4918      	ldr	r1, [pc, #96]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005124:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4910      	ldr	r1, [pc, #64]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005134:	4313      	orrs	r3, r2
 8005136:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005138:	f000 f824 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <HAL_RCC_ClockConfig+0x1f0>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	490b      	ldr	r1, [pc, #44]	@ (8005178 <HAL_RCC_ClockConfig+0x1f4>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	4a09      	ldr	r2, [pc, #36]	@ (800517c <HAL_RCC_ClockConfig+0x1f8>)
 8005156:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <HAL_RCC_ClockConfig+0x1fc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe f9c9 	bl	80034f4 <HAL_InitTick>
 8005162:	4603      	mov	r3, r0
 8005164:	72fb      	strb	r3, [r7, #11]

  return status;
 8005166:	7afb      	ldrb	r3, [r7, #11]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40022000 	.word	0x40022000
 8005174:	40021000 	.word	0x40021000
 8005178:	0800bb5c 	.word	0x0800bb5c
 800517c:	20000004 	.word	0x20000004
 8005180:	20000008 	.word	0x20000008

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	@ 0x24
 8005188:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005192:	4b3e      	ldr	r3, [pc, #248]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800519c:	4b3b      	ldr	r3, [pc, #236]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x34>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d121      	bne.n	80051f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d11e      	bne.n	80051f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051b8:	4b34      	ldr	r3, [pc, #208]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d107      	bne.n	80051d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051c4:	4b31      	ldr	r3, [pc, #196]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 80051c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e005      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051d4:	4b2d      	ldr	r3, [pc, #180]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d102      	bne.n	8005202 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051fc:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x110>)
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e004      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d101      	bne.n	800520c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005208:	4b23      	ldr	r3, [pc, #140]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x114>)
 800520a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b0c      	cmp	r3, #12
 8005210:	d134      	bne.n	800527c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d003      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0xa6>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d003      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0xac>
 8005228:	e005      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800522a:	4b1a      	ldr	r3, [pc, #104]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x110>)
 800522c:	617b      	str	r3, [r7, #20]
      break;
 800522e:	e005      	b.n	800523c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005230:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x114>)
 8005232:	617b      	str	r3, [r7, #20]
      break;
 8005234:	e002      	b.n	800523c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	617b      	str	r3, [r7, #20]
      break;
 800523a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800523c:	4b13      	ldr	r3, [pc, #76]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	3301      	adds	r3, #1
 8005248:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800524a:	4b10      	ldr	r3, [pc, #64]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	fb03 f202 	mul.w	r2, r3, r2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <HAL_RCC_GetSysClockFreq+0x108>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	0e5b      	lsrs	r3, r3, #25
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	3301      	adds	r3, #1
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800527c:	69bb      	ldr	r3, [r7, #24]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3724      	adds	r7, #36	@ 0x24
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	0800bb74 	.word	0x0800bb74
 8005294:	00f42400 	.word	0x00f42400
 8005298:	007a1200 	.word	0x007a1200

0800529c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a0:	4b03      	ldr	r3, [pc, #12]	@ (80052b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000004 	.word	0x20000004

080052b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052b8:	f7ff fff0 	bl	800529c <HAL_RCC_GetHCLKFreq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4904      	ldr	r1, [pc, #16]	@ (80052dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40021000 	.word	0x40021000
 80052dc:	0800bb6c 	.word	0x0800bb6c

080052e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052e4:	f7ff ffda 	bl	800529c <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0adb      	lsrs	r3, r3, #11
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4904      	ldr	r1, [pc, #16]	@ (8005308 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000
 8005308:	0800bb6c 	.word	0x0800bb6c

0800530c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005314:	2300      	movs	r3, #0
 8005316:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005318:	4b2a      	ldr	r3, [pc, #168]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005324:	f7ff f922 	bl	800456c <HAL_PWREx_GetVoltageRange>
 8005328:	6178      	str	r0, [r7, #20]
 800532a:	e014      	b.n	8005356 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800532c:	4b25      	ldr	r3, [pc, #148]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800532e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005330:	4a24      	ldr	r2, [pc, #144]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005336:	6593      	str	r3, [r2, #88]	@ 0x58
 8005338:	4b22      	ldr	r3, [pc, #136]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005344:	f7ff f912 	bl	800456c <HAL_PWREx_GetVoltageRange>
 8005348:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800534a:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005354:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800535c:	d10b      	bne.n	8005376 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b80      	cmp	r3, #128	@ 0x80
 8005362:	d919      	bls.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2ba0      	cmp	r3, #160	@ 0xa0
 8005368:	d902      	bls.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800536a:	2302      	movs	r3, #2
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	e013      	b.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005370:	2301      	movs	r3, #1
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	e010      	b.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b80      	cmp	r3, #128	@ 0x80
 800537a:	d902      	bls.n	8005382 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800537c:	2303      	movs	r3, #3
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	e00a      	b.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b80      	cmp	r3, #128	@ 0x80
 8005386:	d102      	bne.n	800538e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005388:	2302      	movs	r3, #2
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e004      	b.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b70      	cmp	r3, #112	@ 0x70
 8005392:	d101      	bne.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005394:	2301      	movs	r3, #1
 8005396:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005398:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f023 0207 	bic.w	r2, r3, #7
 80053a0:	4909      	ldr	r1, [pc, #36]	@ (80053c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d001      	beq.n	80053ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40022000 	.word	0x40022000

080053cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053d4:	2300      	movs	r3, #0
 80053d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053d8:	2300      	movs	r3, #0
 80053da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d041      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053f0:	d02a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80053f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80053f6:	d824      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053fc:	d008      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005402:	d81e      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005408:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800540c:	d010      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800540e:	e018      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005410:	4b86      	ldr	r3, [pc, #536]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a85      	ldr	r2, [pc, #532]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800541a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800541c:	e015      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f000 facb 	bl	80059c0 <RCCEx_PLLSAI1_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800542e:	e00c      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3320      	adds	r3, #32
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fbb6 	bl	8005ba8 <RCCEx_PLLSAI2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005440:	e003      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	74fb      	strb	r3, [r7, #19]
      break;
 8005446:	e000      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005450:	4b76      	ldr	r3, [pc, #472]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005456:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800545e:	4973      	ldr	r1, [pc, #460]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005466:	e001      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d041      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800547c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005480:	d02a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005482:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005486:	d824      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800548c:	d008      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800548e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005492:	d81e      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800549c:	d010      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800549e:	e018      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054a0:	4b62      	ldr	r3, [pc, #392]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4a61      	ldr	r2, [pc, #388]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ac:	e015      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3304      	adds	r3, #4
 80054b2:	2100      	movs	r1, #0
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fa83 	bl	80059c0 <RCCEx_PLLSAI1_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054be:	e00c      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3320      	adds	r3, #32
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fb6e 	bl	8005ba8 <RCCEx_PLLSAI2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054d0:	e003      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	74fb      	strb	r3, [r7, #19]
      break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054e0:	4b52      	ldr	r3, [pc, #328]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ee:	494f      	ldr	r1, [pc, #316]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054f6:	e001      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 80a0 	beq.w	800564a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	2300      	movs	r3, #0
 800550c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800550e:	4b47      	ldr	r3, [pc, #284]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800551e:	2300      	movs	r3, #0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005524:	4b41      	ldr	r3, [pc, #260]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005528:	4a40      	ldr	r2, [pc, #256]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005530:	4b3e      	ldr	r3, [pc, #248]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553c:	2301      	movs	r3, #1
 800553e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005540:	4b3b      	ldr	r3, [pc, #236]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a3a      	ldr	r2, [pc, #232]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800554c:	f7fe f822 	bl	8003594 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005552:	e009      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005554:	f7fe f81e 	bl	8003594 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d902      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	74fb      	strb	r3, [r7, #19]
        break;
 8005566:	e005      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005568:	4b31      	ldr	r3, [pc, #196]	@ (8005630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ef      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005574:	7cfb      	ldrb	r3, [r7, #19]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d15c      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800557a:	4b2c      	ldr	r3, [pc, #176]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005584:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01f      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	429a      	cmp	r2, r3
 8005596:	d019      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005598:	4b24      	ldr	r3, [pc, #144]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055a4:	4b21      	ldr	r3, [pc, #132]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055aa:	4a20      	ldr	r2, [pc, #128]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055b4:	4b1d      	ldr	r3, [pc, #116]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ba:	4a1c      	ldr	r2, [pc, #112]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055c4:	4a19      	ldr	r2, [pc, #100]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d016      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fd ffdd 	bl	8003594 <HAL_GetTick>
 80055da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055dc:	e00b      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fd ffd9 	bl	8003594 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d902      	bls.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	74fb      	strb	r3, [r7, #19]
            break;
 80055f4:	e006      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f6:	4b0d      	ldr	r3, [pc, #52]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0ec      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560a:	4b08      	ldr	r3, [pc, #32]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800561a:	4904      	ldr	r1, [pc, #16]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005622:	e009      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	74bb      	strb	r3, [r7, #18]
 8005628:	e006      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000
 8005630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005638:	7c7b      	ldrb	r3, [r7, #17]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d105      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800563e:	4b9e      	ldr	r3, [pc, #632]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	4a9d      	ldr	r2, [pc, #628]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005648:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005656:	4b98      	ldr	r3, [pc, #608]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565c:	f023 0203 	bic.w	r2, r3, #3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005664:	4994      	ldr	r1, [pc, #592]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005678:	4b8f      	ldr	r3, [pc, #572]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567e:	f023 020c 	bic.w	r2, r3, #12
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005686:	498c      	ldr	r1, [pc, #560]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800569a:	4b87      	ldr	r3, [pc, #540]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a8:	4983      	ldr	r1, [pc, #524]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056bc:	4b7e      	ldr	r3, [pc, #504]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	497b      	ldr	r1, [pc, #492]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056de:	4b76      	ldr	r3, [pc, #472]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ec:	4972      	ldr	r1, [pc, #456]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005700:	4b6d      	ldr	r3, [pc, #436]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570e:	496a      	ldr	r1, [pc, #424]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005722:	4b65      	ldr	r3, [pc, #404]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005730:	4961      	ldr	r1, [pc, #388]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005744:	4b5c      	ldr	r3, [pc, #368]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005752:	4959      	ldr	r1, [pc, #356]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005766:	4b54      	ldr	r3, [pc, #336]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	4950      	ldr	r1, [pc, #320]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005788:	4b4b      	ldr	r3, [pc, #300]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005796:	4948      	ldr	r1, [pc, #288]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057aa:	4b43      	ldr	r3, [pc, #268]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b8:	493f      	ldr	r1, [pc, #252]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d028      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057cc:	4b3a      	ldr	r3, [pc, #232]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057da:	4937      	ldr	r1, [pc, #220]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057ea:	d106      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057ec:	4b32      	ldr	r3, [pc, #200]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	4a31      	ldr	r2, [pc, #196]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057f6:	60d3      	str	r3, [r2, #12]
 80057f8:	e011      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005802:	d10c      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f8d8 	bl	80059c0 <RCCEx_PLLSAI1_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d028      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800582a:	4b23      	ldr	r3, [pc, #140]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005838:	491f      	ldr	r1, [pc, #124]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005848:	d106      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800584a:	4b1b      	ldr	r3, [pc, #108]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	4a1a      	ldr	r2, [pc, #104]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005850:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005854:	60d3      	str	r3, [r2, #12]
 8005856:	e011      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005860:	d10c      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3304      	adds	r3, #4
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f000 f8a9 	bl	80059c0 <RCCEx_PLLSAI1_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005872:	7cfb      	ldrb	r3, [r7, #19]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005878:	7cfb      	ldrb	r3, [r7, #19]
 800587a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02b      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005888:	4b0b      	ldr	r3, [pc, #44]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005896:	4908      	ldr	r1, [pc, #32]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058a6:	d109      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a8:	4b03      	ldr	r3, [pc, #12]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a02      	ldr	r2, [pc, #8]	@ (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b2:	60d3      	str	r3, [r2, #12]
 80058b4:	e014      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3304      	adds	r3, #4
 80058ca:	2101      	movs	r1, #1
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 f877 	bl	80059c0 <RCCEx_PLLSAI1_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058d6:	7cfb      	ldrb	r3, [r7, #19]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02f      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058ec:	4b2b      	ldr	r3, [pc, #172]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058fa:	4928      	ldr	r1, [pc, #160]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800590a:	d10d      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3304      	adds	r3, #4
 8005910:	2102      	movs	r1, #2
 8005912:	4618      	mov	r0, r3
 8005914:	f000 f854 	bl	80059c0 <RCCEx_PLLSAI1_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d014      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	74bb      	strb	r3, [r7, #18]
 8005926:	e011      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800592c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005930:	d10c      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3320      	adds	r3, #32
 8005936:	2102      	movs	r1, #2
 8005938:	4618      	mov	r0, r3
 800593a:	f000 f935 	bl	8005ba8 <RCCEx_PLLSAI2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005942:	7cfb      	ldrb	r3, [r7, #19]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005948:	7cfb      	ldrb	r3, [r7, #19]
 800594a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005958:	4b10      	ldr	r3, [pc, #64]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005966:	490d      	ldr	r1, [pc, #52]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800597a:	4b08      	ldr	r3, [pc, #32]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598a:	4904      	ldr	r1, [pc, #16]	@ (800599c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005992:	7cbb      	ldrb	r3, [r7, #18]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40021000 	.word	0x40021000

080059a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a04      	ldr	r2, [pc, #16]	@ (80059bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059aa:	f043 0304 	orr.w	r3, r3, #4
 80059ae:	6013      	str	r3, [r2, #0]
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000

080059c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059ce:	4b75      	ldr	r3, [pc, #468]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059da:	4b72      	ldr	r3, [pc, #456]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f003 0203 	and.w	r2, r3, #3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10d      	bne.n	8005a06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
       ||
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059f2:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
       ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d047      	beq.n	8005a96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
 8005a0a:	e044      	b.n	8005a96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d018      	beq.n	8005a46 <RCCEx_PLLSAI1_Config+0x86>
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d825      	bhi.n	8005a64 <RCCEx_PLLSAI1_Config+0xa4>
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d002      	beq.n	8005a22 <RCCEx_PLLSAI1_Config+0x62>
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d009      	beq.n	8005a34 <RCCEx_PLLSAI1_Config+0x74>
 8005a20:	e020      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a22:	4b60      	ldr	r3, [pc, #384]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d11d      	bne.n	8005a6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a32:	e01a      	b.n	8005a6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a34:	4b5b      	ldr	r3, [pc, #364]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a44:	e013      	b.n	8005a6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a46:	4b57      	ldr	r3, [pc, #348]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10f      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a52:	4b54      	ldr	r3, [pc, #336]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a62:	e006      	b.n	8005a72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
      break;
 8005a68:	e004      	b.n	8005a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a6a:	bf00      	nop
 8005a6c:	e002      	b.n	8005a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e000      	b.n	8005a74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a72:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10d      	bne.n	8005a96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6819      	ldr	r1, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	4944      	ldr	r1, [pc, #272]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d17d      	bne.n	8005b98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a9c:	4b41      	ldr	r3, [pc, #260]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a40      	ldr	r2, [pc, #256]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa8:	f7fd fd74 	bl	8003594 <HAL_GetTick>
 8005aac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aae:	e009      	b.n	8005ac4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ab0:	f7fd fd70 	bl	8003594 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d902      	bls.n	8005ac4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ac2:	e005      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ac4:	4b37      	ldr	r3, [pc, #220]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1ef      	bne.n	8005ab0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d160      	bne.n	8005b98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d111      	bne.n	8005b00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005adc:	4b31      	ldr	r3, [pc, #196]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6892      	ldr	r2, [r2, #8]
 8005aec:	0211      	lsls	r1, r2, #8
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68d2      	ldr	r2, [r2, #12]
 8005af2:	0912      	lsrs	r2, r2, #4
 8005af4:	0452      	lsls	r2, r2, #17
 8005af6:	430a      	orrs	r2, r1
 8005af8:	492a      	ldr	r1, [pc, #168]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	610b      	str	r3, [r1, #16]
 8005afe:	e027      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d112      	bne.n	8005b2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b06:	4b27      	ldr	r3, [pc, #156]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6892      	ldr	r2, [r2, #8]
 8005b16:	0211      	lsls	r1, r2, #8
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6912      	ldr	r2, [r2, #16]
 8005b1c:	0852      	lsrs	r2, r2, #1
 8005b1e:	3a01      	subs	r2, #1
 8005b20:	0552      	lsls	r2, r2, #21
 8005b22:	430a      	orrs	r2, r1
 8005b24:	491f      	ldr	r1, [pc, #124]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	610b      	str	r3, [r1, #16]
 8005b2a:	e011      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6892      	ldr	r2, [r2, #8]
 8005b3c:	0211      	lsls	r1, r2, #8
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6952      	ldr	r2, [r2, #20]
 8005b42:	0852      	lsrs	r2, r2, #1
 8005b44:	3a01      	subs	r2, #1
 8005b46:	0652      	lsls	r2, r2, #25
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	4916      	ldr	r1, [pc, #88]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b50:	4b14      	ldr	r3, [pc, #80]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a13      	ldr	r2, [pc, #76]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5c:	f7fd fd1a 	bl	8003594 <HAL_GetTick>
 8005b60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b62:	e009      	b.n	8005b78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b64:	f7fd fd16 	bl	8003594 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d902      	bls.n	8005b78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	73fb      	strb	r3, [r7, #15]
          break;
 8005b76:	e005      	b.n	8005b84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0ef      	beq.n	8005b64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	4904      	ldr	r1, [pc, #16]	@ (8005ba4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000

08005ba8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d018      	beq.n	8005bf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bc2:	4b67      	ldr	r3, [pc, #412]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0203 	and.w	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d10d      	bne.n	8005bee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bda:	4b61      	ldr	r3, [pc, #388]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d047      	beq.n	8005c7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
 8005bf2:	e044      	b.n	8005c7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d018      	beq.n	8005c2e <RCCEx_PLLSAI2_Config+0x86>
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d825      	bhi.n	8005c4c <RCCEx_PLLSAI2_Config+0xa4>
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d002      	beq.n	8005c0a <RCCEx_PLLSAI2_Config+0x62>
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d009      	beq.n	8005c1c <RCCEx_PLLSAI2_Config+0x74>
 8005c08:	e020      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c0a:	4b55      	ldr	r3, [pc, #340]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d11d      	bne.n	8005c52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c1a:	e01a      	b.n	8005c52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c1c:	4b50      	ldr	r3, [pc, #320]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d116      	bne.n	8005c56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c2c:	e013      	b.n	8005c56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10f      	bne.n	8005c5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c3a:	4b49      	ldr	r3, [pc, #292]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c4a:	e006      	b.n	8005c5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c50:	e004      	b.n	8005c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c52:	bf00      	nop
 8005c54:	e002      	b.n	8005c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c56:	bf00      	nop
 8005c58:	e000      	b.n	8005c5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10d      	bne.n	8005c7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c62:	4b3f      	ldr	r3, [pc, #252]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	430b      	orrs	r3, r1
 8005c78:	4939      	ldr	r1, [pc, #228]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d167      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c84:	4b36      	ldr	r3, [pc, #216]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a35      	ldr	r2, [pc, #212]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c90:	f7fd fc80 	bl	8003594 <HAL_GetTick>
 8005c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c96:	e009      	b.n	8005cac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c98:	f7fd fc7c 	bl	8003594 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d902      	bls.n	8005cac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8005caa:	e005      	b.n	8005cb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cac:	4b2c      	ldr	r3, [pc, #176]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1ef      	bne.n	8005c98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d14a      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d111      	bne.n	8005ce8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cc4:	4b26      	ldr	r3, [pc, #152]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6892      	ldr	r2, [r2, #8]
 8005cd4:	0211      	lsls	r1, r2, #8
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	68d2      	ldr	r2, [r2, #12]
 8005cda:	0912      	lsrs	r2, r2, #4
 8005cdc:	0452      	lsls	r2, r2, #17
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	491f      	ldr	r1, [pc, #124]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	614b      	str	r3, [r1, #20]
 8005ce6:	e011      	b.n	8005d0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005cf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6892      	ldr	r2, [r2, #8]
 8005cf8:	0211      	lsls	r1, r2, #8
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6912      	ldr	r2, [r2, #16]
 8005cfe:	0852      	lsrs	r2, r2, #1
 8005d00:	3a01      	subs	r2, #1
 8005d02:	0652      	lsls	r2, r2, #25
 8005d04:	430a      	orrs	r2, r1
 8005d06:	4916      	ldr	r1, [pc, #88]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d0c:	4b14      	ldr	r3, [pc, #80]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a13      	ldr	r2, [pc, #76]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d18:	f7fd fc3c 	bl	8003594 <HAL_GetTick>
 8005d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d1e:	e009      	b.n	8005d34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d20:	f7fd fc38 	bl	8003594 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d902      	bls.n	8005d34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	73fb      	strb	r3, [r7, #15]
          break;
 8005d32:	e005      	b.n	8005d40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d34:	4b0a      	ldr	r3, [pc, #40]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ef      	beq.n	8005d20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d48:	695a      	ldr	r2, [r3, #20]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	4904      	ldr	r1, [pc, #16]	@ (8005d60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000

08005d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e095      	b.n	8005ea2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d86:	d009      	beq.n	8005d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	61da      	str	r2, [r3, #28]
 8005d8e:	e005      	b.n	8005d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fb fc88 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ddc:	d902      	bls.n	8005de4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e002      	b.n	8005dea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005de8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005df2:	d007      	beq.n	8005e04 <HAL_SPI_Init+0xa0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e46:	ea42 0103 	orr.w	r1, r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	f003 0204 	and.w	r2, r3, #4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e80:	ea42 0103 	orr.w	r1, r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e01a      	b.n	8005ef2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fb fc6f 	bl	80017b8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b088      	sub	sp, #32
 8005efe:	af02      	add	r7, sp, #8
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d001      	beq.n	8005f1a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005f16:	2302      	movs	r3, #2
 8005f18:	e123      	b.n	8006162 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f22:	d112      	bne.n	8005f4a <HAL_SPI_Receive+0x50>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10e      	bne.n	8005f4a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2204      	movs	r2, #4
 8005f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f912 	bl	800616a <HAL_SPI_TransmitReceive>
 8005f46:	4603      	mov	r3, r0
 8005f48:	e10b      	b.n	8006162 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4a:	f7fd fb23 	bl	8003594 <HAL_GetTick>
 8005f4e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Receive+0x62>
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e100      	b.n	8006162 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_SPI_Receive+0x74>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e0f9      	b.n	8006162 <HAL_SPI_Receive+0x268>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fc0:	d908      	bls.n	8005fd4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	e007      	b.n	8005fe4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fec:	d10f      	bne.n	800600e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800600c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b40      	cmp	r3, #64	@ 0x40
 800601a:	d007      	beq.n	800602c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006034:	d875      	bhi.n	8006122 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006036:	e037      	b.n	80060a8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d117      	bne.n	8006076 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f103 020c 	add.w	r2, r3, #12
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006074:	e018      	b.n	80060a8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006076:	f7fd fa8d 	bl	8003594 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d803      	bhi.n	800608e <HAL_SPI_Receive+0x194>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d102      	bne.n	8006094 <HAL_SPI_Receive+0x19a>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d109      	bne.n	80060a8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e05c      	b.n	8006162 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1c1      	bne.n	8006038 <HAL_SPI_Receive+0x13e>
 80060b4:	e03b      	b.n	800612e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d115      	bne.n	80060f0 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	b292      	uxth	r2, r2
 80060d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	1c9a      	adds	r2, r3, #2
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80060ee:	e018      	b.n	8006122 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f0:	f7fd fa50 	bl	8003594 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d803      	bhi.n	8006108 <HAL_SPI_Receive+0x20e>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d102      	bne.n	800610e <HAL_SPI_Receive+0x214>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e01f      	b.n	8006162 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1c3      	bne.n	80060b6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 ffee 	bl	8007114 <SPI_EndRxTransaction>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8006160:	2300      	movs	r3, #0
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b08a      	sub	sp, #40	@ 0x28
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
 8006176:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006178:	2301      	movs	r3, #1
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800617c:	f7fd fa0a 	bl	8003594 <HAL_GetTick>
 8006180:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006188:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006190:	887b      	ldrh	r3, [r7, #2]
 8006192:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006198:	7ffb      	ldrb	r3, [r7, #31]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d00c      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x4e>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061a4:	d106      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x4a>
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d001      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
 80061b6:	e1f3      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <HAL_SPI_TransmitReceive+0x60>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_TransmitReceive+0x60>
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e1e8      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_SPI_TransmitReceive+0x72>
 80061d8:	2302      	movs	r3, #2
 80061da:	e1e1      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x436>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d003      	beq.n	80061f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2205      	movs	r2, #5
 80061f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	887a      	ldrh	r2, [r7, #2]
 8006208:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	887a      	ldrh	r2, [r7, #2]
 8006210:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	887a      	ldrh	r2, [r7, #2]
 800621e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	887a      	ldrh	r2, [r7, #2]
 8006224:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800623a:	d802      	bhi.n	8006242 <HAL_SPI_TransmitReceive+0xd8>
 800623c:	8abb      	ldrh	r3, [r7, #20]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d908      	bls.n	8006254 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	e007      	b.n	8006264 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006262:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626e:	2b40      	cmp	r3, #64	@ 0x40
 8006270:	d007      	beq.n	8006282 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800628a:	f240 8083 	bls.w	8006394 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_SPI_TransmitReceive+0x132>
 8006296:	8afb      	ldrh	r3, [r7, #22]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d16f      	bne.n	800637c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a0:	881a      	ldrh	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	1c9a      	adds	r2, r3, #2
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c0:	e05c      	b.n	800637c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d11b      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x19e>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <HAL_SPI_TransmitReceive+0x19e>
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d113      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	1c9a      	adds	r2, r3, #2
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d11c      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x1e6>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d016      	beq.n	8006350 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	b292      	uxth	r2, r2
 800632e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800634c:	2301      	movs	r3, #1
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006350:	f7fd f920 	bl	8003594 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635c:	429a      	cmp	r2, r3
 800635e:	d80d      	bhi.n	800637c <HAL_SPI_TransmitReceive+0x212>
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006366:	d009      	beq.n	800637c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e111      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d19d      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x158>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d197      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x158>
 8006392:	e0e5      	b.n	8006560 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <HAL_SPI_TransmitReceive+0x23a>
 800639c:	8afb      	ldrh	r3, [r7, #22]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	f040 80d1 	bne.w	8006546 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d912      	bls.n	80063d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b2:	881a      	ldrh	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	1c9a      	adds	r2, r3, #2
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b02      	subs	r3, #2
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063d2:	e0b8      	b.n	8006546 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	7812      	ldrb	r2, [r2, #0]
 80063e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063fa:	e0a4      	b.n	8006546 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d134      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x30a>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d02f      	beq.n	8006474 <HAL_SPI_TransmitReceive+0x30a>
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	2b01      	cmp	r3, #1
 8006418:	d12c      	bne.n	8006474 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	d912      	bls.n	800644a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006428:	881a      	ldrh	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	1c9a      	adds	r2, r3, #2
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b02      	subs	r3, #2
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006448:	e012      	b.n	8006470 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d148      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x3aa>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d042      	beq.n	8006514 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d923      	bls.n	80064e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a4:	b292      	uxth	r2, r2
 80064a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ac:	1c9a      	adds	r2, r3, #2
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b02      	subs	r3, #2
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d81f      	bhi.n	8006510 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064de:	605a      	str	r2, [r3, #4]
 80064e0:	e016      	b.n	8006510 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f103 020c 	add.w	r2, r3, #12
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	7812      	ldrb	r2, [r2, #0]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006510:	2301      	movs	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006514:	f7fd f83e 	bl	8003594 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006520:	429a      	cmp	r2, r3
 8006522:	d803      	bhi.n	800652c <HAL_SPI_TransmitReceive+0x3c2>
 8006524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d102      	bne.n	8006532 <HAL_SPI_TransmitReceive+0x3c8>
 800652c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e02c      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f af55 	bne.w	80063fc <HAL_SPI_TransmitReceive+0x292>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	f47f af4e 	bne.w	80063fc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fe2d 	bl	80071c4 <SPI_EndRxTxTransaction>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e00e      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800659e:	2300      	movs	r3, #0
  }
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	@ 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_SPI_Transmit_IT+0x1a>
 80065bc:	88fb      	ldrh	r3, [r7, #6]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e06d      	b.n	80066a2 <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d001      	beq.n	80065d6 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 80065d2:	2302      	movs	r3, #2
 80065d4:	e065      	b.n	80066a2 <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_SPI_Transmit_IT+0x3c>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e05e      	b.n	80066a2 <HAL_SPI_Transmit_IT+0xfa>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2203      	movs	r2, #3
 80065f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	88fa      	ldrh	r2, [r7, #6]
 8006604:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006630:	d903      	bls.n	800663a <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a1e      	ldr	r2, [pc, #120]	@ (80066b0 <HAL_SPI_Transmit_IT+0x108>)
 8006636:	651a      	str	r2, [r3, #80]	@ 0x50
 8006638:	e002      	b.n	8006640 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <HAL_SPI_Transmit_IT+0x10c>)
 800663e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006648:	d10f      	bne.n	800666a <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006674:	2b40      	cmp	r3, #64	@ 0x40
 8006676:	d007      	beq.n	8006688 <HAL_SPI_Transmit_IT+0xe0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006686:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800669e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	08006e93 	.word	0x08006e93
 80066b4:	08006e4d 	.word	0x08006e4d

080066b8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4613      	mov	r3, r2
 80066c4:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
 80066d4:	e092      	b.n	80067fc <HAL_SPI_Receive_IT+0x144>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d110      	bne.n	8006700 <HAL_SPI_Receive_IT+0x48>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066e6:	d10b      	bne.n	8006700 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2204      	movs	r2, #4
 80066ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f888 	bl	800680c <HAL_SPI_TransmitReceive_IT>
 80066fc:	4603      	mov	r3, r0
 80066fe:	e07d      	b.n	80067fc <HAL_SPI_Receive_IT+0x144>
  }


  if ((pData == NULL) || (Size == 0U))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_SPI_Receive_IT+0x54>
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e075      	b.n	80067fc <HAL_SPI_Receive_IT+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_SPI_Receive_IT+0x66>
 800671a:	2302      	movs	r3, #2
 800671c:	e06e      	b.n	80067fc <HAL_SPI_Receive_IT+0x144>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2204      	movs	r2, #4
 800672a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	88fa      	ldrh	r2, [r7, #6]
 8006746:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800676a:	d90b      	bls.n	8006784 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800677a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a21      	ldr	r2, [pc, #132]	@ (8006804 <HAL_SPI_Receive_IT+0x14c>)
 8006780:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006782:	e00a      	b.n	800679a <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006792:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a1c      	ldr	r2, [pc, #112]	@ (8006808 <HAL_SPI_Receive_IT+0x150>)
 8006798:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a2:	d10f      	bne.n	80067c4 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067c2:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b40      	cmp	r3, #64	@ 0x40
 80067d0:	d007      	beq.n	80067e2 <HAL_SPI_Receive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067e0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80067f8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	08006e01 	.word	0x08006e01
 8006808:	08006db1 	.word	0x08006db1

0800680c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006820:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d00c      	beq.n	8006848 <HAL_SPI_TransmitReceive_IT+0x3c>
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006834:	d106      	bne.n	8006844 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d102      	bne.n	8006844 <HAL_SPI_TransmitReceive_IT+0x38>
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d001      	beq.n	8006848 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
 8006846:	e07d      	b.n	8006944 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_SPI_TransmitReceive_IT+0x4e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_SPI_TransmitReceive_IT+0x4e>
 8006854:	887b      	ldrh	r3, [r7, #2]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e072      	b.n	8006944 <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_SPI_TransmitReceive_IT+0x60>
 8006868:	2302      	movs	r3, #2
 800686a:	e06b      	b.n	8006944 <HAL_SPI_TransmitReceive_IT+0x138>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b04      	cmp	r3, #4
 800687e:	d003      	beq.n	8006888 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2205      	movs	r2, #5
 8006884:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	887a      	ldrh	r2, [r7, #2]
 8006898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	887a      	ldrh	r2, [r7, #2]
 800689e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	887a      	ldrh	r2, [r7, #2]
 80068aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	887a      	ldrh	r2, [r7, #2]
 80068b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068be:	d906      	bls.n	80068ce <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4a23      	ldr	r2, [pc, #140]	@ (8006950 <HAL_SPI_TransmitReceive_IT+0x144>)
 80068c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4a22      	ldr	r2, [pc, #136]	@ (8006954 <HAL_SPI_TransmitReceive_IT+0x148>)
 80068ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80068cc:	e005      	b.n	80068da <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a21      	ldr	r2, [pc, #132]	@ (8006958 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80068d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a21      	ldr	r2, [pc, #132]	@ (800695c <HAL_SPI_TransmitReceive_IT+0x150>)
 80068d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068e2:	d802      	bhi.n	80068ea <HAL_SPI_TransmitReceive_IT+0xde>
 80068e4:	887b      	ldrh	r3, [r7, #2]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d908      	bls.n	80068fc <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	e007      	b.n	800690c <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800690a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006916:	2b40      	cmp	r3, #64	@ 0x40
 8006918:	d007      	beq.n	800692a <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006928:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006940:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	08006ceb 	.word	0x08006ceb
 8006954:	08006d51 	.word	0x08006d51
 8006958:	08006b9b 	.word	0x08006b9b
 800695c:	08006c59 	.word	0x08006c59

08006960 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10e      	bne.n	80069a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
    return;
 800699e:	e0ce      	b.n	8006b3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <HAL_SPI_IRQHandler+0x5e>
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
    return;
 80069bc:	e0bf      	b.n	8006b3e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <HAL_SPI_IRQHandler+0x7e>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80b0 	beq.w	8006b3e <HAL_SPI_IRQHandler+0x1de>
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80aa 	beq.w	8006b3e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d023      	beq.n	8006a3c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d011      	beq.n	8006a24 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a04:	f043 0204 	orr.w	r2, r3, #4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	e00b      	b.n	8006a3c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a24:	2300      	movs	r3, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
        return;
 8006a3a:	e080      	b.n	8006b3e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d014      	beq.n	8006a70 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a4a:	f043 0201 	orr.w	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7e:	f043 0208 	orr.w	r2, r3, #8
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d04f      	beq.n	8006b3c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006aaa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d104      	bne.n	8006ac8 <HAL_SPI_IRQHandler+0x168>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d034      	beq.n	8006b32 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0203 	bic.w	r2, r2, #3
 8006ad6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d011      	beq.n	8006b04 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae4:	4a17      	ldr	r2, [pc, #92]	@ (8006b44 <HAL_SPI_IRQHandler+0x1e4>)
 8006ae6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fc ff9f 	bl	8003a30 <HAL_DMA_Abort_IT>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006afc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d016      	beq.n	8006b3a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b10:	4a0c      	ldr	r2, [pc, #48]	@ (8006b44 <HAL_SPI_IRQHandler+0x1e4>)
 8006b12:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fc ff89 	bl	8003a30 <HAL_DMA_Abort_IT>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006b30:	e003      	b.n	8006b3a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f812 	bl	8006b5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006b38:	e000      	b.n	8006b3c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006b3a:	bf00      	nop
    return;
 8006b3c:	bf00      	nop
  }
}
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	08006b71 	.word	0x08006b71

08006b48 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff ffe5 	bl	8006b5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d923      	bls.n	8006bf6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	b292      	uxth	r2, r2
 8006bba:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc0:	1c9a      	adds	r2, r3, #2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b02      	subs	r3, #2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d11f      	bne.n	8006c24 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bf2:	605a      	str	r2, [r3, #4]
 8006bf4:	e016      	b.n	8006c24 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f103 020c 	add.w	r2, r3, #12
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	7812      	ldrb	r2, [r2, #0]
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10f      	bne.n	8006c50 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c3e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fb00 	bl	8007250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d912      	bls.n	8006c90 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	881a      	ldrh	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	1c9a      	adds	r2, r3, #2
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b02      	subs	r3, #2
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c8e:	e012      	b.n	8006cb6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	7812      	ldrb	r2, [r2, #0]
 8006c9c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d110      	bne.n	8006ce2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fab7 	bl	8007250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	b292      	uxth	r2, r2
 8006cfe:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10f      	bne.n	8006d48 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d36:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa84 	bl	8007250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	881a      	ldrh	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d68:	1c9a      	adds	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d110      	bne.n	8006da8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d94:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa54 	bl	8007250 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f103 020c 	add.w	r2, r3, #12
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa6e 	bl	80072d4 <SPI_CloseRx_ISR>
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	b292      	uxth	r2, r2
 8006e14:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d102      	bne.n	8006e44 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa48 	bl	80072d4 <SPI_CloseRx_ISR>
  }
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	330c      	adds	r3, #12
 8006e5e:	7812      	ldrb	r2, [r2, #0]
 8006e60:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fa55 	bl	8007334 <SPI_CloseTx_ISR>
  }
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9e:	881a      	ldrh	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa33 	bl	8007334 <SPI_CloseTx_ISR>
  }
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ee8:	f7fc fb54 	bl	8003594 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ef8:	f7fc fb4c 	bl	8003594 <HAL_GetTick>
 8006efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006efe:	4b39      	ldr	r3, [pc, #228]	@ (8006fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	015b      	lsls	r3, r3, #5
 8006f04:	0d1b      	lsrs	r3, r3, #20
 8006f06:	69fa      	ldr	r2, [r7, #28]
 8006f08:	fb02 f303 	mul.w	r3, r2, r3
 8006f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f0e:	e054      	b.n	8006fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d050      	beq.n	8006fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f18:	f7fc fb3c 	bl	8003594 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d902      	bls.n	8006f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d13d      	bne.n	8006faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f46:	d111      	bne.n	8006f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f50:	d004      	beq.n	8006f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f5a:	d107      	bne.n	8006f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f74:	d10f      	bne.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e017      	b.n	8006fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	bf0c      	ite	eq
 8006fca:	2301      	moveq	r3, #1
 8006fcc:	2300      	movne	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d19b      	bne.n	8006f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000004 	.word	0x20000004

08006fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	@ 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ffa:	f7fc facb 	bl	8003594 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	4413      	add	r3, r2
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800700a:	f7fc fac3 	bl	8003594 <HAL_GetTick>
 800700e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007018:	4b3d      	ldr	r3, [pc, #244]	@ (8007110 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	00da      	lsls	r2, r3, #3
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	0d1b      	lsrs	r3, r3, #20
 8007028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702a:	fb02 f303 	mul.w	r3, r2, r3
 800702e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007030:	e060      	b.n	80070f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007038:	d107      	bne.n	800704a <SPI_WaitFifoStateUntilTimeout+0x62>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d104      	bne.n	800704a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007048:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d050      	beq.n	80070f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007052:	f7fc fa9f 	bl	8003594 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705e:	429a      	cmp	r2, r3
 8007060:	d902      	bls.n	8007068 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d13d      	bne.n	80070e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007076:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007080:	d111      	bne.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800708a:	d004      	beq.n	8007096 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007094:	d107      	bne.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ae:	d10f      	bne.n	80070d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e010      	b.n	8007106 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4013      	ands	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d196      	bne.n	8007032 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3728      	adds	r7, #40	@ 0x28
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000004 	.word	0x20000004

08007114 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007128:	d111      	bne.n	800714e <SPI_EndRxTransaction+0x3a>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007132:	d004      	beq.n	800713e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800713c:	d107      	bne.n	800714e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800714c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2200      	movs	r2, #0
 8007156:	2180      	movs	r1, #128	@ 0x80
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7ff febd 	bl	8006ed8 <SPI_WaitFlagStateUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e023      	b.n	80071bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800717c:	d11d      	bne.n	80071ba <SPI_EndRxTransaction+0xa6>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007186:	d004      	beq.n	8007192 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007190:	d113      	bne.n	80071ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2200      	movs	r2, #0
 800719a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff ff22 	bl	8006fe8 <SPI_WaitFifoStateUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ae:	f043 0220 	orr.w	r2, r3, #32
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e000      	b.n	80071bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ff03 	bl	8006fe8 <SPI_WaitFifoStateUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ec:	f043 0220 	orr.w	r2, r3, #32
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e027      	b.n	8007248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	2180      	movs	r1, #128	@ 0x80
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fe68 	bl	8006ed8 <SPI_WaitFlagStateUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e014      	b.n	8007248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7ff fedc 	bl	8006fe8 <SPI_WaitFifoStateUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723a:	f043 0220 	orr.w	r2, r3, #32
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e000      	b.n	8007248 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007258:	f7fc f99c 	bl	8003594 <HAL_GetTick>
 800725c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0220 	bic.w	r2, r2, #32
 800726c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	2164      	movs	r1, #100	@ 0x64
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ffa6 	bl	80071c4 <SPI_EndRxTxTransaction>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007282:	f043 0220 	orr.w	r2, r3, #32
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728e:	2b00      	cmp	r3, #0
 8007290:	d115      	bne.n	80072be <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b04      	cmp	r3, #4
 800729c:	d107      	bne.n	80072ae <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fb ffe4 	bl	8003274 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80072ac:	e00e      	b.n	80072cc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fc46 	bl	8006b48 <HAL_SPI_TxRxCpltCallback>
}
 80072bc:	e006      	b.n	80072cc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fc48 	bl	8006b5c <HAL_SPI_ErrorCallback>
}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072ea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80072ec:	f7fc f952 	bl	8003594 <HAL_GetTick>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	2164      	movs	r1, #100	@ 0x64
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff ff0c 	bl	8007114 <SPI_EndRxTransaction>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d005      	beq.n	800730e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007306:	f043 0220 	orr.w	r2, r3, #32
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fb ffa8 	bl	8003274 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007324:	e002      	b.n	800732c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff fc18 	bl	8006b5c <HAL_SPI_ErrorCallback>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800733c:	f7fc f92a 	bl	8003594 <HAL_GetTick>
 8007340:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007350:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	2164      	movs	r1, #100	@ 0x64
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff ff34 	bl	80071c4 <SPI_EndRxTxTransaction>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff fbdd 	bl	8006b5c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80073a2:	e002      	b.n	80073aa <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7fb ff79 	bl	800329c <HAL_SPI_TxCpltCallback>
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e049      	b.n	8007458 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7fa fa1f 	bl	800181c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2202      	movs	r2, #2
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f000 fb7b 	bl	8007aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e049      	b.n	8007506 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f841 	bl	800750e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f000 fb24 	bl	8007aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <HAL_TIM_PWM_Start+0x24>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b01      	cmp	r3, #1
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	e03c      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b04      	cmp	r3, #4
 800754c:	d109      	bne.n	8007562 <HAL_TIM_PWM_Start+0x3e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b01      	cmp	r3, #1
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
 8007560:	e02f      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b08      	cmp	r3, #8
 8007566:	d109      	bne.n	800757c <HAL_TIM_PWM_Start+0x58>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	e022      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b0c      	cmp	r3, #12
 8007580:	d109      	bne.n	8007596 <HAL_TIM_PWM_Start+0x72>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b01      	cmp	r3, #1
 800758c:	bf14      	ite	ne
 800758e:	2301      	movne	r3, #1
 8007590:	2300      	moveq	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	e015      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b10      	cmp	r3, #16
 800759a:	d109      	bne.n	80075b0 <HAL_TIM_PWM_Start+0x8c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	e008      	b.n	80075c2 <HAL_TIM_PWM_Start+0x9e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	bf14      	ite	ne
 80075bc:	2301      	movne	r3, #1
 80075be:	2300      	moveq	r3, #0
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e09c      	b.n	8007704 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d104      	bne.n	80075da <HAL_TIM_PWM_Start+0xb6>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075d8:	e023      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d104      	bne.n	80075ea <HAL_TIM_PWM_Start+0xc6>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075e8:	e01b      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d104      	bne.n	80075fa <HAL_TIM_PWM_Start+0xd6>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075f8:	e013      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b0c      	cmp	r3, #12
 80075fe:	d104      	bne.n	800760a <HAL_TIM_PWM_Start+0xe6>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007608:	e00b      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b10      	cmp	r3, #16
 800760e:	d104      	bne.n	800761a <HAL_TIM_PWM_Start+0xf6>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007618:	e003      	b.n	8007622 <HAL_TIM_PWM_Start+0xfe>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2201      	movs	r2, #1
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fe74 	bl	8008318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a35      	ldr	r2, [pc, #212]	@ (800770c <HAL_TIM_PWM_Start+0x1e8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <HAL_TIM_PWM_Start+0x13e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a34      	ldr	r2, [pc, #208]	@ (8007710 <HAL_TIM_PWM_Start+0x1ec>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d00e      	beq.n	8007662 <HAL_TIM_PWM_Start+0x13e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a32      	ldr	r2, [pc, #200]	@ (8007714 <HAL_TIM_PWM_Start+0x1f0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d009      	beq.n	8007662 <HAL_TIM_PWM_Start+0x13e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a31      	ldr	r2, [pc, #196]	@ (8007718 <HAL_TIM_PWM_Start+0x1f4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d004      	beq.n	8007662 <HAL_TIM_PWM_Start+0x13e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a2f      	ldr	r2, [pc, #188]	@ (800771c <HAL_TIM_PWM_Start+0x1f8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d101      	bne.n	8007666 <HAL_TIM_PWM_Start+0x142>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <HAL_TIM_PWM_Start+0x144>
 8007666:	2300      	movs	r3, #0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800767a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a22      	ldr	r2, [pc, #136]	@ (800770c <HAL_TIM_PWM_Start+0x1e8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d01d      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x19e>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768e:	d018      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x19e>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a22      	ldr	r2, [pc, #136]	@ (8007720 <HAL_TIM_PWM_Start+0x1fc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d013      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x19e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a21      	ldr	r2, [pc, #132]	@ (8007724 <HAL_TIM_PWM_Start+0x200>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00e      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x19e>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007728 <HAL_TIM_PWM_Start+0x204>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x19e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a17      	ldr	r2, [pc, #92]	@ (8007710 <HAL_TIM_PWM_Start+0x1ec>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <HAL_TIM_PWM_Start+0x19e>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a15      	ldr	r2, [pc, #84]	@ (8007714 <HAL_TIM_PWM_Start+0x1f0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d115      	bne.n	80076ee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	4b18      	ldr	r3, [pc, #96]	@ (800772c <HAL_TIM_PWM_Start+0x208>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b06      	cmp	r3, #6
 80076d2:	d015      	beq.n	8007700 <HAL_TIM_PWM_Start+0x1dc>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076da:	d011      	beq.n	8007700 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ec:	e008      	b.n	8007700 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0201 	orr.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e000      	b.n	8007702 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40012c00 	.word	0x40012c00
 8007710:	40013400 	.word	0x40013400
 8007714:	40014000 	.word	0x40014000
 8007718:	40014400 	.word	0x40014400
 800771c:	40014800 	.word	0x40014800
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	00010007 	.word	0x00010007

08007730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800774a:	2302      	movs	r3, #2
 800774c:	e0ff      	b.n	800794e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b14      	cmp	r3, #20
 800775a:	f200 80f0 	bhi.w	800793e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800775e:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	080077b9 	.word	0x080077b9
 8007768:	0800793f 	.word	0x0800793f
 800776c:	0800793f 	.word	0x0800793f
 8007770:	0800793f 	.word	0x0800793f
 8007774:	080077f9 	.word	0x080077f9
 8007778:	0800793f 	.word	0x0800793f
 800777c:	0800793f 	.word	0x0800793f
 8007780:	0800793f 	.word	0x0800793f
 8007784:	0800783b 	.word	0x0800783b
 8007788:	0800793f 	.word	0x0800793f
 800778c:	0800793f 	.word	0x0800793f
 8007790:	0800793f 	.word	0x0800793f
 8007794:	0800787b 	.word	0x0800787b
 8007798:	0800793f 	.word	0x0800793f
 800779c:	0800793f 	.word	0x0800793f
 80077a0:	0800793f 	.word	0x0800793f
 80077a4:	080078bd 	.word	0x080078bd
 80077a8:	0800793f 	.word	0x0800793f
 80077ac:	0800793f 	.word	0x0800793f
 80077b0:	0800793f 	.word	0x0800793f
 80077b4:	080078fd 	.word	0x080078fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fa3a 	bl	8007c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0208 	orr.w	r2, r2, #8
 80077d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0204 	bic.w	r2, r2, #4
 80077e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6999      	ldr	r1, [r3, #24]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	619a      	str	r2, [r3, #24]
      break;
 80077f6:	e0a5      	b.n	8007944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 faaa 	bl	8007d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	699a      	ldr	r2, [r3, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6999      	ldr	r1, [r3, #24]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	021a      	lsls	r2, r3, #8
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	619a      	str	r2, [r3, #24]
      break;
 8007838:	e084      	b.n	8007944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	4618      	mov	r0, r3
 8007842:	f000 fb13 	bl	8007e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0208 	orr.w	r2, r2, #8
 8007854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0204 	bic.w	r2, r2, #4
 8007864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69d9      	ldr	r1, [r3, #28]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	61da      	str	r2, [r3, #28]
      break;
 8007878:	e064      	b.n	8007944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fb7b 	bl	8007f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69da      	ldr	r2, [r3, #28]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69d9      	ldr	r1, [r3, #28]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	021a      	lsls	r2, r3, #8
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	61da      	str	r2, [r3, #28]
      break;
 80078ba:	e043      	b.n	8007944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68b9      	ldr	r1, [r7, #8]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fbc4 	bl	8008050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0208 	orr.w	r2, r2, #8
 80078d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0204 	bic.w	r2, r2, #4
 80078e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80078fa:	e023      	b.n	8007944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fc08 	bl	8008118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007916:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007926:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	021a      	lsls	r2, r3, #8
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800793c:	e002      	b.n	8007944 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]
      break;
 8007942:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop

08007958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_TIM_ConfigClockSource+0x1c>
 8007970:	2302      	movs	r3, #2
 8007972:	e0b6      	b.n	8007ae2 <HAL_TIM_ConfigClockSource+0x18a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007992:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800799e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b0:	d03e      	beq.n	8007a30 <HAL_TIM_ConfigClockSource+0xd8>
 80079b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b6:	f200 8087 	bhi.w	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079be:	f000 8086 	beq.w	8007ace <HAL_TIM_ConfigClockSource+0x176>
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c6:	d87f      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079c8:	2b70      	cmp	r3, #112	@ 0x70
 80079ca:	d01a      	beq.n	8007a02 <HAL_TIM_ConfigClockSource+0xaa>
 80079cc:	2b70      	cmp	r3, #112	@ 0x70
 80079ce:	d87b      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079d0:	2b60      	cmp	r3, #96	@ 0x60
 80079d2:	d050      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0x11e>
 80079d4:	2b60      	cmp	r3, #96	@ 0x60
 80079d6:	d877      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079d8:	2b50      	cmp	r3, #80	@ 0x50
 80079da:	d03c      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0xfe>
 80079dc:	2b50      	cmp	r3, #80	@ 0x50
 80079de:	d873      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079e0:	2b40      	cmp	r3, #64	@ 0x40
 80079e2:	d058      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x13e>
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	d86f      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079e8:	2b30      	cmp	r3, #48	@ 0x30
 80079ea:	d064      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x15e>
 80079ec:	2b30      	cmp	r3, #48	@ 0x30
 80079ee:	d86b      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d060      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x15e>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d867      	bhi.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d05c      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x15e>
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d05a      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x15e>
 8007a00:	e062      	b.n	8007ac8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a12:	f000 fc61 	bl	80082d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	609a      	str	r2, [r3, #8]
      break;
 8007a2e:	e04f      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a40:	f000 fc4a 	bl	80082d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a52:	609a      	str	r2, [r3, #8]
      break;
 8007a54:	e03c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	461a      	mov	r2, r3
 8007a64:	f000 fbbe 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2150      	movs	r1, #80	@ 0x50
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fc17 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007a74:	e02c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a82:	461a      	mov	r2, r3
 8007a84:	f000 fbdd 	bl	8008242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2160      	movs	r1, #96	@ 0x60
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fc07 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007a94:	e01c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f000 fb9e 	bl	80081e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2140      	movs	r1, #64	@ 0x40
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fbf7 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007ab4:	e00c      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f000 fbee 	bl	80082a2 <TIM_ITRx_SetConfig>
      break;
 8007ac6:	e003      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
      break;
 8007acc:	e000      	b.n	8007ad0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a46      	ldr	r2, [pc, #280]	@ (8007c18 <TIM_Base_SetConfig+0x12c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d013      	beq.n	8007b2c <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0a:	d00f      	beq.n	8007b2c <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a43      	ldr	r2, [pc, #268]	@ (8007c1c <TIM_Base_SetConfig+0x130>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00b      	beq.n	8007b2c <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a42      	ldr	r2, [pc, #264]	@ (8007c20 <TIM_Base_SetConfig+0x134>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d007      	beq.n	8007b2c <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a41      	ldr	r2, [pc, #260]	@ (8007c24 <TIM_Base_SetConfig+0x138>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d003      	beq.n	8007b2c <TIM_Base_SetConfig+0x40>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a40      	ldr	r2, [pc, #256]	@ (8007c28 <TIM_Base_SetConfig+0x13c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d108      	bne.n	8007b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a35      	ldr	r2, [pc, #212]	@ (8007c18 <TIM_Base_SetConfig+0x12c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01f      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4c:	d01b      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a32      	ldr	r2, [pc, #200]	@ (8007c1c <TIM_Base_SetConfig+0x130>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d017      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a31      	ldr	r2, [pc, #196]	@ (8007c20 <TIM_Base_SetConfig+0x134>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a30      	ldr	r2, [pc, #192]	@ (8007c24 <TIM_Base_SetConfig+0x138>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00f      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a2f      	ldr	r2, [pc, #188]	@ (8007c28 <TIM_Base_SetConfig+0x13c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00b      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a2e      	ldr	r2, [pc, #184]	@ (8007c2c <TIM_Base_SetConfig+0x140>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d007      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2d      	ldr	r2, [pc, #180]	@ (8007c30 <TIM_Base_SetConfig+0x144>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d003      	beq.n	8007b86 <TIM_Base_SetConfig+0x9a>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a2c      	ldr	r2, [pc, #176]	@ (8007c34 <TIM_Base_SetConfig+0x148>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d108      	bne.n	8007b98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a16      	ldr	r2, [pc, #88]	@ (8007c18 <TIM_Base_SetConfig+0x12c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00f      	beq.n	8007be4 <TIM_Base_SetConfig+0xf8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a18      	ldr	r2, [pc, #96]	@ (8007c28 <TIM_Base_SetConfig+0x13c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <TIM_Base_SetConfig+0xf8>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a17      	ldr	r2, [pc, #92]	@ (8007c2c <TIM_Base_SetConfig+0x140>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_Base_SetConfig+0xf8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a16      	ldr	r2, [pc, #88]	@ (8007c30 <TIM_Base_SetConfig+0x144>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_Base_SetConfig+0xf8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a15      	ldr	r2, [pc, #84]	@ (8007c34 <TIM_Base_SetConfig+0x148>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d103      	bne.n	8007bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d105      	bne.n	8007c0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f023 0201 	bic.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	611a      	str	r2, [r3, #16]
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40012c00 	.word	0x40012c00
 8007c1c:	40000400 	.word	0x40000400
 8007c20:	40000800 	.word	0x40000800
 8007c24:	40000c00 	.word	0x40000c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40014000 	.word	0x40014000
 8007c30:	40014400 	.word	0x40014400
 8007c34:	40014800 	.word	0x40014800

08007c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f023 0201 	bic.w	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 0302 	bic.w	r3, r3, #2
 8007c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a2c      	ldr	r2, [pc, #176]	@ (8007d44 <TIM_OC1_SetConfig+0x10c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00f      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x80>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007d48 <TIM_OC1_SetConfig+0x110>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x80>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d4c <TIM_OC1_SetConfig+0x114>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x80>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a29      	ldr	r2, [pc, #164]	@ (8007d50 <TIM_OC1_SetConfig+0x118>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_OC1_SetConfig+0x80>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a28      	ldr	r2, [pc, #160]	@ (8007d54 <TIM_OC1_SetConfig+0x11c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d10c      	bne.n	8007cd2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f023 0308 	bic.w	r3, r3, #8
 8007cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f023 0304 	bic.w	r3, r3, #4
 8007cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007d44 <TIM_OC1_SetConfig+0x10c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00f      	beq.n	8007cfa <TIM_OC1_SetConfig+0xc2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8007d48 <TIM_OC1_SetConfig+0x110>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00b      	beq.n	8007cfa <TIM_OC1_SetConfig+0xc2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a19      	ldr	r2, [pc, #100]	@ (8007d4c <TIM_OC1_SetConfig+0x114>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <TIM_OC1_SetConfig+0xc2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a18      	ldr	r2, [pc, #96]	@ (8007d50 <TIM_OC1_SetConfig+0x118>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_OC1_SetConfig+0xc2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a17      	ldr	r2, [pc, #92]	@ (8007d54 <TIM_OC1_SetConfig+0x11c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d111      	bne.n	8007d1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	621a      	str	r2, [r3, #32]
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	40012c00 	.word	0x40012c00
 8007d48:	40013400 	.word	0x40013400
 8007d4c:	40014000 	.word	0x40014000
 8007d50:	40014400 	.word	0x40014400
 8007d54:	40014800 	.word	0x40014800

08007d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	f023 0210 	bic.w	r2, r3, #16
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0320 	bic.w	r3, r3, #32
 8007da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a28      	ldr	r2, [pc, #160]	@ (8007e58 <TIM_OC2_SetConfig+0x100>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC2_SetConfig+0x6c>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a27      	ldr	r2, [pc, #156]	@ (8007e5c <TIM_OC2_SetConfig+0x104>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d10d      	bne.n	8007de0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a1d      	ldr	r2, [pc, #116]	@ (8007e58 <TIM_OC2_SetConfig+0x100>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d00f      	beq.n	8007e08 <TIM_OC2_SetConfig+0xb0>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a1c      	ldr	r2, [pc, #112]	@ (8007e5c <TIM_OC2_SetConfig+0x104>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00b      	beq.n	8007e08 <TIM_OC2_SetConfig+0xb0>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a1b      	ldr	r2, [pc, #108]	@ (8007e60 <TIM_OC2_SetConfig+0x108>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d007      	beq.n	8007e08 <TIM_OC2_SetConfig+0xb0>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8007e64 <TIM_OC2_SetConfig+0x10c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_OC2_SetConfig+0xb0>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a19      	ldr	r2, [pc, #100]	@ (8007e68 <TIM_OC2_SetConfig+0x110>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d113      	bne.n	8007e30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	621a      	str	r2, [r3, #32]
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	40012c00 	.word	0x40012c00
 8007e5c:	40013400 	.word	0x40013400
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40014400 	.word	0x40014400
 8007e68:	40014800 	.word	0x40014800

08007e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	021b      	lsls	r3, r3, #8
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a27      	ldr	r2, [pc, #156]	@ (8007f68 <TIM_OC3_SetConfig+0xfc>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d003      	beq.n	8007ed6 <TIM_OC3_SetConfig+0x6a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	@ (8007f6c <TIM_OC3_SetConfig+0x100>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d10d      	bne.n	8007ef2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f68 <TIM_OC3_SetConfig+0xfc>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00f      	beq.n	8007f1a <TIM_OC3_SetConfig+0xae>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f6c <TIM_OC3_SetConfig+0x100>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00b      	beq.n	8007f1a <TIM_OC3_SetConfig+0xae>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a1a      	ldr	r2, [pc, #104]	@ (8007f70 <TIM_OC3_SetConfig+0x104>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d007      	beq.n	8007f1a <TIM_OC3_SetConfig+0xae>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a19      	ldr	r2, [pc, #100]	@ (8007f74 <TIM_OC3_SetConfig+0x108>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d003      	beq.n	8007f1a <TIM_OC3_SetConfig+0xae>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a18      	ldr	r2, [pc, #96]	@ (8007f78 <TIM_OC3_SetConfig+0x10c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d113      	bne.n	8007f42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40013400 	.word	0x40013400
 8007f70:	40014000 	.word	0x40014000
 8007f74:	40014400 	.word	0x40014400
 8007f78:	40014800 	.word	0x40014800

08007f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a18      	ldr	r2, [pc, #96]	@ (800803c <TIM_OC4_SetConfig+0xc0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00f      	beq.n	8008000 <TIM_OC4_SetConfig+0x84>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <TIM_OC4_SetConfig+0xc4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00b      	beq.n	8008000 <TIM_OC4_SetConfig+0x84>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <TIM_OC4_SetConfig+0xc8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d007      	beq.n	8008000 <TIM_OC4_SetConfig+0x84>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <TIM_OC4_SetConfig+0xcc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d003      	beq.n	8008000 <TIM_OC4_SetConfig+0x84>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a14      	ldr	r2, [pc, #80]	@ (800804c <TIM_OC4_SetConfig+0xd0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d109      	bne.n	8008014 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	019b      	lsls	r3, r3, #6
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	621a      	str	r2, [r3, #32]
}
 800802e:	bf00      	nop
 8008030:	371c      	adds	r7, #28
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40012c00 	.word	0x40012c00
 8008040:	40013400 	.word	0x40013400
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800

08008050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800807e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008094:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a17      	ldr	r2, [pc, #92]	@ (8008104 <TIM_OC5_SetConfig+0xb4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00f      	beq.n	80080ca <TIM_OC5_SetConfig+0x7a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a16      	ldr	r2, [pc, #88]	@ (8008108 <TIM_OC5_SetConfig+0xb8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00b      	beq.n	80080ca <TIM_OC5_SetConfig+0x7a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a15      	ldr	r2, [pc, #84]	@ (800810c <TIM_OC5_SetConfig+0xbc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d007      	beq.n	80080ca <TIM_OC5_SetConfig+0x7a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a14      	ldr	r2, [pc, #80]	@ (8008110 <TIM_OC5_SetConfig+0xc0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d003      	beq.n	80080ca <TIM_OC5_SetConfig+0x7a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a13      	ldr	r2, [pc, #76]	@ (8008114 <TIM_OC5_SetConfig+0xc4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d109      	bne.n	80080de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	621a      	str	r2, [r3, #32]
}
 80080f8:	bf00      	nop
 80080fa:	371c      	adds	r7, #28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40013400 	.word	0x40013400
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800

08008118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800814a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800815e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	051b      	lsls	r3, r3, #20
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a18      	ldr	r2, [pc, #96]	@ (80081d0 <TIM_OC6_SetConfig+0xb8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00f      	beq.n	8008194 <TIM_OC6_SetConfig+0x7c>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a17      	ldr	r2, [pc, #92]	@ (80081d4 <TIM_OC6_SetConfig+0xbc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00b      	beq.n	8008194 <TIM_OC6_SetConfig+0x7c>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a16      	ldr	r2, [pc, #88]	@ (80081d8 <TIM_OC6_SetConfig+0xc0>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d007      	beq.n	8008194 <TIM_OC6_SetConfig+0x7c>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a15      	ldr	r2, [pc, #84]	@ (80081dc <TIM_OC6_SetConfig+0xc4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_OC6_SetConfig+0x7c>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a14      	ldr	r2, [pc, #80]	@ (80081e0 <TIM_OC6_SetConfig+0xc8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d109      	bne.n	80081a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800819a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	029b      	lsls	r3, r3, #10
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	621a      	str	r2, [r3, #32]
}
 80081c2:	bf00      	nop
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	40012c00 	.word	0x40012c00
 80081d4:	40013400 	.word	0x40013400
 80081d8:	40014000 	.word	0x40014000
 80081dc:	40014400 	.word	0x40014400
 80081e0:	40014800 	.word	0x40014800

080081e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f023 0201 	bic.w	r2, r3, #1
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800820e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 030a 	bic.w	r3, r3, #10
 8008220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008242:	b480      	push	{r7}
 8008244:	b087      	sub	sp, #28
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	f023 0210 	bic.w	r2, r3, #16
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800826c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800827e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	f043 0307 	orr.w	r3, r3, #7
 80082c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	609a      	str	r2, [r3, #8]
}
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4313      	orrs	r3, r2
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	609a      	str	r2, [r3, #8]
}
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	2201      	movs	r2, #1
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	43db      	mvns	r3, r3
 800833a:	401a      	ands	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f003 031f 	and.w	r3, r3, #31
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	fa01 f303 	lsl.w	r3, r1, r3
 8008350:	431a      	orrs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	621a      	str	r2, [r3, #32]
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
	...

08008364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008378:	2302      	movs	r3, #2
 800837a:	e068      	b.n	800844e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a2e      	ldr	r2, [pc, #184]	@ (800845c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d004      	beq.n	80083b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a2d      	ldr	r2, [pc, #180]	@ (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d108      	bne.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80083b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1e      	ldr	r2, [pc, #120]	@ (800845c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ee:	d018      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00e      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a18      	ldr	r2, [pc, #96]	@ (800846c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a13      	ldr	r2, [pc, #76]	@ (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10c      	bne.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	4313      	orrs	r3, r2
 8008432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40012c00 	.word	0x40012c00
 8008460:	40013400 	.word	0x40013400
 8008464:	40000400 	.word	0x40000400
 8008468:	40000800 	.word	0x40000800
 800846c:	40000c00 	.word	0x40000c00
 8008470:	40014000 	.word	0x40014000

08008474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e040      	b.n	8008508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7f9 fa4e 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2224      	movs	r2, #36	@ 0x24
 80084a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0201 	bic.w	r2, r2, #1
 80084b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fb6a 	bl	8008b94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f8af 	bl	8008624 <UART_SetConfig>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e01b      	b.n	8008508 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0201 	orr.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fbe9 	bl	8008cd8 <UART_CheckIdleState>
 8008506:	4603      	mov	r3, r0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	@ 0x28
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	4613      	mov	r3, r2
 800851e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008524:	2b20      	cmp	r3, #32
 8008526:	d177      	bne.n	8008618 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_UART_Transmit+0x24>
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e070      	b.n	800861a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2221      	movs	r2, #33	@ 0x21
 8008544:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008546:	f7fb f825 	bl	8003594 <HAL_GetTick>
 800854a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008564:	d108      	bne.n	8008578 <HAL_UART_Transmit+0x68>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d104      	bne.n	8008578 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	e003      	b.n	8008580 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008580:	e02f      	b.n	80085e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	2180      	movs	r1, #128	@ 0x80
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fc4b 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2220      	movs	r2, #32
 800859c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e03b      	b.n	800861a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	881a      	ldrh	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b4:	b292      	uxth	r2, r2
 80085b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	3302      	adds	r3, #2
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	e007      	b.n	80085d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	3301      	adds	r3, #1
 80085ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1c9      	bne.n	8008582 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2200      	movs	r2, #0
 80085f6:	2140      	movs	r1, #64	@ 0x40
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 fc15 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e005      	b.n	800861a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2220      	movs	r2, #32
 8008612:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e000      	b.n	800861a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008628:	b08a      	sub	sp, #40	@ 0x28
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	431a      	orrs	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	431a      	orrs	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	4313      	orrs	r3, r2
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4ba4      	ldr	r3, [pc, #656]	@ (80088e4 <UART_SetConfig+0x2c0>)
 8008654:	4013      	ands	r3, r2
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	6812      	ldr	r2, [r2, #0]
 800865a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800865c:	430b      	orrs	r3, r1
 800865e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a99      	ldr	r2, [pc, #612]	@ (80088e8 <UART_SetConfig+0x2c4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d004      	beq.n	8008690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800868c:	4313      	orrs	r3, r2
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a0:	430a      	orrs	r2, r1
 80086a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a90      	ldr	r2, [pc, #576]	@ (80088ec <UART_SetConfig+0x2c8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d126      	bne.n	80086fc <UART_SetConfig+0xd8>
 80086ae:	4b90      	ldr	r3, [pc, #576]	@ (80088f0 <UART_SetConfig+0x2cc>)
 80086b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d81b      	bhi.n	80086f4 <UART_SetConfig+0xd0>
 80086bc:	a201      	add	r2, pc, #4	@ (adr r2, 80086c4 <UART_SetConfig+0xa0>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086d5 	.word	0x080086d5
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	080086dd 	.word	0x080086dd
 80086d0:	080086ed 	.word	0x080086ed
 80086d4:	2301      	movs	r3, #1
 80086d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086da:	e116      	b.n	800890a <UART_SetConfig+0x2e6>
 80086dc:	2302      	movs	r3, #2
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e2:	e112      	b.n	800890a <UART_SetConfig+0x2e6>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ea:	e10e      	b.n	800890a <UART_SetConfig+0x2e6>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f2:	e10a      	b.n	800890a <UART_SetConfig+0x2e6>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fa:	e106      	b.n	800890a <UART_SetConfig+0x2e6>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a7c      	ldr	r2, [pc, #496]	@ (80088f4 <UART_SetConfig+0x2d0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d138      	bne.n	8008778 <UART_SetConfig+0x154>
 8008706:	4b7a      	ldr	r3, [pc, #488]	@ (80088f0 <UART_SetConfig+0x2cc>)
 8008708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800870c:	f003 030c 	and.w	r3, r3, #12
 8008710:	2b0c      	cmp	r3, #12
 8008712:	d82d      	bhi.n	8008770 <UART_SetConfig+0x14c>
 8008714:	a201      	add	r2, pc, #4	@ (adr r2, 800871c <UART_SetConfig+0xf8>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	08008751 	.word	0x08008751
 8008720:	08008771 	.word	0x08008771
 8008724:	08008771 	.word	0x08008771
 8008728:	08008771 	.word	0x08008771
 800872c:	08008761 	.word	0x08008761
 8008730:	08008771 	.word	0x08008771
 8008734:	08008771 	.word	0x08008771
 8008738:	08008771 	.word	0x08008771
 800873c:	08008759 	.word	0x08008759
 8008740:	08008771 	.word	0x08008771
 8008744:	08008771 	.word	0x08008771
 8008748:	08008771 	.word	0x08008771
 800874c:	08008769 	.word	0x08008769
 8008750:	2300      	movs	r3, #0
 8008752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008756:	e0d8      	b.n	800890a <UART_SetConfig+0x2e6>
 8008758:	2302      	movs	r3, #2
 800875a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800875e:	e0d4      	b.n	800890a <UART_SetConfig+0x2e6>
 8008760:	2304      	movs	r3, #4
 8008762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008766:	e0d0      	b.n	800890a <UART_SetConfig+0x2e6>
 8008768:	2308      	movs	r3, #8
 800876a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800876e:	e0cc      	b.n	800890a <UART_SetConfig+0x2e6>
 8008770:	2310      	movs	r3, #16
 8008772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008776:	e0c8      	b.n	800890a <UART_SetConfig+0x2e6>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a5e      	ldr	r2, [pc, #376]	@ (80088f8 <UART_SetConfig+0x2d4>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d125      	bne.n	80087ce <UART_SetConfig+0x1aa>
 8008782:	4b5b      	ldr	r3, [pc, #364]	@ (80088f0 <UART_SetConfig+0x2cc>)
 8008784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008788:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800878c:	2b30      	cmp	r3, #48	@ 0x30
 800878e:	d016      	beq.n	80087be <UART_SetConfig+0x19a>
 8008790:	2b30      	cmp	r3, #48	@ 0x30
 8008792:	d818      	bhi.n	80087c6 <UART_SetConfig+0x1a2>
 8008794:	2b20      	cmp	r3, #32
 8008796:	d00a      	beq.n	80087ae <UART_SetConfig+0x18a>
 8008798:	2b20      	cmp	r3, #32
 800879a:	d814      	bhi.n	80087c6 <UART_SetConfig+0x1a2>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <UART_SetConfig+0x182>
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d008      	beq.n	80087b6 <UART_SetConfig+0x192>
 80087a4:	e00f      	b.n	80087c6 <UART_SetConfig+0x1a2>
 80087a6:	2300      	movs	r3, #0
 80087a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ac:	e0ad      	b.n	800890a <UART_SetConfig+0x2e6>
 80087ae:	2302      	movs	r3, #2
 80087b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087b4:	e0a9      	b.n	800890a <UART_SetConfig+0x2e6>
 80087b6:	2304      	movs	r3, #4
 80087b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087bc:	e0a5      	b.n	800890a <UART_SetConfig+0x2e6>
 80087be:	2308      	movs	r3, #8
 80087c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087c4:	e0a1      	b.n	800890a <UART_SetConfig+0x2e6>
 80087c6:	2310      	movs	r3, #16
 80087c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087cc:	e09d      	b.n	800890a <UART_SetConfig+0x2e6>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a4a      	ldr	r2, [pc, #296]	@ (80088fc <UART_SetConfig+0x2d8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d125      	bne.n	8008824 <UART_SetConfig+0x200>
 80087d8:	4b45      	ldr	r3, [pc, #276]	@ (80088f0 <UART_SetConfig+0x2cc>)
 80087da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80087e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80087e4:	d016      	beq.n	8008814 <UART_SetConfig+0x1f0>
 80087e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80087e8:	d818      	bhi.n	800881c <UART_SetConfig+0x1f8>
 80087ea:	2b80      	cmp	r3, #128	@ 0x80
 80087ec:	d00a      	beq.n	8008804 <UART_SetConfig+0x1e0>
 80087ee:	2b80      	cmp	r3, #128	@ 0x80
 80087f0:	d814      	bhi.n	800881c <UART_SetConfig+0x1f8>
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <UART_SetConfig+0x1d8>
 80087f6:	2b40      	cmp	r3, #64	@ 0x40
 80087f8:	d008      	beq.n	800880c <UART_SetConfig+0x1e8>
 80087fa:	e00f      	b.n	800881c <UART_SetConfig+0x1f8>
 80087fc:	2300      	movs	r3, #0
 80087fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008802:	e082      	b.n	800890a <UART_SetConfig+0x2e6>
 8008804:	2302      	movs	r3, #2
 8008806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800880a:	e07e      	b.n	800890a <UART_SetConfig+0x2e6>
 800880c:	2304      	movs	r3, #4
 800880e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008812:	e07a      	b.n	800890a <UART_SetConfig+0x2e6>
 8008814:	2308      	movs	r3, #8
 8008816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800881a:	e076      	b.n	800890a <UART_SetConfig+0x2e6>
 800881c:	2310      	movs	r3, #16
 800881e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008822:	e072      	b.n	800890a <UART_SetConfig+0x2e6>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a35      	ldr	r2, [pc, #212]	@ (8008900 <UART_SetConfig+0x2dc>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d12a      	bne.n	8008884 <UART_SetConfig+0x260>
 800882e:	4b30      	ldr	r3, [pc, #192]	@ (80088f0 <UART_SetConfig+0x2cc>)
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008834:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800883c:	d01a      	beq.n	8008874 <UART_SetConfig+0x250>
 800883e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008842:	d81b      	bhi.n	800887c <UART_SetConfig+0x258>
 8008844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008848:	d00c      	beq.n	8008864 <UART_SetConfig+0x240>
 800884a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800884e:	d815      	bhi.n	800887c <UART_SetConfig+0x258>
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <UART_SetConfig+0x238>
 8008854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008858:	d008      	beq.n	800886c <UART_SetConfig+0x248>
 800885a:	e00f      	b.n	800887c <UART_SetConfig+0x258>
 800885c:	2300      	movs	r3, #0
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008862:	e052      	b.n	800890a <UART_SetConfig+0x2e6>
 8008864:	2302      	movs	r3, #2
 8008866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800886a:	e04e      	b.n	800890a <UART_SetConfig+0x2e6>
 800886c:	2304      	movs	r3, #4
 800886e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008872:	e04a      	b.n	800890a <UART_SetConfig+0x2e6>
 8008874:	2308      	movs	r3, #8
 8008876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800887a:	e046      	b.n	800890a <UART_SetConfig+0x2e6>
 800887c:	2310      	movs	r3, #16
 800887e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008882:	e042      	b.n	800890a <UART_SetConfig+0x2e6>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a17      	ldr	r2, [pc, #92]	@ (80088e8 <UART_SetConfig+0x2c4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d13a      	bne.n	8008904 <UART_SetConfig+0x2e0>
 800888e:	4b18      	ldr	r3, [pc, #96]	@ (80088f0 <UART_SetConfig+0x2cc>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008894:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800889c:	d01a      	beq.n	80088d4 <UART_SetConfig+0x2b0>
 800889e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088a2:	d81b      	bhi.n	80088dc <UART_SetConfig+0x2b8>
 80088a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088a8:	d00c      	beq.n	80088c4 <UART_SetConfig+0x2a0>
 80088aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088ae:	d815      	bhi.n	80088dc <UART_SetConfig+0x2b8>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d003      	beq.n	80088bc <UART_SetConfig+0x298>
 80088b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b8:	d008      	beq.n	80088cc <UART_SetConfig+0x2a8>
 80088ba:	e00f      	b.n	80088dc <UART_SetConfig+0x2b8>
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088c2:	e022      	b.n	800890a <UART_SetConfig+0x2e6>
 80088c4:	2302      	movs	r3, #2
 80088c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ca:	e01e      	b.n	800890a <UART_SetConfig+0x2e6>
 80088cc:	2304      	movs	r3, #4
 80088ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088d2:	e01a      	b.n	800890a <UART_SetConfig+0x2e6>
 80088d4:	2308      	movs	r3, #8
 80088d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088da:	e016      	b.n	800890a <UART_SetConfig+0x2e6>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088e2:	e012      	b.n	800890a <UART_SetConfig+0x2e6>
 80088e4:	efff69f3 	.word	0xefff69f3
 80088e8:	40008000 	.word	0x40008000
 80088ec:	40013800 	.word	0x40013800
 80088f0:	40021000 	.word	0x40021000
 80088f4:	40004400 	.word	0x40004400
 80088f8:	40004800 	.word	0x40004800
 80088fc:	40004c00 	.word	0x40004c00
 8008900:	40005000 	.word	0x40005000
 8008904:	2310      	movs	r3, #16
 8008906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a9f      	ldr	r2, [pc, #636]	@ (8008b8c <UART_SetConfig+0x568>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d17a      	bne.n	8008a0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008914:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008918:	2b08      	cmp	r3, #8
 800891a:	d824      	bhi.n	8008966 <UART_SetConfig+0x342>
 800891c:	a201      	add	r2, pc, #4	@ (adr r2, 8008924 <UART_SetConfig+0x300>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	08008949 	.word	0x08008949
 8008928:	08008967 	.word	0x08008967
 800892c:	08008951 	.word	0x08008951
 8008930:	08008967 	.word	0x08008967
 8008934:	08008957 	.word	0x08008957
 8008938:	08008967 	.word	0x08008967
 800893c:	08008967 	.word	0x08008967
 8008940:	08008967 	.word	0x08008967
 8008944:	0800895f 	.word	0x0800895f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008948:	f7fc fcb4 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 800894c:	61f8      	str	r0, [r7, #28]
        break;
 800894e:	e010      	b.n	8008972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008950:	4b8f      	ldr	r3, [pc, #572]	@ (8008b90 <UART_SetConfig+0x56c>)
 8008952:	61fb      	str	r3, [r7, #28]
        break;
 8008954:	e00d      	b.n	8008972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008956:	f7fc fc15 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 800895a:	61f8      	str	r0, [r7, #28]
        break;
 800895c:	e009      	b.n	8008972 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800895e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008962:	61fb      	str	r3, [r7, #28]
        break;
 8008964:	e005      	b.n	8008972 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008970:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80fb 	beq.w	8008b70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	4413      	add	r3, r2
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	429a      	cmp	r2, r3
 8008988:	d305      	bcc.n	8008996 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	429a      	cmp	r2, r3
 8008994:	d903      	bls.n	800899e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800899c:	e0e8      	b.n	8008b70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	2200      	movs	r2, #0
 80089a2:	461c      	mov	r4, r3
 80089a4:	4615      	mov	r5, r2
 80089a6:	f04f 0200 	mov.w	r2, #0
 80089aa:	f04f 0300 	mov.w	r3, #0
 80089ae:	022b      	lsls	r3, r5, #8
 80089b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80089b4:	0222      	lsls	r2, r4, #8
 80089b6:	68f9      	ldr	r1, [r7, #12]
 80089b8:	6849      	ldr	r1, [r1, #4]
 80089ba:	0849      	lsrs	r1, r1, #1
 80089bc:	2000      	movs	r0, #0
 80089be:	4688      	mov	r8, r1
 80089c0:	4681      	mov	r9, r0
 80089c2:	eb12 0a08 	adds.w	sl, r2, r8
 80089c6:	eb43 0b09 	adc.w	fp, r3, r9
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d8:	4650      	mov	r0, sl
 80089da:	4659      	mov	r1, fp
 80089dc:	f7f7 fc60 	bl	80002a0 <__aeabi_uldivmod>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4613      	mov	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ee:	d308      	bcc.n	8008a02 <UART_SetConfig+0x3de>
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f6:	d204      	bcs.n	8008a02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	60da      	str	r2, [r3, #12]
 8008a00:	e0b6      	b.n	8008b70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a08:	e0b2      	b.n	8008b70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a12:	d15e      	bne.n	8008ad2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008a14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d828      	bhi.n	8008a6e <UART_SetConfig+0x44a>
 8008a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a24 <UART_SetConfig+0x400>)
 8008a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a22:	bf00      	nop
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a51 	.word	0x08008a51
 8008a2c:	08008a59 	.word	0x08008a59
 8008a30:	08008a6f 	.word	0x08008a6f
 8008a34:	08008a5f 	.word	0x08008a5f
 8008a38:	08008a6f 	.word	0x08008a6f
 8008a3c:	08008a6f 	.word	0x08008a6f
 8008a40:	08008a6f 	.word	0x08008a6f
 8008a44:	08008a67 	.word	0x08008a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a48:	f7fc fc34 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8008a4c:	61f8      	str	r0, [r7, #28]
        break;
 8008a4e:	e014      	b.n	8008a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a50:	f7fc fc46 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8008a54:	61f8      	str	r0, [r7, #28]
        break;
 8008a56:	e010      	b.n	8008a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a58:	4b4d      	ldr	r3, [pc, #308]	@ (8008b90 <UART_SetConfig+0x56c>)
 8008a5a:	61fb      	str	r3, [r7, #28]
        break;
 8008a5c:	e00d      	b.n	8008a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a5e:	f7fc fb91 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8008a62:	61f8      	str	r0, [r7, #28]
        break;
 8008a64:	e009      	b.n	8008a7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a6a:	61fb      	str	r3, [r7, #28]
        break;
 8008a6c:	e005      	b.n	8008a7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d077      	beq.n	8008b70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	005a      	lsls	r2, r3, #1
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	441a      	add	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	2b0f      	cmp	r3, #15
 8008a9a:	d916      	bls.n	8008aca <UART_SetConfig+0x4a6>
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aa2:	d212      	bcs.n	8008aca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	f023 030f 	bic.w	r3, r3, #15
 8008aac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	085b      	lsrs	r3, r3, #1
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	8afb      	ldrh	r3, [r7, #22]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	8afa      	ldrh	r2, [r7, #22]
 8008ac6:	60da      	str	r2, [r3, #12]
 8008ac8:	e052      	b.n	8008b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008ad0:	e04e      	b.n	8008b70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ad6:	2b08      	cmp	r3, #8
 8008ad8:	d827      	bhi.n	8008b2a <UART_SetConfig+0x506>
 8008ada:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae0 <UART_SetConfig+0x4bc>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b0d 	.word	0x08008b0d
 8008ae8:	08008b15 	.word	0x08008b15
 8008aec:	08008b2b 	.word	0x08008b2b
 8008af0:	08008b1b 	.word	0x08008b1b
 8008af4:	08008b2b 	.word	0x08008b2b
 8008af8:	08008b2b 	.word	0x08008b2b
 8008afc:	08008b2b 	.word	0x08008b2b
 8008b00:	08008b23 	.word	0x08008b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b04:	f7fc fbd6 	bl	80052b4 <HAL_RCC_GetPCLK1Freq>
 8008b08:	61f8      	str	r0, [r7, #28]
        break;
 8008b0a:	e014      	b.n	8008b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b0c:	f7fc fbe8 	bl	80052e0 <HAL_RCC_GetPCLK2Freq>
 8008b10:	61f8      	str	r0, [r7, #28]
        break;
 8008b12:	e010      	b.n	8008b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b14:	4b1e      	ldr	r3, [pc, #120]	@ (8008b90 <UART_SetConfig+0x56c>)
 8008b16:	61fb      	str	r3, [r7, #28]
        break;
 8008b18:	e00d      	b.n	8008b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b1a:	f7fc fb33 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8008b1e:	61f8      	str	r0, [r7, #28]
        break;
 8008b20:	e009      	b.n	8008b36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b26:	61fb      	str	r3, [r7, #28]
        break;
 8008b28:	e005      	b.n	8008b36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008b34:	bf00      	nop
    }

    if (pclk != 0U)
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d019      	beq.n	8008b70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	085a      	lsrs	r2, r3, #1
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	441a      	add	r2, r3
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b0f      	cmp	r3, #15
 8008b54:	d909      	bls.n	8008b6a <UART_SetConfig+0x546>
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b5c:	d205      	bcs.n	8008b6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60da      	str	r2, [r3, #12]
 8008b68:	e002      	b.n	8008b70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008b7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3728      	adds	r7, #40	@ 0x28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b8a:	bf00      	nop
 8008b8c:	40008000 	.word	0x40008000
 8008b90:	00f42400 	.word	0x00f42400

08008b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	f003 0310 	and.w	r3, r3, #16
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00a      	beq.n	8008c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01a      	beq.n	8008caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c92:	d10a      	bne.n	8008caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b098      	sub	sp, #96	@ 0x60
 8008cdc:	af02      	add	r7, sp, #8
 8008cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ce8:	f7fa fc54 	bl	8003594 <HAL_GetTick>
 8008cec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0308 	and.w	r3, r3, #8
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d12e      	bne.n	8008d5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d04:	2200      	movs	r2, #0
 8008d06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f88c 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d021      	beq.n	8008d5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e6      	bne.n	8008d16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e062      	b.n	8008e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d149      	bne.n	8008dfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d70:	2200      	movs	r2, #0
 8008d72:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f856 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d03c      	beq.n	8008dfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e6      	bne.n	8008d82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	e853 3f00 	ldrex	r3, [r3]
 8008dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0301 	bic.w	r3, r3, #1
 8008dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dd4:	61fa      	str	r2, [r7, #28]
 8008dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	69b9      	ldr	r1, [r7, #24]
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	617b      	str	r3, [r7, #20]
   return(result);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e5      	bne.n	8008db4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e011      	b.n	8008e20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3758      	adds	r7, #88	@ 0x58
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e38:	e04f      	b.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	d04b      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e42:	f7fa fba7 	bl	8003594 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d302      	bcc.n	8008e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e04e      	b.n	8008efa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d037      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b80      	cmp	r3, #128	@ 0x80
 8008e6e:	d034      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b40      	cmp	r3, #64	@ 0x40
 8008e74:	d031      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d110      	bne.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2208      	movs	r2, #8
 8008e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f838 	bl	8008f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2208      	movs	r2, #8
 8008e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e029      	b.n	8008efa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eb4:	d111      	bne.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f81e 	bl	8008f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e00f      	b.n	8008efa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69da      	ldr	r2, [r3, #28]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	bf0c      	ite	eq
 8008eea:	2301      	moveq	r3, #1
 8008eec:	2300      	movne	r3, #0
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d0a0      	beq.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b095      	sub	sp, #84	@ 0x54
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f023 0301 	bic.w	r3, r3, #1
 8008f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e5      	bne.n	8008f3c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d118      	bne.n	8008faa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f023 0310 	bic.w	r3, r3, #16
 8008f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6979      	ldr	r1, [r7, #20]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e6      	bne.n	8008f78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008fbe:	bf00      	nop
 8008fc0:	3754      	adds	r7, #84	@ 0x54
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fca:	b084      	sub	sp, #16
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	f107 001c 	add.w	r0, r7, #28
 8008fd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fa69 	bl	80094c0 <USB_CoreReset>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008ff2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	@ 0x38
 8009006:	e005      	b.n	8009014 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009014:	7bfb      	ldrb	r3, [r7, #15]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009020:	b004      	add	sp, #16
 8009022:	4770      	bx	lr

08009024 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f023 0201 	bic.w	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d115      	bne.n	8009094 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009074:	200a      	movs	r0, #10
 8009076:	f7fa fa99 	bl	80035ac <HAL_Delay>
      ms += 10U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	330a      	adds	r3, #10
 800907e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fa0f 	bl	80094a4 <USB_GetMode>
 8009086:	4603      	mov	r3, r0
 8009088:	2b01      	cmp	r3, #1
 800908a:	d01e      	beq.n	80090ca <USB_SetCurrentMode+0x84>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009090:	d9f0      	bls.n	8009074 <USB_SetCurrentMode+0x2e>
 8009092:	e01a      	b.n	80090ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d115      	bne.n	80090c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090a6:	200a      	movs	r0, #10
 80090a8:	f7fa fa80 	bl	80035ac <HAL_Delay>
      ms += 10U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	330a      	adds	r3, #10
 80090b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9f6 	bl	80094a4 <USB_GetMode>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <USB_SetCurrentMode+0x84>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80090c2:	d9f0      	bls.n	80090a6 <USB_SetCurrentMode+0x60>
 80090c4:	e001      	b.n	80090ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e005      	b.n	80090d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80090ce:	d101      	bne.n	80090d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e000      	b.n	80090d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090e0:	b084      	sub	sp, #16
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b086      	sub	sp, #24
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80090ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	e009      	b.n	8009114 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	3340      	adds	r3, #64	@ 0x40
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	2200      	movs	r2, #0
 800910c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3301      	adds	r3, #1
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b0e      	cmp	r3, #14
 8009118:	d9f2      	bls.n	8009100 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800911a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800911e:	2b00      	cmp	r3, #0
 8009120:	d11c      	bne.n	800915c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009130:	f043 0302 	orr.w	r3, r3, #2
 8009134:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e005      	b.n	8009168 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800916e:	461a      	mov	r2, r3
 8009170:	2300      	movs	r3, #0
 8009172:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009174:	2103      	movs	r1, #3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f95a 	bl	8009430 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800917c:	2110      	movs	r1, #16
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8f6 	bl	8009370 <USB_FlushTxFifo>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f920 	bl	80093d4 <USB_FlushRxFifo>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a4:	461a      	mov	r2, r3
 80091a6:	2300      	movs	r3, #0
 80091a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091b0:	461a      	mov	r2, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091bc:	461a      	mov	r2, r3
 80091be:	2300      	movs	r3, #0
 80091c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	e043      	b.n	8009250 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091de:	d118      	bne.n	8009212 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10a      	bne.n	80091fc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f2:	461a      	mov	r2, r3
 80091f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e013      	b.n	8009224 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009208:	461a      	mov	r2, r3
 800920a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e008      	b.n	8009224 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921e:	461a      	mov	r2, r3
 8009220:	2300      	movs	r3, #0
 8009222:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009230:	461a      	mov	r2, r3
 8009232:	2300      	movs	r3, #0
 8009234:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009242:	461a      	mov	r2, r3
 8009244:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	3301      	adds	r3, #1
 800924e:	613b      	str	r3, [r7, #16]
 8009250:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009254:	461a      	mov	r2, r3
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	4293      	cmp	r3, r2
 800925a:	d3b5      	bcc.n	80091c8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800925c:	2300      	movs	r3, #0
 800925e:	613b      	str	r3, [r7, #16]
 8009260:	e043      	b.n	80092ea <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009274:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009278:	d118      	bne.n	80092ac <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10a      	bne.n	8009296 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800928c:	461a      	mov	r2, r3
 800928e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	e013      	b.n	80092be <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	461a      	mov	r2, r3
 80092a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	e008      	b.n	80092be <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b8:	461a      	mov	r2, r3
 80092ba:	2300      	movs	r3, #0
 80092bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ca:	461a      	mov	r2, r3
 80092cc:	2300      	movs	r3, #0
 80092ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092dc:	461a      	mov	r2, r3
 80092de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3301      	adds	r3, #1
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092ee:	461a      	mov	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d3b5      	bcc.n	8009262 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009308:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009316:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	f043 0210 	orr.w	r2, r3, #16
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	4b10      	ldr	r3, [pc, #64]	@ (800936c <USB_DevInit+0x28c>)
 800932a:	4313      	orrs	r3, r2
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009330:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	f043 0208 	orr.w	r2, r3, #8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009344:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009348:	2b01      	cmp	r3, #1
 800934a:	d107      	bne.n	800935c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009354:	f043 0304 	orr.w	r3, r3, #4
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009368:	b004      	add	sp, #16
 800936a:	4770      	bx	lr
 800936c:	803c3800 	.word	0x803c3800

08009370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800938a:	d901      	bls.n	8009390 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e01b      	b.n	80093c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	daf2      	bge.n	800937e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	019b      	lsls	r3, r3, #6
 80093a0:	f043 0220 	orr.w	r2, r3, #32
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3301      	adds	r3, #1
 80093ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093b4:	d901      	bls.n	80093ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e006      	b.n	80093c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b20      	cmp	r3, #32
 80093c4:	d0f0      	beq.n	80093a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093ec:	d901      	bls.n	80093f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e018      	b.n	8009424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	daf2      	bge.n	80093e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2210      	movs	r2, #16
 8009402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009410:	d901      	bls.n	8009416 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e006      	b.n	8009424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	2b10      	cmp	r3, #16
 8009420:	d0f0      	beq.n	8009404 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	68f9      	ldr	r1, [r7, #12]
 800944c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009450:	4313      	orrs	r3, r2
 8009452:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009462:	b480      	push	{r7}
 8009464:	b085      	sub	sp, #20
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009490:	f043 0302 	orr.w	r3, r3, #2
 8009494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	f003 0301 	and.w	r3, r3, #1
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3301      	adds	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094d8:	d901      	bls.n	80094de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e01b      	b.n	8009516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	daf2      	bge.n	80094cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f043 0201 	orr.w	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3301      	adds	r3, #1
 80094fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009502:	d901      	bls.n	8009508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e006      	b.n	8009516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b01      	cmp	r3, #1
 8009512:	d0f0      	beq.n	80094f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
	...

08009524 <std>:
 8009524:	2300      	movs	r3, #0
 8009526:	b510      	push	{r4, lr}
 8009528:	4604      	mov	r4, r0
 800952a:	e9c0 3300 	strd	r3, r3, [r0]
 800952e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009532:	6083      	str	r3, [r0, #8]
 8009534:	8181      	strh	r1, [r0, #12]
 8009536:	6643      	str	r3, [r0, #100]	@ 0x64
 8009538:	81c2      	strh	r2, [r0, #14]
 800953a:	6183      	str	r3, [r0, #24]
 800953c:	4619      	mov	r1, r3
 800953e:	2208      	movs	r2, #8
 8009540:	305c      	adds	r0, #92	@ 0x5c
 8009542:	f000 fa55 	bl	80099f0 <memset>
 8009546:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <std+0x58>)
 8009548:	6263      	str	r3, [r4, #36]	@ 0x24
 800954a:	4b0d      	ldr	r3, [pc, #52]	@ (8009580 <std+0x5c>)
 800954c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800954e:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <std+0x60>)
 8009550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009552:	4b0d      	ldr	r3, [pc, #52]	@ (8009588 <std+0x64>)
 8009554:	6323      	str	r3, [r4, #48]	@ 0x30
 8009556:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <std+0x68>)
 8009558:	6224      	str	r4, [r4, #32]
 800955a:	429c      	cmp	r4, r3
 800955c:	d006      	beq.n	800956c <std+0x48>
 800955e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009562:	4294      	cmp	r4, r2
 8009564:	d002      	beq.n	800956c <std+0x48>
 8009566:	33d0      	adds	r3, #208	@ 0xd0
 8009568:	429c      	cmp	r4, r3
 800956a:	d105      	bne.n	8009578 <std+0x54>
 800956c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	f000 bb4c 	b.w	8009c10 <__retarget_lock_init_recursive>
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	0800981d 	.word	0x0800981d
 8009580:	08009843 	.word	0x08009843
 8009584:	0800987b 	.word	0x0800987b
 8009588:	0800989f 	.word	0x0800989f
 800958c:	2000145c 	.word	0x2000145c

08009590 <stdio_exit_handler>:
 8009590:	4a02      	ldr	r2, [pc, #8]	@ (800959c <stdio_exit_handler+0xc>)
 8009592:	4903      	ldr	r1, [pc, #12]	@ (80095a0 <stdio_exit_handler+0x10>)
 8009594:	4803      	ldr	r0, [pc, #12]	@ (80095a4 <stdio_exit_handler+0x14>)
 8009596:	f000 b869 	b.w	800966c <_fwalk_sglue>
 800959a:	bf00      	nop
 800959c:	20000010 	.word	0x20000010
 80095a0:	0800adfd 	.word	0x0800adfd
 80095a4:	20000020 	.word	0x20000020

080095a8 <cleanup_stdio>:
 80095a8:	6841      	ldr	r1, [r0, #4]
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <cleanup_stdio+0x34>)
 80095ac:	4299      	cmp	r1, r3
 80095ae:	b510      	push	{r4, lr}
 80095b0:	4604      	mov	r4, r0
 80095b2:	d001      	beq.n	80095b8 <cleanup_stdio+0x10>
 80095b4:	f001 fc22 	bl	800adfc <_fflush_r>
 80095b8:	68a1      	ldr	r1, [r4, #8]
 80095ba:	4b09      	ldr	r3, [pc, #36]	@ (80095e0 <cleanup_stdio+0x38>)
 80095bc:	4299      	cmp	r1, r3
 80095be:	d002      	beq.n	80095c6 <cleanup_stdio+0x1e>
 80095c0:	4620      	mov	r0, r4
 80095c2:	f001 fc1b 	bl	800adfc <_fflush_r>
 80095c6:	68e1      	ldr	r1, [r4, #12]
 80095c8:	4b06      	ldr	r3, [pc, #24]	@ (80095e4 <cleanup_stdio+0x3c>)
 80095ca:	4299      	cmp	r1, r3
 80095cc:	d004      	beq.n	80095d8 <cleanup_stdio+0x30>
 80095ce:	4620      	mov	r0, r4
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f001 bc12 	b.w	800adfc <_fflush_r>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	bf00      	nop
 80095dc:	2000145c 	.word	0x2000145c
 80095e0:	200014c4 	.word	0x200014c4
 80095e4:	2000152c 	.word	0x2000152c

080095e8 <global_stdio_init.part.0>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009618 <global_stdio_init.part.0+0x30>)
 80095ec:	4c0b      	ldr	r4, [pc, #44]	@ (800961c <global_stdio_init.part.0+0x34>)
 80095ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009620 <global_stdio_init.part.0+0x38>)
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	4620      	mov	r0, r4
 80095f4:	2200      	movs	r2, #0
 80095f6:	2104      	movs	r1, #4
 80095f8:	f7ff ff94 	bl	8009524 <std>
 80095fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009600:	2201      	movs	r2, #1
 8009602:	2109      	movs	r1, #9
 8009604:	f7ff ff8e 	bl	8009524 <std>
 8009608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800960c:	2202      	movs	r2, #2
 800960e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009612:	2112      	movs	r1, #18
 8009614:	f7ff bf86 	b.w	8009524 <std>
 8009618:	20001594 	.word	0x20001594
 800961c:	2000145c 	.word	0x2000145c
 8009620:	08009591 	.word	0x08009591

08009624 <__sfp_lock_acquire>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__sfp_lock_acquire+0x8>)
 8009626:	f000 baf4 	b.w	8009c12 <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	2000159d 	.word	0x2000159d

08009630 <__sfp_lock_release>:
 8009630:	4801      	ldr	r0, [pc, #4]	@ (8009638 <__sfp_lock_release+0x8>)
 8009632:	f000 baef 	b.w	8009c14 <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	2000159d 	.word	0x2000159d

0800963c <__sinit>:
 800963c:	b510      	push	{r4, lr}
 800963e:	4604      	mov	r4, r0
 8009640:	f7ff fff0 	bl	8009624 <__sfp_lock_acquire>
 8009644:	6a23      	ldr	r3, [r4, #32]
 8009646:	b11b      	cbz	r3, 8009650 <__sinit+0x14>
 8009648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800964c:	f7ff bff0 	b.w	8009630 <__sfp_lock_release>
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <__sinit+0x28>)
 8009652:	6223      	str	r3, [r4, #32]
 8009654:	4b04      	ldr	r3, [pc, #16]	@ (8009668 <__sinit+0x2c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1f5      	bne.n	8009648 <__sinit+0xc>
 800965c:	f7ff ffc4 	bl	80095e8 <global_stdio_init.part.0>
 8009660:	e7f2      	b.n	8009648 <__sinit+0xc>
 8009662:	bf00      	nop
 8009664:	080095a9 	.word	0x080095a9
 8009668:	20001594 	.word	0x20001594

0800966c <_fwalk_sglue>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4607      	mov	r7, r0
 8009672:	4688      	mov	r8, r1
 8009674:	4614      	mov	r4, r2
 8009676:	2600      	movs	r6, #0
 8009678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800967c:	f1b9 0901 	subs.w	r9, r9, #1
 8009680:	d505      	bpl.n	800968e <_fwalk_sglue+0x22>
 8009682:	6824      	ldr	r4, [r4, #0]
 8009684:	2c00      	cmp	r4, #0
 8009686:	d1f7      	bne.n	8009678 <_fwalk_sglue+0xc>
 8009688:	4630      	mov	r0, r6
 800968a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968e:	89ab      	ldrh	r3, [r5, #12]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d907      	bls.n	80096a4 <_fwalk_sglue+0x38>
 8009694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009698:	3301      	adds	r3, #1
 800969a:	d003      	beq.n	80096a4 <_fwalk_sglue+0x38>
 800969c:	4629      	mov	r1, r5
 800969e:	4638      	mov	r0, r7
 80096a0:	47c0      	blx	r8
 80096a2:	4306      	orrs	r6, r0
 80096a4:	3568      	adds	r5, #104	@ 0x68
 80096a6:	e7e9      	b.n	800967c <_fwalk_sglue+0x10>

080096a8 <iprintf>:
 80096a8:	b40f      	push	{r0, r1, r2, r3}
 80096aa:	b507      	push	{r0, r1, r2, lr}
 80096ac:	4906      	ldr	r1, [pc, #24]	@ (80096c8 <iprintf+0x20>)
 80096ae:	ab04      	add	r3, sp, #16
 80096b0:	6808      	ldr	r0, [r1, #0]
 80096b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b6:	6881      	ldr	r1, [r0, #8]
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	f000 ff27 	bl	800a50c <_vfiprintf_r>
 80096be:	b003      	add	sp, #12
 80096c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c4:	b004      	add	sp, #16
 80096c6:	4770      	bx	lr
 80096c8:	2000001c 	.word	0x2000001c

080096cc <_puts_r>:
 80096cc:	6a03      	ldr	r3, [r0, #32]
 80096ce:	b570      	push	{r4, r5, r6, lr}
 80096d0:	6884      	ldr	r4, [r0, #8]
 80096d2:	4605      	mov	r5, r0
 80096d4:	460e      	mov	r6, r1
 80096d6:	b90b      	cbnz	r3, 80096dc <_puts_r+0x10>
 80096d8:	f7ff ffb0 	bl	800963c <__sinit>
 80096dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096de:	07db      	lsls	r3, r3, #31
 80096e0:	d405      	bmi.n	80096ee <_puts_r+0x22>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	0598      	lsls	r0, r3, #22
 80096e6:	d402      	bmi.n	80096ee <_puts_r+0x22>
 80096e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ea:	f000 fa92 	bl	8009c12 <__retarget_lock_acquire_recursive>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	0719      	lsls	r1, r3, #28
 80096f2:	d502      	bpl.n	80096fa <_puts_r+0x2e>
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d135      	bne.n	8009766 <_puts_r+0x9a>
 80096fa:	4621      	mov	r1, r4
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 f911 	bl	8009924 <__swsetup_r>
 8009702:	b380      	cbz	r0, 8009766 <_puts_r+0x9a>
 8009704:	f04f 35ff 	mov.w	r5, #4294967295
 8009708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800970a:	07da      	lsls	r2, r3, #31
 800970c:	d405      	bmi.n	800971a <_puts_r+0x4e>
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	059b      	lsls	r3, r3, #22
 8009712:	d402      	bmi.n	800971a <_puts_r+0x4e>
 8009714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009716:	f000 fa7d 	bl	8009c14 <__retarget_lock_release_recursive>
 800971a:	4628      	mov	r0, r5
 800971c:	bd70      	pop	{r4, r5, r6, pc}
 800971e:	2b00      	cmp	r3, #0
 8009720:	da04      	bge.n	800972c <_puts_r+0x60>
 8009722:	69a2      	ldr	r2, [r4, #24]
 8009724:	429a      	cmp	r2, r3
 8009726:	dc17      	bgt.n	8009758 <_puts_r+0x8c>
 8009728:	290a      	cmp	r1, #10
 800972a:	d015      	beq.n	8009758 <_puts_r+0x8c>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	7019      	strb	r1, [r3, #0]
 8009734:	68a3      	ldr	r3, [r4, #8]
 8009736:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800973a:	3b01      	subs	r3, #1
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	2900      	cmp	r1, #0
 8009740:	d1ed      	bne.n	800971e <_puts_r+0x52>
 8009742:	2b00      	cmp	r3, #0
 8009744:	da11      	bge.n	800976a <_puts_r+0x9e>
 8009746:	4622      	mov	r2, r4
 8009748:	210a      	movs	r1, #10
 800974a:	4628      	mov	r0, r5
 800974c:	f000 f8ab 	bl	80098a6 <__swbuf_r>
 8009750:	3001      	adds	r0, #1
 8009752:	d0d7      	beq.n	8009704 <_puts_r+0x38>
 8009754:	250a      	movs	r5, #10
 8009756:	e7d7      	b.n	8009708 <_puts_r+0x3c>
 8009758:	4622      	mov	r2, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f000 f8a3 	bl	80098a6 <__swbuf_r>
 8009760:	3001      	adds	r0, #1
 8009762:	d1e7      	bne.n	8009734 <_puts_r+0x68>
 8009764:	e7ce      	b.n	8009704 <_puts_r+0x38>
 8009766:	3e01      	subs	r6, #1
 8009768:	e7e4      	b.n	8009734 <_puts_r+0x68>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	6022      	str	r2, [r4, #0]
 8009770:	220a      	movs	r2, #10
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e7ee      	b.n	8009754 <_puts_r+0x88>
	...

08009778 <puts>:
 8009778:	4b02      	ldr	r3, [pc, #8]	@ (8009784 <puts+0xc>)
 800977a:	4601      	mov	r1, r0
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f7ff bfa5 	b.w	80096cc <_puts_r>
 8009782:	bf00      	nop
 8009784:	2000001c 	.word	0x2000001c

08009788 <siprintf>:
 8009788:	b40e      	push	{r1, r2, r3}
 800978a:	b500      	push	{lr}
 800978c:	b09c      	sub	sp, #112	@ 0x70
 800978e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009790:	9002      	str	r0, [sp, #8]
 8009792:	9006      	str	r0, [sp, #24]
 8009794:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009798:	4809      	ldr	r0, [pc, #36]	@ (80097c0 <siprintf+0x38>)
 800979a:	9107      	str	r1, [sp, #28]
 800979c:	9104      	str	r1, [sp, #16]
 800979e:	4909      	ldr	r1, [pc, #36]	@ (80097c4 <siprintf+0x3c>)
 80097a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a4:	9105      	str	r1, [sp, #20]
 80097a6:	6800      	ldr	r0, [r0, #0]
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	a902      	add	r1, sp, #8
 80097ac:	f000 fbbc 	bl	8009f28 <_svfiprintf_r>
 80097b0:	9b02      	ldr	r3, [sp, #8]
 80097b2:	2200      	movs	r2, #0
 80097b4:	701a      	strb	r2, [r3, #0]
 80097b6:	b01c      	add	sp, #112	@ 0x70
 80097b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097bc:	b003      	add	sp, #12
 80097be:	4770      	bx	lr
 80097c0:	2000001c 	.word	0x2000001c
 80097c4:	ffff0208 	.word	0xffff0208

080097c8 <siscanf>:
 80097c8:	b40e      	push	{r1, r2, r3}
 80097ca:	b530      	push	{r4, r5, lr}
 80097cc:	b09c      	sub	sp, #112	@ 0x70
 80097ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 80097d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80097d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80097d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80097dc:	9002      	str	r0, [sp, #8]
 80097de:	9006      	str	r0, [sp, #24]
 80097e0:	f7f6 fd00 	bl	80001e4 <strlen>
 80097e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <siscanf+0x4c>)
 80097e6:	9003      	str	r0, [sp, #12]
 80097e8:	9007      	str	r0, [sp, #28]
 80097ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097ec:	480a      	ldr	r0, [pc, #40]	@ (8009818 <siscanf+0x50>)
 80097ee:	9401      	str	r4, [sp, #4]
 80097f0:	2300      	movs	r3, #0
 80097f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80097f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097fe:	462a      	mov	r2, r5
 8009800:	4623      	mov	r3, r4
 8009802:	a902      	add	r1, sp, #8
 8009804:	6800      	ldr	r0, [r0, #0]
 8009806:	f000 fce3 	bl	800a1d0 <__ssvfiscanf_r>
 800980a:	b01c      	add	sp, #112	@ 0x70
 800980c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009810:	b003      	add	sp, #12
 8009812:	4770      	bx	lr
 8009814:	0800983f 	.word	0x0800983f
 8009818:	2000001c 	.word	0x2000001c

0800981c <__sread>:
 800981c:	b510      	push	{r4, lr}
 800981e:	460c      	mov	r4, r1
 8009820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009824:	f000 f9a6 	bl	8009b74 <_read_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	bfab      	itete	ge
 800982c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800982e:	89a3      	ldrhlt	r3, [r4, #12]
 8009830:	181b      	addge	r3, r3, r0
 8009832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009836:	bfac      	ite	ge
 8009838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800983a:	81a3      	strhlt	r3, [r4, #12]
 800983c:	bd10      	pop	{r4, pc}

0800983e <__seofread>:
 800983e:	2000      	movs	r0, #0
 8009840:	4770      	bx	lr

08009842 <__swrite>:
 8009842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009846:	461f      	mov	r7, r3
 8009848:	898b      	ldrh	r3, [r1, #12]
 800984a:	05db      	lsls	r3, r3, #23
 800984c:	4605      	mov	r5, r0
 800984e:	460c      	mov	r4, r1
 8009850:	4616      	mov	r6, r2
 8009852:	d505      	bpl.n	8009860 <__swrite+0x1e>
 8009854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009858:	2302      	movs	r3, #2
 800985a:	2200      	movs	r2, #0
 800985c:	f000 f978 	bl	8009b50 <_lseek_r>
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	4632      	mov	r2, r6
 800986e:	463b      	mov	r3, r7
 8009870:	4628      	mov	r0, r5
 8009872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009876:	f000 b98f 	b.w	8009b98 <_write_r>

0800987a <__sseek>:
 800987a:	b510      	push	{r4, lr}
 800987c:	460c      	mov	r4, r1
 800987e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009882:	f000 f965 	bl	8009b50 <_lseek_r>
 8009886:	1c43      	adds	r3, r0, #1
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	bf15      	itete	ne
 800988c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800988e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009892:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009896:	81a3      	strheq	r3, [r4, #12]
 8009898:	bf18      	it	ne
 800989a:	81a3      	strhne	r3, [r4, #12]
 800989c:	bd10      	pop	{r4, pc}

0800989e <__sclose>:
 800989e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a2:	f000 b945 	b.w	8009b30 <_close_r>

080098a6 <__swbuf_r>:
 80098a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a8:	460e      	mov	r6, r1
 80098aa:	4614      	mov	r4, r2
 80098ac:	4605      	mov	r5, r0
 80098ae:	b118      	cbz	r0, 80098b8 <__swbuf_r+0x12>
 80098b0:	6a03      	ldr	r3, [r0, #32]
 80098b2:	b90b      	cbnz	r3, 80098b8 <__swbuf_r+0x12>
 80098b4:	f7ff fec2 	bl	800963c <__sinit>
 80098b8:	69a3      	ldr	r3, [r4, #24]
 80098ba:	60a3      	str	r3, [r4, #8]
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	071a      	lsls	r2, r3, #28
 80098c0:	d501      	bpl.n	80098c6 <__swbuf_r+0x20>
 80098c2:	6923      	ldr	r3, [r4, #16]
 80098c4:	b943      	cbnz	r3, 80098d8 <__swbuf_r+0x32>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4628      	mov	r0, r5
 80098ca:	f000 f82b 	bl	8009924 <__swsetup_r>
 80098ce:	b118      	cbz	r0, 80098d8 <__swbuf_r+0x32>
 80098d0:	f04f 37ff 	mov.w	r7, #4294967295
 80098d4:	4638      	mov	r0, r7
 80098d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	6922      	ldr	r2, [r4, #16]
 80098dc:	1a98      	subs	r0, r3, r2
 80098de:	6963      	ldr	r3, [r4, #20]
 80098e0:	b2f6      	uxtb	r6, r6
 80098e2:	4283      	cmp	r3, r0
 80098e4:	4637      	mov	r7, r6
 80098e6:	dc05      	bgt.n	80098f4 <__swbuf_r+0x4e>
 80098e8:	4621      	mov	r1, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	f001 fa86 	bl	800adfc <_fflush_r>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d1ed      	bne.n	80098d0 <__swbuf_r+0x2a>
 80098f4:	68a3      	ldr	r3, [r4, #8]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	60a3      	str	r3, [r4, #8]
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	6022      	str	r2, [r4, #0]
 8009900:	701e      	strb	r6, [r3, #0]
 8009902:	6962      	ldr	r2, [r4, #20]
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	429a      	cmp	r2, r3
 8009908:	d004      	beq.n	8009914 <__swbuf_r+0x6e>
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	07db      	lsls	r3, r3, #31
 800990e:	d5e1      	bpl.n	80098d4 <__swbuf_r+0x2e>
 8009910:	2e0a      	cmp	r6, #10
 8009912:	d1df      	bne.n	80098d4 <__swbuf_r+0x2e>
 8009914:	4621      	mov	r1, r4
 8009916:	4628      	mov	r0, r5
 8009918:	f001 fa70 	bl	800adfc <_fflush_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	d0d9      	beq.n	80098d4 <__swbuf_r+0x2e>
 8009920:	e7d6      	b.n	80098d0 <__swbuf_r+0x2a>
	...

08009924 <__swsetup_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4b29      	ldr	r3, [pc, #164]	@ (80099cc <__swsetup_r+0xa8>)
 8009928:	4605      	mov	r5, r0
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	460c      	mov	r4, r1
 800992e:	b118      	cbz	r0, 8009938 <__swsetup_r+0x14>
 8009930:	6a03      	ldr	r3, [r0, #32]
 8009932:	b90b      	cbnz	r3, 8009938 <__swsetup_r+0x14>
 8009934:	f7ff fe82 	bl	800963c <__sinit>
 8009938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993c:	0719      	lsls	r1, r3, #28
 800993e:	d422      	bmi.n	8009986 <__swsetup_r+0x62>
 8009940:	06da      	lsls	r2, r3, #27
 8009942:	d407      	bmi.n	8009954 <__swsetup_r+0x30>
 8009944:	2209      	movs	r2, #9
 8009946:	602a      	str	r2, [r5, #0]
 8009948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994c:	81a3      	strh	r3, [r4, #12]
 800994e:	f04f 30ff 	mov.w	r0, #4294967295
 8009952:	e033      	b.n	80099bc <__swsetup_r+0x98>
 8009954:	0758      	lsls	r0, r3, #29
 8009956:	d512      	bpl.n	800997e <__swsetup_r+0x5a>
 8009958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800995a:	b141      	cbz	r1, 800996e <__swsetup_r+0x4a>
 800995c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009960:	4299      	cmp	r1, r3
 8009962:	d002      	beq.n	800996a <__swsetup_r+0x46>
 8009964:	4628      	mov	r0, r5
 8009966:	f000 f983 	bl	8009c70 <_free_r>
 800996a:	2300      	movs	r3, #0
 800996c:	6363      	str	r3, [r4, #52]	@ 0x34
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	2300      	movs	r3, #0
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f043 0308 	orr.w	r3, r3, #8
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	b94b      	cbnz	r3, 800999e <__swsetup_r+0x7a>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009994:	d003      	beq.n	800999e <__swsetup_r+0x7a>
 8009996:	4621      	mov	r1, r4
 8009998:	4628      	mov	r0, r5
 800999a:	f001 fa8f 	bl	800aebc <__smakebuf_r>
 800999e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a2:	f013 0201 	ands.w	r2, r3, #1
 80099a6:	d00a      	beq.n	80099be <__swsetup_r+0x9a>
 80099a8:	2200      	movs	r2, #0
 80099aa:	60a2      	str	r2, [r4, #8]
 80099ac:	6962      	ldr	r2, [r4, #20]
 80099ae:	4252      	negs	r2, r2
 80099b0:	61a2      	str	r2, [r4, #24]
 80099b2:	6922      	ldr	r2, [r4, #16]
 80099b4:	b942      	cbnz	r2, 80099c8 <__swsetup_r+0xa4>
 80099b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099ba:	d1c5      	bne.n	8009948 <__swsetup_r+0x24>
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	0799      	lsls	r1, r3, #30
 80099c0:	bf58      	it	pl
 80099c2:	6962      	ldrpl	r2, [r4, #20]
 80099c4:	60a2      	str	r2, [r4, #8]
 80099c6:	e7f4      	b.n	80099b2 <__swsetup_r+0x8e>
 80099c8:	2000      	movs	r0, #0
 80099ca:	e7f7      	b.n	80099bc <__swsetup_r+0x98>
 80099cc:	2000001c 	.word	0x2000001c

080099d0 <memcmp>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	3901      	subs	r1, #1
 80099d4:	4402      	add	r2, r0
 80099d6:	4290      	cmp	r0, r2
 80099d8:	d101      	bne.n	80099de <memcmp+0xe>
 80099da:	2000      	movs	r0, #0
 80099dc:	e005      	b.n	80099ea <memcmp+0x1a>
 80099de:	7803      	ldrb	r3, [r0, #0]
 80099e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d001      	beq.n	80099ec <memcmp+0x1c>
 80099e8:	1b18      	subs	r0, r3, r4
 80099ea:	bd10      	pop	{r4, pc}
 80099ec:	3001      	adds	r0, #1
 80099ee:	e7f2      	b.n	80099d6 <memcmp+0x6>

080099f0 <memset>:
 80099f0:	4402      	add	r2, r0
 80099f2:	4603      	mov	r3, r0
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d100      	bne.n	80099fa <memset+0xa>
 80099f8:	4770      	bx	lr
 80099fa:	f803 1b01 	strb.w	r1, [r3], #1
 80099fe:	e7f9      	b.n	80099f4 <memset+0x4>

08009a00 <strncmp>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	b16a      	cbz	r2, 8009a20 <strncmp+0x20>
 8009a04:	3901      	subs	r1, #1
 8009a06:	1884      	adds	r4, r0, r2
 8009a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d103      	bne.n	8009a1c <strncmp+0x1c>
 8009a14:	42a0      	cmp	r0, r4
 8009a16:	d001      	beq.n	8009a1c <strncmp+0x1c>
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	d1f5      	bne.n	8009a08 <strncmp+0x8>
 8009a1c:	1ad0      	subs	r0, r2, r3
 8009a1e:	bd10      	pop	{r4, pc}
 8009a20:	4610      	mov	r0, r2
 8009a22:	e7fc      	b.n	8009a1e <strncmp+0x1e>

08009a24 <strncpy>:
 8009a24:	b510      	push	{r4, lr}
 8009a26:	3901      	subs	r1, #1
 8009a28:	4603      	mov	r3, r0
 8009a2a:	b132      	cbz	r2, 8009a3a <strncpy+0x16>
 8009a2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009a30:	f803 4b01 	strb.w	r4, [r3], #1
 8009a34:	3a01      	subs	r2, #1
 8009a36:	2c00      	cmp	r4, #0
 8009a38:	d1f7      	bne.n	8009a2a <strncpy+0x6>
 8009a3a:	441a      	add	r2, r3
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d100      	bne.n	8009a44 <strncpy+0x20>
 8009a42:	bd10      	pop	{r4, pc}
 8009a44:	f803 1b01 	strb.w	r1, [r3], #1
 8009a48:	e7f9      	b.n	8009a3e <strncpy+0x1a>
	...

08009a4c <strtok>:
 8009a4c:	4b16      	ldr	r3, [pc, #88]	@ (8009aa8 <strtok+0x5c>)
 8009a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a52:	681f      	ldr	r7, [r3, #0]
 8009a54:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009a56:	4605      	mov	r5, r0
 8009a58:	460e      	mov	r6, r1
 8009a5a:	b9ec      	cbnz	r4, 8009a98 <strtok+0x4c>
 8009a5c:	2050      	movs	r0, #80	@ 0x50
 8009a5e:	f000 f951 	bl	8009d04 <malloc>
 8009a62:	4602      	mov	r2, r0
 8009a64:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a66:	b920      	cbnz	r0, 8009a72 <strtok+0x26>
 8009a68:	4b10      	ldr	r3, [pc, #64]	@ (8009aac <strtok+0x60>)
 8009a6a:	4811      	ldr	r0, [pc, #68]	@ (8009ab0 <strtok+0x64>)
 8009a6c:	215b      	movs	r1, #91	@ 0x5b
 8009a6e:	f000 f8e1 	bl	8009c34 <__assert_func>
 8009a72:	e9c0 4400 	strd	r4, r4, [r0]
 8009a76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009a7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009a7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009a82:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009a86:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009a8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009a8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009a92:	6184      	str	r4, [r0, #24]
 8009a94:	7704      	strb	r4, [r0, #28]
 8009a96:	6244      	str	r4, [r0, #36]	@ 0x24
 8009a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa4:	f000 b806 	b.w	8009ab4 <__strtok_r>
 8009aa8:	2000001c 	.word	0x2000001c
 8009aac:	0800bba4 	.word	0x0800bba4
 8009ab0:	0800bbbb 	.word	0x0800bbbb

08009ab4 <__strtok_r>:
 8009ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	b908      	cbnz	r0, 8009abe <__strtok_r+0xa>
 8009aba:	6814      	ldr	r4, [r2, #0]
 8009abc:	b144      	cbz	r4, 8009ad0 <__strtok_r+0x1c>
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009ac4:	460f      	mov	r7, r1
 8009ac6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009aca:	b91e      	cbnz	r6, 8009ad4 <__strtok_r+0x20>
 8009acc:	b965      	cbnz	r5, 8009ae8 <__strtok_r+0x34>
 8009ace:	6015      	str	r5, [r2, #0]
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e005      	b.n	8009ae0 <__strtok_r+0x2c>
 8009ad4:	42b5      	cmp	r5, r6
 8009ad6:	d1f6      	bne.n	8009ac6 <__strtok_r+0x12>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1f0      	bne.n	8009abe <__strtok_r+0xa>
 8009adc:	6014      	str	r4, [r2, #0]
 8009ade:	7003      	strb	r3, [r0, #0]
 8009ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae2:	461c      	mov	r4, r3
 8009ae4:	e00c      	b.n	8009b00 <__strtok_r+0x4c>
 8009ae6:	b915      	cbnz	r5, 8009aee <__strtok_r+0x3a>
 8009ae8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009aec:	460e      	mov	r6, r1
 8009aee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009af2:	42ab      	cmp	r3, r5
 8009af4:	d1f7      	bne.n	8009ae6 <__strtok_r+0x32>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0f3      	beq.n	8009ae2 <__strtok_r+0x2e>
 8009afa:	2300      	movs	r3, #0
 8009afc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009b00:	6014      	str	r4, [r2, #0]
 8009b02:	e7ed      	b.n	8009ae0 <__strtok_r+0x2c>

08009b04 <strstr>:
 8009b04:	780a      	ldrb	r2, [r1, #0]
 8009b06:	b570      	push	{r4, r5, r6, lr}
 8009b08:	b96a      	cbnz	r2, 8009b26 <strstr+0x22>
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d109      	bne.n	8009b24 <strstr+0x20>
 8009b10:	460c      	mov	r4, r1
 8009b12:	4605      	mov	r5, r0
 8009b14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d0f6      	beq.n	8009b0a <strstr+0x6>
 8009b1c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009b20:	429e      	cmp	r6, r3
 8009b22:	d0f7      	beq.n	8009b14 <strstr+0x10>
 8009b24:	3001      	adds	r0, #1
 8009b26:	7803      	ldrb	r3, [r0, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1ef      	bne.n	8009b0c <strstr+0x8>
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	e7ec      	b.n	8009b0a <strstr+0x6>

08009b30 <_close_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	@ (8009b4c <_close_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f8 f8f7 	bl	8001d2e <_close>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_close_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_close_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20001598 	.word	0x20001598

08009b50 <_lseek_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	@ (8009b70 <_lseek_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f8 f90c 	bl	8001d7c <_lseek>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_lseek_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_lseek_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	20001598 	.word	0x20001598

08009b74 <_read_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d07      	ldr	r5, [pc, #28]	@ (8009b94 <_read_r+0x20>)
 8009b78:	4604      	mov	r4, r0
 8009b7a:	4608      	mov	r0, r1
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	2200      	movs	r2, #0
 8009b80:	602a      	str	r2, [r5, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	f7f8 f89a 	bl	8001cbc <_read>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d102      	bne.n	8009b92 <_read_r+0x1e>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	b103      	cbz	r3, 8009b92 <_read_r+0x1e>
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	20001598 	.word	0x20001598

08009b98 <_write_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4d07      	ldr	r5, [pc, #28]	@ (8009bb8 <_write_r+0x20>)
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	4608      	mov	r0, r1
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	602a      	str	r2, [r5, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f7f8 f8a5 	bl	8001cf6 <_write>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_write_r+0x1e>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_write_r+0x1e>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	20001598 	.word	0x20001598

08009bbc <__errno>:
 8009bbc:	4b01      	ldr	r3, [pc, #4]	@ (8009bc4 <__errno+0x8>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	2000001c 	.word	0x2000001c

08009bc8 <__libc_init_array>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4d0d      	ldr	r5, [pc, #52]	@ (8009c00 <__libc_init_array+0x38>)
 8009bcc:	4c0d      	ldr	r4, [pc, #52]	@ (8009c04 <__libc_init_array+0x3c>)
 8009bce:	1b64      	subs	r4, r4, r5
 8009bd0:	10a4      	asrs	r4, r4, #2
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	d109      	bne.n	8009bec <__libc_init_array+0x24>
 8009bd8:	4d0b      	ldr	r5, [pc, #44]	@ (8009c08 <__libc_init_array+0x40>)
 8009bda:	4c0c      	ldr	r4, [pc, #48]	@ (8009c0c <__libc_init_array+0x44>)
 8009bdc:	f001 fbd8 	bl	800b390 <_init>
 8009be0:	1b64      	subs	r4, r4, r5
 8009be2:	10a4      	asrs	r4, r4, #2
 8009be4:	2600      	movs	r6, #0
 8009be6:	42a6      	cmp	r6, r4
 8009be8:	d105      	bne.n	8009bf6 <__libc_init_array+0x2e>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf0:	4798      	blx	r3
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7ee      	b.n	8009bd4 <__libc_init_array+0xc>
 8009bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfa:	4798      	blx	r3
 8009bfc:	3601      	adds	r6, #1
 8009bfe:	e7f2      	b.n	8009be6 <__libc_init_array+0x1e>
 8009c00:	0800bda8 	.word	0x0800bda8
 8009c04:	0800bda8 	.word	0x0800bda8
 8009c08:	0800bda8 	.word	0x0800bda8
 8009c0c:	0800bdac 	.word	0x0800bdac

08009c10 <__retarget_lock_init_recursive>:
 8009c10:	4770      	bx	lr

08009c12 <__retarget_lock_acquire_recursive>:
 8009c12:	4770      	bx	lr

08009c14 <__retarget_lock_release_recursive>:
 8009c14:	4770      	bx	lr

08009c16 <memcpy>:
 8009c16:	440a      	add	r2, r1
 8009c18:	4291      	cmp	r1, r2
 8009c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c1e:	d100      	bne.n	8009c22 <memcpy+0xc>
 8009c20:	4770      	bx	lr
 8009c22:	b510      	push	{r4, lr}
 8009c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2c:	4291      	cmp	r1, r2
 8009c2e:	d1f9      	bne.n	8009c24 <memcpy+0xe>
 8009c30:	bd10      	pop	{r4, pc}
	...

08009c34 <__assert_func>:
 8009c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c36:	4614      	mov	r4, r2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4b09      	ldr	r3, [pc, #36]	@ (8009c60 <__assert_func+0x2c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4605      	mov	r5, r0
 8009c40:	68d8      	ldr	r0, [r3, #12]
 8009c42:	b954      	cbnz	r4, 8009c5a <__assert_func+0x26>
 8009c44:	4b07      	ldr	r3, [pc, #28]	@ (8009c64 <__assert_func+0x30>)
 8009c46:	461c      	mov	r4, r3
 8009c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c4c:	9100      	str	r1, [sp, #0]
 8009c4e:	462b      	mov	r3, r5
 8009c50:	4905      	ldr	r1, [pc, #20]	@ (8009c68 <__assert_func+0x34>)
 8009c52:	f001 f8fb 	bl	800ae4c <fiprintf>
 8009c56:	f001 fa2d 	bl	800b0b4 <abort>
 8009c5a:	4b04      	ldr	r3, [pc, #16]	@ (8009c6c <__assert_func+0x38>)
 8009c5c:	e7f4      	b.n	8009c48 <__assert_func+0x14>
 8009c5e:	bf00      	nop
 8009c60:	2000001c 	.word	0x2000001c
 8009c64:	0800bc50 	.word	0x0800bc50
 8009c68:	0800bc22 	.word	0x0800bc22
 8009c6c:	0800bc15 	.word	0x0800bc15

08009c70 <_free_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4605      	mov	r5, r0
 8009c74:	2900      	cmp	r1, #0
 8009c76:	d041      	beq.n	8009cfc <_free_r+0x8c>
 8009c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c7c:	1f0c      	subs	r4, r1, #4
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bfb8      	it	lt
 8009c82:	18e4      	addlt	r4, r4, r3
 8009c84:	f000 f8e8 	bl	8009e58 <__malloc_lock>
 8009c88:	4a1d      	ldr	r2, [pc, #116]	@ (8009d00 <_free_r+0x90>)
 8009c8a:	6813      	ldr	r3, [r2, #0]
 8009c8c:	b933      	cbnz	r3, 8009c9c <_free_r+0x2c>
 8009c8e:	6063      	str	r3, [r4, #4]
 8009c90:	6014      	str	r4, [r2, #0]
 8009c92:	4628      	mov	r0, r5
 8009c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c98:	f000 b8e4 	b.w	8009e64 <__malloc_unlock>
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	d908      	bls.n	8009cb2 <_free_r+0x42>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	1821      	adds	r1, r4, r0
 8009ca4:	428b      	cmp	r3, r1
 8009ca6:	bf01      	itttt	eq
 8009ca8:	6819      	ldreq	r1, [r3, #0]
 8009caa:	685b      	ldreq	r3, [r3, #4]
 8009cac:	1809      	addeq	r1, r1, r0
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	e7ed      	b.n	8009c8e <_free_r+0x1e>
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b10b      	cbz	r3, 8009cbc <_free_r+0x4c>
 8009cb8:	42a3      	cmp	r3, r4
 8009cba:	d9fa      	bls.n	8009cb2 <_free_r+0x42>
 8009cbc:	6811      	ldr	r1, [r2, #0]
 8009cbe:	1850      	adds	r0, r2, r1
 8009cc0:	42a0      	cmp	r0, r4
 8009cc2:	d10b      	bne.n	8009cdc <_free_r+0x6c>
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	4401      	add	r1, r0
 8009cc8:	1850      	adds	r0, r2, r1
 8009cca:	4283      	cmp	r3, r0
 8009ccc:	6011      	str	r1, [r2, #0]
 8009cce:	d1e0      	bne.n	8009c92 <_free_r+0x22>
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	6053      	str	r3, [r2, #4]
 8009cd6:	4408      	add	r0, r1
 8009cd8:	6010      	str	r0, [r2, #0]
 8009cda:	e7da      	b.n	8009c92 <_free_r+0x22>
 8009cdc:	d902      	bls.n	8009ce4 <_free_r+0x74>
 8009cde:	230c      	movs	r3, #12
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	e7d6      	b.n	8009c92 <_free_r+0x22>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	1821      	adds	r1, r4, r0
 8009ce8:	428b      	cmp	r3, r1
 8009cea:	bf04      	itt	eq
 8009cec:	6819      	ldreq	r1, [r3, #0]
 8009cee:	685b      	ldreq	r3, [r3, #4]
 8009cf0:	6063      	str	r3, [r4, #4]
 8009cf2:	bf04      	itt	eq
 8009cf4:	1809      	addeq	r1, r1, r0
 8009cf6:	6021      	streq	r1, [r4, #0]
 8009cf8:	6054      	str	r4, [r2, #4]
 8009cfa:	e7ca      	b.n	8009c92 <_free_r+0x22>
 8009cfc:	bd38      	pop	{r3, r4, r5, pc}
 8009cfe:	bf00      	nop
 8009d00:	200015a4 	.word	0x200015a4

08009d04 <malloc>:
 8009d04:	4b02      	ldr	r3, [pc, #8]	@ (8009d10 <malloc+0xc>)
 8009d06:	4601      	mov	r1, r0
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	f000 b825 	b.w	8009d58 <_malloc_r>
 8009d0e:	bf00      	nop
 8009d10:	2000001c 	.word	0x2000001c

08009d14 <sbrk_aligned>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4e0f      	ldr	r6, [pc, #60]	@ (8009d54 <sbrk_aligned+0x40>)
 8009d18:	460c      	mov	r4, r1
 8009d1a:	6831      	ldr	r1, [r6, #0]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	b911      	cbnz	r1, 8009d26 <sbrk_aligned+0x12>
 8009d20:	f001 f9b8 	bl	800b094 <_sbrk_r>
 8009d24:	6030      	str	r0, [r6, #0]
 8009d26:	4621      	mov	r1, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f001 f9b3 	bl	800b094 <_sbrk_r>
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	d103      	bne.n	8009d3a <sbrk_aligned+0x26>
 8009d32:	f04f 34ff 	mov.w	r4, #4294967295
 8009d36:	4620      	mov	r0, r4
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	1cc4      	adds	r4, r0, #3
 8009d3c:	f024 0403 	bic.w	r4, r4, #3
 8009d40:	42a0      	cmp	r0, r4
 8009d42:	d0f8      	beq.n	8009d36 <sbrk_aligned+0x22>
 8009d44:	1a21      	subs	r1, r4, r0
 8009d46:	4628      	mov	r0, r5
 8009d48:	f001 f9a4 	bl	800b094 <_sbrk_r>
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	d1f2      	bne.n	8009d36 <sbrk_aligned+0x22>
 8009d50:	e7ef      	b.n	8009d32 <sbrk_aligned+0x1e>
 8009d52:	bf00      	nop
 8009d54:	200015a0 	.word	0x200015a0

08009d58 <_malloc_r>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	1ccd      	adds	r5, r1, #3
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	db01      	blt.n	8009d74 <_malloc_r+0x1c>
 8009d70:	42a9      	cmp	r1, r5
 8009d72:	d904      	bls.n	8009d7e <_malloc_r+0x26>
 8009d74:	230c      	movs	r3, #12
 8009d76:	6033      	str	r3, [r6, #0]
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e54 <_malloc_r+0xfc>
 8009d82:	f000 f869 	bl	8009e58 <__malloc_lock>
 8009d86:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8a:	461c      	mov	r4, r3
 8009d8c:	bb44      	cbnz	r4, 8009de0 <_malloc_r+0x88>
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7ff ffbf 	bl	8009d14 <sbrk_aligned>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	4604      	mov	r4, r0
 8009d9a:	d158      	bne.n	8009e4e <_malloc_r+0xf6>
 8009d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8009da0:	4627      	mov	r7, r4
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	d143      	bne.n	8009e2e <_malloc_r+0xd6>
 8009da6:	2c00      	cmp	r4, #0
 8009da8:	d04b      	beq.n	8009e42 <_malloc_r+0xea>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	4639      	mov	r1, r7
 8009dae:	4630      	mov	r0, r6
 8009db0:	eb04 0903 	add.w	r9, r4, r3
 8009db4:	f001 f96e 	bl	800b094 <_sbrk_r>
 8009db8:	4581      	cmp	r9, r0
 8009dba:	d142      	bne.n	8009e42 <_malloc_r+0xea>
 8009dbc:	6821      	ldr	r1, [r4, #0]
 8009dbe:	1a6d      	subs	r5, r5, r1
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ffa6 	bl	8009d14 <sbrk_aligned>
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d03a      	beq.n	8009e42 <_malloc_r+0xea>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	442b      	add	r3, r5
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd6:	685a      	ldr	r2, [r3, #4]
 8009dd8:	bb62      	cbnz	r2, 8009e34 <_malloc_r+0xdc>
 8009dda:	f8c8 7000 	str.w	r7, [r8]
 8009dde:	e00f      	b.n	8009e00 <_malloc_r+0xa8>
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	1b52      	subs	r2, r2, r5
 8009de4:	d420      	bmi.n	8009e28 <_malloc_r+0xd0>
 8009de6:	2a0b      	cmp	r2, #11
 8009de8:	d917      	bls.n	8009e1a <_malloc_r+0xc2>
 8009dea:	1961      	adds	r1, r4, r5
 8009dec:	42a3      	cmp	r3, r4
 8009dee:	6025      	str	r5, [r4, #0]
 8009df0:	bf18      	it	ne
 8009df2:	6059      	strne	r1, [r3, #4]
 8009df4:	6863      	ldr	r3, [r4, #4]
 8009df6:	bf08      	it	eq
 8009df8:	f8c8 1000 	streq.w	r1, [r8]
 8009dfc:	5162      	str	r2, [r4, r5]
 8009dfe:	604b      	str	r3, [r1, #4]
 8009e00:	4630      	mov	r0, r6
 8009e02:	f000 f82f 	bl	8009e64 <__malloc_unlock>
 8009e06:	f104 000b 	add.w	r0, r4, #11
 8009e0a:	1d23      	adds	r3, r4, #4
 8009e0c:	f020 0007 	bic.w	r0, r0, #7
 8009e10:	1ac2      	subs	r2, r0, r3
 8009e12:	bf1c      	itt	ne
 8009e14:	1a1b      	subne	r3, r3, r0
 8009e16:	50a3      	strne	r3, [r4, r2]
 8009e18:	e7af      	b.n	8009d7a <_malloc_r+0x22>
 8009e1a:	6862      	ldr	r2, [r4, #4]
 8009e1c:	42a3      	cmp	r3, r4
 8009e1e:	bf0c      	ite	eq
 8009e20:	f8c8 2000 	streq.w	r2, [r8]
 8009e24:	605a      	strne	r2, [r3, #4]
 8009e26:	e7eb      	b.n	8009e00 <_malloc_r+0xa8>
 8009e28:	4623      	mov	r3, r4
 8009e2a:	6864      	ldr	r4, [r4, #4]
 8009e2c:	e7ae      	b.n	8009d8c <_malloc_r+0x34>
 8009e2e:	463c      	mov	r4, r7
 8009e30:	687f      	ldr	r7, [r7, #4]
 8009e32:	e7b6      	b.n	8009da2 <_malloc_r+0x4a>
 8009e34:	461a      	mov	r2, r3
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	d1fb      	bne.n	8009e34 <_malloc_r+0xdc>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6053      	str	r3, [r2, #4]
 8009e40:	e7de      	b.n	8009e00 <_malloc_r+0xa8>
 8009e42:	230c      	movs	r3, #12
 8009e44:	6033      	str	r3, [r6, #0]
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 f80c 	bl	8009e64 <__malloc_unlock>
 8009e4c:	e794      	b.n	8009d78 <_malloc_r+0x20>
 8009e4e:	6005      	str	r5, [r0, #0]
 8009e50:	e7d6      	b.n	8009e00 <_malloc_r+0xa8>
 8009e52:	bf00      	nop
 8009e54:	200015a4 	.word	0x200015a4

08009e58 <__malloc_lock>:
 8009e58:	4801      	ldr	r0, [pc, #4]	@ (8009e60 <__malloc_lock+0x8>)
 8009e5a:	f7ff beda 	b.w	8009c12 <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	2000159c 	.word	0x2000159c

08009e64 <__malloc_unlock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	@ (8009e6c <__malloc_unlock+0x8>)
 8009e66:	f7ff bed5 	b.w	8009c14 <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	2000159c 	.word	0x2000159c

08009e70 <__ssputs_r>:
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	688e      	ldr	r6, [r1, #8]
 8009e76:	461f      	mov	r7, r3
 8009e78:	42be      	cmp	r6, r7
 8009e7a:	680b      	ldr	r3, [r1, #0]
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	4690      	mov	r8, r2
 8009e82:	d82d      	bhi.n	8009ee0 <__ssputs_r+0x70>
 8009e84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e8c:	d026      	beq.n	8009edc <__ssputs_r+0x6c>
 8009e8e:	6965      	ldr	r5, [r4, #20]
 8009e90:	6909      	ldr	r1, [r1, #16]
 8009e92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e96:	eba3 0901 	sub.w	r9, r3, r1
 8009e9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e9e:	1c7b      	adds	r3, r7, #1
 8009ea0:	444b      	add	r3, r9
 8009ea2:	106d      	asrs	r5, r5, #1
 8009ea4:	429d      	cmp	r5, r3
 8009ea6:	bf38      	it	cc
 8009ea8:	461d      	movcc	r5, r3
 8009eaa:	0553      	lsls	r3, r2, #21
 8009eac:	d527      	bpl.n	8009efe <__ssputs_r+0x8e>
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7ff ff52 	bl	8009d58 <_malloc_r>
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	b360      	cbz	r0, 8009f12 <__ssputs_r+0xa2>
 8009eb8:	6921      	ldr	r1, [r4, #16]
 8009eba:	464a      	mov	r2, r9
 8009ebc:	f7ff feab 	bl	8009c16 <memcpy>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	6126      	str	r6, [r4, #16]
 8009ece:	6165      	str	r5, [r4, #20]
 8009ed0:	444e      	add	r6, r9
 8009ed2:	eba5 0509 	sub.w	r5, r5, r9
 8009ed6:	6026      	str	r6, [r4, #0]
 8009ed8:	60a5      	str	r5, [r4, #8]
 8009eda:	463e      	mov	r6, r7
 8009edc:	42be      	cmp	r6, r7
 8009ede:	d900      	bls.n	8009ee2 <__ssputs_r+0x72>
 8009ee0:	463e      	mov	r6, r7
 8009ee2:	6820      	ldr	r0, [r4, #0]
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	4641      	mov	r1, r8
 8009ee8:	f001 f897 	bl	800b01a <memmove>
 8009eec:	68a3      	ldr	r3, [r4, #8]
 8009eee:	1b9b      	subs	r3, r3, r6
 8009ef0:	60a3      	str	r3, [r4, #8]
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	4433      	add	r3, r6
 8009ef6:	6023      	str	r3, [r4, #0]
 8009ef8:	2000      	movs	r0, #0
 8009efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efe:	462a      	mov	r2, r5
 8009f00:	f001 f8df 	bl	800b0c2 <_realloc_r>
 8009f04:	4606      	mov	r6, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d1e0      	bne.n	8009ecc <__ssputs_r+0x5c>
 8009f0a:	6921      	ldr	r1, [r4, #16]
 8009f0c:	4650      	mov	r0, sl
 8009f0e:	f7ff feaf 	bl	8009c70 <_free_r>
 8009f12:	230c      	movs	r3, #12
 8009f14:	f8ca 3000 	str.w	r3, [sl]
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	e7e9      	b.n	8009efa <__ssputs_r+0x8a>
	...

08009f28 <_svfiprintf_r>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	4698      	mov	r8, r3
 8009f2e:	898b      	ldrh	r3, [r1, #12]
 8009f30:	061b      	lsls	r3, r3, #24
 8009f32:	b09d      	sub	sp, #116	@ 0x74
 8009f34:	4607      	mov	r7, r0
 8009f36:	460d      	mov	r5, r1
 8009f38:	4614      	mov	r4, r2
 8009f3a:	d510      	bpl.n	8009f5e <_svfiprintf_r+0x36>
 8009f3c:	690b      	ldr	r3, [r1, #16]
 8009f3e:	b973      	cbnz	r3, 8009f5e <_svfiprintf_r+0x36>
 8009f40:	2140      	movs	r1, #64	@ 0x40
 8009f42:	f7ff ff09 	bl	8009d58 <_malloc_r>
 8009f46:	6028      	str	r0, [r5, #0]
 8009f48:	6128      	str	r0, [r5, #16]
 8009f4a:	b930      	cbnz	r0, 8009f5a <_svfiprintf_r+0x32>
 8009f4c:	230c      	movs	r3, #12
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	b01d      	add	sp, #116	@ 0x74
 8009f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5a:	2340      	movs	r3, #64	@ 0x40
 8009f5c:	616b      	str	r3, [r5, #20]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f62:	2320      	movs	r3, #32
 8009f64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f6c:	2330      	movs	r3, #48	@ 0x30
 8009f6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a10c <_svfiprintf_r+0x1e4>
 8009f72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f76:	f04f 0901 	mov.w	r9, #1
 8009f7a:	4623      	mov	r3, r4
 8009f7c:	469a      	mov	sl, r3
 8009f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f82:	b10a      	cbz	r2, 8009f88 <_svfiprintf_r+0x60>
 8009f84:	2a25      	cmp	r2, #37	@ 0x25
 8009f86:	d1f9      	bne.n	8009f7c <_svfiprintf_r+0x54>
 8009f88:	ebba 0b04 	subs.w	fp, sl, r4
 8009f8c:	d00b      	beq.n	8009fa6 <_svfiprintf_r+0x7e>
 8009f8e:	465b      	mov	r3, fp
 8009f90:	4622      	mov	r2, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7ff ff6b 	bl	8009e70 <__ssputs_r>
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f000 80a7 	beq.w	800a0ee <_svfiprintf_r+0x1c6>
 8009fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fa2:	445a      	add	r2, fp
 8009fa4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 809f 	beq.w	800a0ee <_svfiprintf_r+0x1c6>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fba:	f10a 0a01 	add.w	sl, sl, #1
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	9307      	str	r3, [sp, #28]
 8009fc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fc8:	4654      	mov	r4, sl
 8009fca:	2205      	movs	r2, #5
 8009fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd0:	484e      	ldr	r0, [pc, #312]	@ (800a10c <_svfiprintf_r+0x1e4>)
 8009fd2:	f7f6 f915 	bl	8000200 <memchr>
 8009fd6:	9a04      	ldr	r2, [sp, #16]
 8009fd8:	b9d8      	cbnz	r0, 800a012 <_svfiprintf_r+0xea>
 8009fda:	06d0      	lsls	r0, r2, #27
 8009fdc:	bf44      	itt	mi
 8009fde:	2320      	movmi	r3, #32
 8009fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe4:	0711      	lsls	r1, r2, #28
 8009fe6:	bf44      	itt	mi
 8009fe8:	232b      	movmi	r3, #43	@ 0x2b
 8009fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fee:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ff4:	d015      	beq.n	800a022 <_svfiprintf_r+0xfa>
 8009ff6:	9a07      	ldr	r2, [sp, #28]
 8009ff8:	4654      	mov	r4, sl
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f04f 0c0a 	mov.w	ip, #10
 800a000:	4621      	mov	r1, r4
 800a002:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a006:	3b30      	subs	r3, #48	@ 0x30
 800a008:	2b09      	cmp	r3, #9
 800a00a:	d94b      	bls.n	800a0a4 <_svfiprintf_r+0x17c>
 800a00c:	b1b0      	cbz	r0, 800a03c <_svfiprintf_r+0x114>
 800a00e:	9207      	str	r2, [sp, #28]
 800a010:	e014      	b.n	800a03c <_svfiprintf_r+0x114>
 800a012:	eba0 0308 	sub.w	r3, r0, r8
 800a016:	fa09 f303 	lsl.w	r3, r9, r3
 800a01a:	4313      	orrs	r3, r2
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	46a2      	mov	sl, r4
 800a020:	e7d2      	b.n	8009fc8 <_svfiprintf_r+0xa0>
 800a022:	9b03      	ldr	r3, [sp, #12]
 800a024:	1d19      	adds	r1, r3, #4
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	9103      	str	r1, [sp, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bfbb      	ittet	lt
 800a02e:	425b      	neglt	r3, r3
 800a030:	f042 0202 	orrlt.w	r2, r2, #2
 800a034:	9307      	strge	r3, [sp, #28]
 800a036:	9307      	strlt	r3, [sp, #28]
 800a038:	bfb8      	it	lt
 800a03a:	9204      	strlt	r2, [sp, #16]
 800a03c:	7823      	ldrb	r3, [r4, #0]
 800a03e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a040:	d10a      	bne.n	800a058 <_svfiprintf_r+0x130>
 800a042:	7863      	ldrb	r3, [r4, #1]
 800a044:	2b2a      	cmp	r3, #42	@ 0x2a
 800a046:	d132      	bne.n	800a0ae <_svfiprintf_r+0x186>
 800a048:	9b03      	ldr	r3, [sp, #12]
 800a04a:	1d1a      	adds	r2, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	9203      	str	r2, [sp, #12]
 800a050:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a054:	3402      	adds	r4, #2
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a11c <_svfiprintf_r+0x1f4>
 800a05c:	7821      	ldrb	r1, [r4, #0]
 800a05e:	2203      	movs	r2, #3
 800a060:	4650      	mov	r0, sl
 800a062:	f7f6 f8cd 	bl	8000200 <memchr>
 800a066:	b138      	cbz	r0, 800a078 <_svfiprintf_r+0x150>
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	eba0 000a 	sub.w	r0, r0, sl
 800a06e:	2240      	movs	r2, #64	@ 0x40
 800a070:	4082      	lsls	r2, r0
 800a072:	4313      	orrs	r3, r2
 800a074:	3401      	adds	r4, #1
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a07c:	4824      	ldr	r0, [pc, #144]	@ (800a110 <_svfiprintf_r+0x1e8>)
 800a07e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a082:	2206      	movs	r2, #6
 800a084:	f7f6 f8bc 	bl	8000200 <memchr>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d036      	beq.n	800a0fa <_svfiprintf_r+0x1d2>
 800a08c:	4b21      	ldr	r3, [pc, #132]	@ (800a114 <_svfiprintf_r+0x1ec>)
 800a08e:	bb1b      	cbnz	r3, 800a0d8 <_svfiprintf_r+0x1b0>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	3307      	adds	r3, #7
 800a094:	f023 0307 	bic.w	r3, r3, #7
 800a098:	3308      	adds	r3, #8
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a09e:	4433      	add	r3, r6
 800a0a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a2:	e76a      	b.n	8009f7a <_svfiprintf_r+0x52>
 800a0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	e7a8      	b.n	800a000 <_svfiprintf_r+0xd8>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	3401      	adds	r4, #1
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f04f 0c0a 	mov.w	ip, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c0:	3a30      	subs	r2, #48	@ 0x30
 800a0c2:	2a09      	cmp	r2, #9
 800a0c4:	d903      	bls.n	800a0ce <_svfiprintf_r+0x1a6>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0c6      	beq.n	800a058 <_svfiprintf_r+0x130>
 800a0ca:	9105      	str	r1, [sp, #20]
 800a0cc:	e7c4      	b.n	800a058 <_svfiprintf_r+0x130>
 800a0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e7f0      	b.n	800a0ba <_svfiprintf_r+0x192>
 800a0d8:	ab03      	add	r3, sp, #12
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	462a      	mov	r2, r5
 800a0de:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <_svfiprintf_r+0x1f0>)
 800a0e0:	a904      	add	r1, sp, #16
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	f3af 8000 	nop.w
 800a0e8:	1c42      	adds	r2, r0, #1
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	d1d6      	bne.n	800a09c <_svfiprintf_r+0x174>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	065b      	lsls	r3, r3, #25
 800a0f2:	f53f af2d 	bmi.w	8009f50 <_svfiprintf_r+0x28>
 800a0f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0f8:	e72c      	b.n	8009f54 <_svfiprintf_r+0x2c>
 800a0fa:	ab03      	add	r3, sp, #12
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	462a      	mov	r2, r5
 800a100:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <_svfiprintf_r+0x1f0>)
 800a102:	a904      	add	r1, sp, #16
 800a104:	4638      	mov	r0, r7
 800a106:	f000 fb87 	bl	800a818 <_printf_i>
 800a10a:	e7ed      	b.n	800a0e8 <_svfiprintf_r+0x1c0>
 800a10c:	0800bc51 	.word	0x0800bc51
 800a110:	0800bc5b 	.word	0x0800bc5b
 800a114:	00000000 	.word	0x00000000
 800a118:	08009e71 	.word	0x08009e71
 800a11c:	0800bc57 	.word	0x0800bc57

0800a120 <_sungetc_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	1c4b      	adds	r3, r1, #1
 800a124:	4614      	mov	r4, r2
 800a126:	d103      	bne.n	800a130 <_sungetc_r+0x10>
 800a128:	f04f 35ff 	mov.w	r5, #4294967295
 800a12c:	4628      	mov	r0, r5
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	8993      	ldrh	r3, [r2, #12]
 800a132:	f023 0320 	bic.w	r3, r3, #32
 800a136:	8193      	strh	r3, [r2, #12]
 800a138:	6853      	ldr	r3, [r2, #4]
 800a13a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a13c:	b2cd      	uxtb	r5, r1
 800a13e:	b18a      	cbz	r2, 800a164 <_sungetc_r+0x44>
 800a140:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a142:	429a      	cmp	r2, r3
 800a144:	dd08      	ble.n	800a158 <_sungetc_r+0x38>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	1e5a      	subs	r2, r3, #1
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	3301      	adds	r3, #1
 800a154:	6063      	str	r3, [r4, #4]
 800a156:	e7e9      	b.n	800a12c <_sungetc_r+0xc>
 800a158:	4621      	mov	r1, r4
 800a15a:	f000 ff24 	bl	800afa6 <__submore>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d0f1      	beq.n	800a146 <_sungetc_r+0x26>
 800a162:	e7e1      	b.n	800a128 <_sungetc_r+0x8>
 800a164:	6921      	ldr	r1, [r4, #16]
 800a166:	6822      	ldr	r2, [r4, #0]
 800a168:	b141      	cbz	r1, 800a17c <_sungetc_r+0x5c>
 800a16a:	4291      	cmp	r1, r2
 800a16c:	d206      	bcs.n	800a17c <_sungetc_r+0x5c>
 800a16e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a172:	42a9      	cmp	r1, r5
 800a174:	d102      	bne.n	800a17c <_sungetc_r+0x5c>
 800a176:	3a01      	subs	r2, #1
 800a178:	6022      	str	r2, [r4, #0]
 800a17a:	e7ea      	b.n	800a152 <_sungetc_r+0x32>
 800a17c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a180:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a184:	6363      	str	r3, [r4, #52]	@ 0x34
 800a186:	2303      	movs	r3, #3
 800a188:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a18a:	4623      	mov	r3, r4
 800a18c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	2301      	movs	r3, #1
 800a194:	e7de      	b.n	800a154 <_sungetc_r+0x34>

0800a196 <__ssrefill_r>:
 800a196:	b510      	push	{r4, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a19c:	b169      	cbz	r1, 800a1ba <__ssrefill_r+0x24>
 800a19e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1a2:	4299      	cmp	r1, r3
 800a1a4:	d001      	beq.n	800a1aa <__ssrefill_r+0x14>
 800a1a6:	f7ff fd63 	bl	8009c70 <_free_r>
 800a1aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1ac:	6063      	str	r3, [r4, #4]
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	6360      	str	r0, [r4, #52]	@ 0x34
 800a1b2:	b113      	cbz	r3, 800a1ba <__ssrefill_r+0x24>
 800a1b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	f043 0320 	orr.w	r3, r3, #32
 800a1c8:	81a3      	strh	r3, [r4, #12]
 800a1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ce:	e7f3      	b.n	800a1b8 <__ssrefill_r+0x22>

0800a1d0 <__ssvfiscanf_r>:
 800a1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a1da:	2100      	movs	r1, #0
 800a1dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a1e0:	49a5      	ldr	r1, [pc, #660]	@ (800a478 <__ssvfiscanf_r+0x2a8>)
 800a1e2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a1e4:	f10d 0804 	add.w	r8, sp, #4
 800a1e8:	49a4      	ldr	r1, [pc, #656]	@ (800a47c <__ssvfiscanf_r+0x2ac>)
 800a1ea:	4fa5      	ldr	r7, [pc, #660]	@ (800a480 <__ssvfiscanf_r+0x2b0>)
 800a1ec:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a1f0:	4606      	mov	r6, r0
 800a1f2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	7813      	ldrb	r3, [r2, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 8158 	beq.w	800a4ae <__ssvfiscanf_r+0x2de>
 800a1fe:	5cf9      	ldrb	r1, [r7, r3]
 800a200:	f011 0108 	ands.w	r1, r1, #8
 800a204:	f102 0501 	add.w	r5, r2, #1
 800a208:	d019      	beq.n	800a23e <__ssvfiscanf_r+0x6e>
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd0f      	ble.n	800a230 <__ssvfiscanf_r+0x60>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	781a      	ldrb	r2, [r3, #0]
 800a214:	5cba      	ldrb	r2, [r7, r2]
 800a216:	0712      	lsls	r2, r2, #28
 800a218:	d401      	bmi.n	800a21e <__ssvfiscanf_r+0x4e>
 800a21a:	462a      	mov	r2, r5
 800a21c:	e7eb      	b.n	800a1f6 <__ssvfiscanf_r+0x26>
 800a21e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a220:	3201      	adds	r2, #1
 800a222:	9245      	str	r2, [sp, #276]	@ 0x114
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	3301      	adds	r3, #1
 800a228:	3a01      	subs	r2, #1
 800a22a:	6062      	str	r2, [r4, #4]
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	e7ec      	b.n	800a20a <__ssvfiscanf_r+0x3a>
 800a230:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a232:	4621      	mov	r1, r4
 800a234:	4630      	mov	r0, r6
 800a236:	4798      	blx	r3
 800a238:	2800      	cmp	r0, #0
 800a23a:	d0e9      	beq.n	800a210 <__ssvfiscanf_r+0x40>
 800a23c:	e7ed      	b.n	800a21a <__ssvfiscanf_r+0x4a>
 800a23e:	2b25      	cmp	r3, #37	@ 0x25
 800a240:	d012      	beq.n	800a268 <__ssvfiscanf_r+0x98>
 800a242:	4699      	mov	r9, r3
 800a244:	6863      	ldr	r3, [r4, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f340 8093 	ble.w	800a372 <__ssvfiscanf_r+0x1a2>
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	7813      	ldrb	r3, [r2, #0]
 800a250:	454b      	cmp	r3, r9
 800a252:	f040 812c 	bne.w	800a4ae <__ssvfiscanf_r+0x2de>
 800a256:	6863      	ldr	r3, [r4, #4]
 800a258:	3b01      	subs	r3, #1
 800a25a:	6063      	str	r3, [r4, #4]
 800a25c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a25e:	3201      	adds	r2, #1
 800a260:	3301      	adds	r3, #1
 800a262:	6022      	str	r2, [r4, #0]
 800a264:	9345      	str	r3, [sp, #276]	@ 0x114
 800a266:	e7d8      	b.n	800a21a <__ssvfiscanf_r+0x4a>
 800a268:	9141      	str	r1, [sp, #260]	@ 0x104
 800a26a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a26c:	7853      	ldrb	r3, [r2, #1]
 800a26e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a270:	bf02      	ittt	eq
 800a272:	2310      	moveq	r3, #16
 800a274:	1c95      	addeq	r5, r2, #2
 800a276:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a278:	220a      	movs	r2, #10
 800a27a:	46a9      	mov	r9, r5
 800a27c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a280:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a284:	2b09      	cmp	r3, #9
 800a286:	d91e      	bls.n	800a2c6 <__ssvfiscanf_r+0xf6>
 800a288:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a484 <__ssvfiscanf_r+0x2b4>
 800a28c:	2203      	movs	r2, #3
 800a28e:	4650      	mov	r0, sl
 800a290:	f7f5 ffb6 	bl	8000200 <memchr>
 800a294:	b138      	cbz	r0, 800a2a6 <__ssvfiscanf_r+0xd6>
 800a296:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a298:	eba0 000a 	sub.w	r0, r0, sl
 800a29c:	2301      	movs	r3, #1
 800a29e:	4083      	lsls	r3, r0
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	9341      	str	r3, [sp, #260]	@ 0x104
 800a2a4:	464d      	mov	r5, r9
 800a2a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2aa:	2b78      	cmp	r3, #120	@ 0x78
 800a2ac:	d806      	bhi.n	800a2bc <__ssvfiscanf_r+0xec>
 800a2ae:	2b57      	cmp	r3, #87	@ 0x57
 800a2b0:	d810      	bhi.n	800a2d4 <__ssvfiscanf_r+0x104>
 800a2b2:	2b25      	cmp	r3, #37	@ 0x25
 800a2b4:	d0c5      	beq.n	800a242 <__ssvfiscanf_r+0x72>
 800a2b6:	d857      	bhi.n	800a368 <__ssvfiscanf_r+0x198>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d065      	beq.n	800a388 <__ssvfiscanf_r+0x1b8>
 800a2bc:	2303      	movs	r3, #3
 800a2be:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a2c0:	230a      	movs	r3, #10
 800a2c2:	9342      	str	r3, [sp, #264]	@ 0x108
 800a2c4:	e078      	b.n	800a3b8 <__ssvfiscanf_r+0x1e8>
 800a2c6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a2c8:	fb02 1103 	mla	r1, r2, r3, r1
 800a2cc:	3930      	subs	r1, #48	@ 0x30
 800a2ce:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a2d0:	464d      	mov	r5, r9
 800a2d2:	e7d2      	b.n	800a27a <__ssvfiscanf_r+0xaa>
 800a2d4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a2d8:	2a20      	cmp	r2, #32
 800a2da:	d8ef      	bhi.n	800a2bc <__ssvfiscanf_r+0xec>
 800a2dc:	a101      	add	r1, pc, #4	@ (adr r1, 800a2e4 <__ssvfiscanf_r+0x114>)
 800a2de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a397 	.word	0x0800a397
 800a2e8:	0800a2bd 	.word	0x0800a2bd
 800a2ec:	0800a2bd 	.word	0x0800a2bd
 800a2f0:	0800a3f1 	.word	0x0800a3f1
 800a2f4:	0800a2bd 	.word	0x0800a2bd
 800a2f8:	0800a2bd 	.word	0x0800a2bd
 800a2fc:	0800a2bd 	.word	0x0800a2bd
 800a300:	0800a2bd 	.word	0x0800a2bd
 800a304:	0800a2bd 	.word	0x0800a2bd
 800a308:	0800a2bd 	.word	0x0800a2bd
 800a30c:	0800a2bd 	.word	0x0800a2bd
 800a310:	0800a407 	.word	0x0800a407
 800a314:	0800a3ed 	.word	0x0800a3ed
 800a318:	0800a36f 	.word	0x0800a36f
 800a31c:	0800a36f 	.word	0x0800a36f
 800a320:	0800a36f 	.word	0x0800a36f
 800a324:	0800a2bd 	.word	0x0800a2bd
 800a328:	0800a3a9 	.word	0x0800a3a9
 800a32c:	0800a2bd 	.word	0x0800a2bd
 800a330:	0800a2bd 	.word	0x0800a2bd
 800a334:	0800a2bd 	.word	0x0800a2bd
 800a338:	0800a2bd 	.word	0x0800a2bd
 800a33c:	0800a417 	.word	0x0800a417
 800a340:	0800a3b1 	.word	0x0800a3b1
 800a344:	0800a38f 	.word	0x0800a38f
 800a348:	0800a2bd 	.word	0x0800a2bd
 800a34c:	0800a2bd 	.word	0x0800a2bd
 800a350:	0800a413 	.word	0x0800a413
 800a354:	0800a2bd 	.word	0x0800a2bd
 800a358:	0800a3ed 	.word	0x0800a3ed
 800a35c:	0800a2bd 	.word	0x0800a2bd
 800a360:	0800a2bd 	.word	0x0800a2bd
 800a364:	0800a397 	.word	0x0800a397
 800a368:	3b45      	subs	r3, #69	@ 0x45
 800a36a:	2b02      	cmp	r3, #2
 800a36c:	d8a6      	bhi.n	800a2bc <__ssvfiscanf_r+0xec>
 800a36e:	2305      	movs	r3, #5
 800a370:	e021      	b.n	800a3b6 <__ssvfiscanf_r+0x1e6>
 800a372:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a374:	4621      	mov	r1, r4
 800a376:	4630      	mov	r0, r6
 800a378:	4798      	blx	r3
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f43f af66 	beq.w	800a24c <__ssvfiscanf_r+0x7c>
 800a380:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a382:	2800      	cmp	r0, #0
 800a384:	f040 808b 	bne.w	800a49e <__ssvfiscanf_r+0x2ce>
 800a388:	f04f 30ff 	mov.w	r0, #4294967295
 800a38c:	e08b      	b.n	800a4a6 <__ssvfiscanf_r+0x2d6>
 800a38e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a390:	f042 0220 	orr.w	r2, r2, #32
 800a394:	9241      	str	r2, [sp, #260]	@ 0x104
 800a396:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a39c:	9241      	str	r2, [sp, #260]	@ 0x104
 800a39e:	2210      	movs	r2, #16
 800a3a0:	2b6e      	cmp	r3, #110	@ 0x6e
 800a3a2:	9242      	str	r2, [sp, #264]	@ 0x108
 800a3a4:	d902      	bls.n	800a3ac <__ssvfiscanf_r+0x1dc>
 800a3a6:	e005      	b.n	800a3b4 <__ssvfiscanf_r+0x1e4>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9342      	str	r3, [sp, #264]	@ 0x108
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e002      	b.n	800a3b6 <__ssvfiscanf_r+0x1e6>
 800a3b0:	2308      	movs	r3, #8
 800a3b2:	9342      	str	r3, [sp, #264]	@ 0x108
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a3b8:	6863      	ldr	r3, [r4, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dd39      	ble.n	800a432 <__ssvfiscanf_r+0x262>
 800a3be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a3c0:	0659      	lsls	r1, r3, #25
 800a3c2:	d404      	bmi.n	800a3ce <__ssvfiscanf_r+0x1fe>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	781a      	ldrb	r2, [r3, #0]
 800a3c8:	5cba      	ldrb	r2, [r7, r2]
 800a3ca:	0712      	lsls	r2, r2, #28
 800a3cc:	d438      	bmi.n	800a440 <__ssvfiscanf_r+0x270>
 800a3ce:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	dc47      	bgt.n	800a464 <__ssvfiscanf_r+0x294>
 800a3d4:	466b      	mov	r3, sp
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	a941      	add	r1, sp, #260	@ 0x104
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f000 fb3c 	bl	800aa58 <_scanf_chars>
 800a3e0:	2801      	cmp	r0, #1
 800a3e2:	d064      	beq.n	800a4ae <__ssvfiscanf_r+0x2de>
 800a3e4:	2802      	cmp	r0, #2
 800a3e6:	f47f af18 	bne.w	800a21a <__ssvfiscanf_r+0x4a>
 800a3ea:	e7c9      	b.n	800a380 <__ssvfiscanf_r+0x1b0>
 800a3ec:	220a      	movs	r2, #10
 800a3ee:	e7d7      	b.n	800a3a0 <__ssvfiscanf_r+0x1d0>
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4640      	mov	r0, r8
 800a3f4:	f000 fd9e 	bl	800af34 <__sccl>
 800a3f8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3fe:	9341      	str	r3, [sp, #260]	@ 0x104
 800a400:	4605      	mov	r5, r0
 800a402:	2301      	movs	r3, #1
 800a404:	e7d7      	b.n	800a3b6 <__ssvfiscanf_r+0x1e6>
 800a406:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a40c:	9341      	str	r3, [sp, #260]	@ 0x104
 800a40e:	2300      	movs	r3, #0
 800a410:	e7d1      	b.n	800a3b6 <__ssvfiscanf_r+0x1e6>
 800a412:	2302      	movs	r3, #2
 800a414:	e7cf      	b.n	800a3b6 <__ssvfiscanf_r+0x1e6>
 800a416:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a418:	06c3      	lsls	r3, r0, #27
 800a41a:	f53f aefe 	bmi.w	800a21a <__ssvfiscanf_r+0x4a>
 800a41e:	9b00      	ldr	r3, [sp, #0]
 800a420:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a422:	1d19      	adds	r1, r3, #4
 800a424:	9100      	str	r1, [sp, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	07c0      	lsls	r0, r0, #31
 800a42a:	bf4c      	ite	mi
 800a42c:	801a      	strhmi	r2, [r3, #0]
 800a42e:	601a      	strpl	r2, [r3, #0]
 800a430:	e6f3      	b.n	800a21a <__ssvfiscanf_r+0x4a>
 800a432:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a434:	4621      	mov	r1, r4
 800a436:	4630      	mov	r0, r6
 800a438:	4798      	blx	r3
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d0bf      	beq.n	800a3be <__ssvfiscanf_r+0x1ee>
 800a43e:	e79f      	b.n	800a380 <__ssvfiscanf_r+0x1b0>
 800a440:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a442:	3201      	adds	r2, #1
 800a444:	9245      	str	r2, [sp, #276]	@ 0x114
 800a446:	6862      	ldr	r2, [r4, #4]
 800a448:	3a01      	subs	r2, #1
 800a44a:	2a00      	cmp	r2, #0
 800a44c:	6062      	str	r2, [r4, #4]
 800a44e:	dd02      	ble.n	800a456 <__ssvfiscanf_r+0x286>
 800a450:	3301      	adds	r3, #1
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	e7b6      	b.n	800a3c4 <__ssvfiscanf_r+0x1f4>
 800a456:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a458:	4621      	mov	r1, r4
 800a45a:	4630      	mov	r0, r6
 800a45c:	4798      	blx	r3
 800a45e:	2800      	cmp	r0, #0
 800a460:	d0b0      	beq.n	800a3c4 <__ssvfiscanf_r+0x1f4>
 800a462:	e78d      	b.n	800a380 <__ssvfiscanf_r+0x1b0>
 800a464:	2b04      	cmp	r3, #4
 800a466:	dc0f      	bgt.n	800a488 <__ssvfiscanf_r+0x2b8>
 800a468:	466b      	mov	r3, sp
 800a46a:	4622      	mov	r2, r4
 800a46c:	a941      	add	r1, sp, #260	@ 0x104
 800a46e:	4630      	mov	r0, r6
 800a470:	f000 fb4c 	bl	800ab0c <_scanf_i>
 800a474:	e7b4      	b.n	800a3e0 <__ssvfiscanf_r+0x210>
 800a476:	bf00      	nop
 800a478:	0800a121 	.word	0x0800a121
 800a47c:	0800a197 	.word	0x0800a197
 800a480:	0800bca0 	.word	0x0800bca0
 800a484:	0800bc57 	.word	0x0800bc57
 800a488:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b4 <__ssvfiscanf_r+0x2e4>)
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f43f aec5 	beq.w	800a21a <__ssvfiscanf_r+0x4a>
 800a490:	466b      	mov	r3, sp
 800a492:	4622      	mov	r2, r4
 800a494:	a941      	add	r1, sp, #260	@ 0x104
 800a496:	4630      	mov	r0, r6
 800a498:	f3af 8000 	nop.w
 800a49c:	e7a0      	b.n	800a3e0 <__ssvfiscanf_r+0x210>
 800a49e:	89a3      	ldrh	r3, [r4, #12]
 800a4a0:	065b      	lsls	r3, r3, #25
 800a4a2:	f53f af71 	bmi.w	800a388 <__ssvfiscanf_r+0x1b8>
 800a4a6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ae:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a4b0:	e7f9      	b.n	800a4a6 <__ssvfiscanf_r+0x2d6>
 800a4b2:	bf00      	nop
 800a4b4:	00000000 	.word	0x00000000

0800a4b8 <__sfputc_r>:
 800a4b8:	6893      	ldr	r3, [r2, #8]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	b410      	push	{r4}
 800a4c0:	6093      	str	r3, [r2, #8]
 800a4c2:	da08      	bge.n	800a4d6 <__sfputc_r+0x1e>
 800a4c4:	6994      	ldr	r4, [r2, #24]
 800a4c6:	42a3      	cmp	r3, r4
 800a4c8:	db01      	blt.n	800a4ce <__sfputc_r+0x16>
 800a4ca:	290a      	cmp	r1, #10
 800a4cc:	d103      	bne.n	800a4d6 <__sfputc_r+0x1e>
 800a4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4d2:	f7ff b9e8 	b.w	80098a6 <__swbuf_r>
 800a4d6:	6813      	ldr	r3, [r2, #0]
 800a4d8:	1c58      	adds	r0, r3, #1
 800a4da:	6010      	str	r0, [r2, #0]
 800a4dc:	7019      	strb	r1, [r3, #0]
 800a4de:	4608      	mov	r0, r1
 800a4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <__sfputs_r>:
 800a4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	460f      	mov	r7, r1
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	18d5      	adds	r5, r2, r3
 800a4f0:	42ac      	cmp	r4, r5
 800a4f2:	d101      	bne.n	800a4f8 <__sfputs_r+0x12>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	e007      	b.n	800a508 <__sfputs_r+0x22>
 800a4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fc:	463a      	mov	r2, r7
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ffda 	bl	800a4b8 <__sfputc_r>
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	d1f3      	bne.n	800a4f0 <__sfputs_r+0xa>
 800a508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a50c <_vfiprintf_r>:
 800a50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a510:	460d      	mov	r5, r1
 800a512:	b09d      	sub	sp, #116	@ 0x74
 800a514:	4614      	mov	r4, r2
 800a516:	4698      	mov	r8, r3
 800a518:	4606      	mov	r6, r0
 800a51a:	b118      	cbz	r0, 800a524 <_vfiprintf_r+0x18>
 800a51c:	6a03      	ldr	r3, [r0, #32]
 800a51e:	b90b      	cbnz	r3, 800a524 <_vfiprintf_r+0x18>
 800a520:	f7ff f88c 	bl	800963c <__sinit>
 800a524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a526:	07d9      	lsls	r1, r3, #31
 800a528:	d405      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_vfiprintf_r+0x2a>
 800a530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a532:	f7ff fb6e 	bl	8009c12 <__retarget_lock_acquire_recursive>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	071b      	lsls	r3, r3, #28
 800a53a:	d501      	bpl.n	800a540 <_vfiprintf_r+0x34>
 800a53c:	692b      	ldr	r3, [r5, #16]
 800a53e:	b99b      	cbnz	r3, 800a568 <_vfiprintf_r+0x5c>
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff f9ee 	bl	8009924 <__swsetup_r>
 800a548:	b170      	cbz	r0, 800a568 <_vfiprintf_r+0x5c>
 800a54a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a54c:	07dc      	lsls	r4, r3, #31
 800a54e:	d504      	bpl.n	800a55a <_vfiprintf_r+0x4e>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	b01d      	add	sp, #116	@ 0x74
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	0598      	lsls	r0, r3, #22
 800a55e:	d4f7      	bmi.n	800a550 <_vfiprintf_r+0x44>
 800a560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a562:	f7ff fb57 	bl	8009c14 <__retarget_lock_release_recursive>
 800a566:	e7f3      	b.n	800a550 <_vfiprintf_r+0x44>
 800a568:	2300      	movs	r3, #0
 800a56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56c:	2320      	movs	r3, #32
 800a56e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a572:	f8cd 800c 	str.w	r8, [sp, #12]
 800a576:	2330      	movs	r3, #48	@ 0x30
 800a578:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a728 <_vfiprintf_r+0x21c>
 800a57c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a580:	f04f 0901 	mov.w	r9, #1
 800a584:	4623      	mov	r3, r4
 800a586:	469a      	mov	sl, r3
 800a588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a58c:	b10a      	cbz	r2, 800a592 <_vfiprintf_r+0x86>
 800a58e:	2a25      	cmp	r2, #37	@ 0x25
 800a590:	d1f9      	bne.n	800a586 <_vfiprintf_r+0x7a>
 800a592:	ebba 0b04 	subs.w	fp, sl, r4
 800a596:	d00b      	beq.n	800a5b0 <_vfiprintf_r+0xa4>
 800a598:	465b      	mov	r3, fp
 800a59a:	4622      	mov	r2, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7ff ffa1 	bl	800a4e6 <__sfputs_r>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	f000 80a7 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ac:	445a      	add	r2, fp
 800a5ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 809f 	beq.w	800a6f8 <_vfiprintf_r+0x1ec>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5c4:	f10a 0a01 	add.w	sl, sl, #1
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	9307      	str	r3, [sp, #28]
 800a5cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5d2:	4654      	mov	r4, sl
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5da:	4853      	ldr	r0, [pc, #332]	@ (800a728 <_vfiprintf_r+0x21c>)
 800a5dc:	f7f5 fe10 	bl	8000200 <memchr>
 800a5e0:	9a04      	ldr	r2, [sp, #16]
 800a5e2:	b9d8      	cbnz	r0, 800a61c <_vfiprintf_r+0x110>
 800a5e4:	06d1      	lsls	r1, r2, #27
 800a5e6:	bf44      	itt	mi
 800a5e8:	2320      	movmi	r3, #32
 800a5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5ee:	0713      	lsls	r3, r2, #28
 800a5f0:	bf44      	itt	mi
 800a5f2:	232b      	movmi	r3, #43	@ 0x2b
 800a5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5fe:	d015      	beq.n	800a62c <_vfiprintf_r+0x120>
 800a600:	9a07      	ldr	r2, [sp, #28]
 800a602:	4654      	mov	r4, sl
 800a604:	2000      	movs	r0, #0
 800a606:	f04f 0c0a 	mov.w	ip, #10
 800a60a:	4621      	mov	r1, r4
 800a60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a610:	3b30      	subs	r3, #48	@ 0x30
 800a612:	2b09      	cmp	r3, #9
 800a614:	d94b      	bls.n	800a6ae <_vfiprintf_r+0x1a2>
 800a616:	b1b0      	cbz	r0, 800a646 <_vfiprintf_r+0x13a>
 800a618:	9207      	str	r2, [sp, #28]
 800a61a:	e014      	b.n	800a646 <_vfiprintf_r+0x13a>
 800a61c:	eba0 0308 	sub.w	r3, r0, r8
 800a620:	fa09 f303 	lsl.w	r3, r9, r3
 800a624:	4313      	orrs	r3, r2
 800a626:	9304      	str	r3, [sp, #16]
 800a628:	46a2      	mov	sl, r4
 800a62a:	e7d2      	b.n	800a5d2 <_vfiprintf_r+0xc6>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	1d19      	adds	r1, r3, #4
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	9103      	str	r1, [sp, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	bfbb      	ittet	lt
 800a638:	425b      	neglt	r3, r3
 800a63a:	f042 0202 	orrlt.w	r2, r2, #2
 800a63e:	9307      	strge	r3, [sp, #28]
 800a640:	9307      	strlt	r3, [sp, #28]
 800a642:	bfb8      	it	lt
 800a644:	9204      	strlt	r2, [sp, #16]
 800a646:	7823      	ldrb	r3, [r4, #0]
 800a648:	2b2e      	cmp	r3, #46	@ 0x2e
 800a64a:	d10a      	bne.n	800a662 <_vfiprintf_r+0x156>
 800a64c:	7863      	ldrb	r3, [r4, #1]
 800a64e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a650:	d132      	bne.n	800a6b8 <_vfiprintf_r+0x1ac>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	1d1a      	adds	r2, r3, #4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	9203      	str	r2, [sp, #12]
 800a65a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a65e:	3402      	adds	r4, #2
 800a660:	9305      	str	r3, [sp, #20]
 800a662:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a738 <_vfiprintf_r+0x22c>
 800a666:	7821      	ldrb	r1, [r4, #0]
 800a668:	2203      	movs	r2, #3
 800a66a:	4650      	mov	r0, sl
 800a66c:	f7f5 fdc8 	bl	8000200 <memchr>
 800a670:	b138      	cbz	r0, 800a682 <_vfiprintf_r+0x176>
 800a672:	9b04      	ldr	r3, [sp, #16]
 800a674:	eba0 000a 	sub.w	r0, r0, sl
 800a678:	2240      	movs	r2, #64	@ 0x40
 800a67a:	4082      	lsls	r2, r0
 800a67c:	4313      	orrs	r3, r2
 800a67e:	3401      	adds	r4, #1
 800a680:	9304      	str	r3, [sp, #16]
 800a682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a686:	4829      	ldr	r0, [pc, #164]	@ (800a72c <_vfiprintf_r+0x220>)
 800a688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a68c:	2206      	movs	r2, #6
 800a68e:	f7f5 fdb7 	bl	8000200 <memchr>
 800a692:	2800      	cmp	r0, #0
 800a694:	d03f      	beq.n	800a716 <_vfiprintf_r+0x20a>
 800a696:	4b26      	ldr	r3, [pc, #152]	@ (800a730 <_vfiprintf_r+0x224>)
 800a698:	bb1b      	cbnz	r3, 800a6e2 <_vfiprintf_r+0x1d6>
 800a69a:	9b03      	ldr	r3, [sp, #12]
 800a69c:	3307      	adds	r3, #7
 800a69e:	f023 0307 	bic.w	r3, r3, #7
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	443b      	add	r3, r7
 800a6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ac:	e76a      	b.n	800a584 <_vfiprintf_r+0x78>
 800a6ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b2:	460c      	mov	r4, r1
 800a6b4:	2001      	movs	r0, #1
 800a6b6:	e7a8      	b.n	800a60a <_vfiprintf_r+0xfe>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	f04f 0c0a 	mov.w	ip, #10
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6ca:	3a30      	subs	r2, #48	@ 0x30
 800a6cc:	2a09      	cmp	r2, #9
 800a6ce:	d903      	bls.n	800a6d8 <_vfiprintf_r+0x1cc>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0c6      	beq.n	800a662 <_vfiprintf_r+0x156>
 800a6d4:	9105      	str	r1, [sp, #20]
 800a6d6:	e7c4      	b.n	800a662 <_vfiprintf_r+0x156>
 800a6d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6dc:	4604      	mov	r4, r0
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e7f0      	b.n	800a6c4 <_vfiprintf_r+0x1b8>
 800a6e2:	ab03      	add	r3, sp, #12
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <_vfiprintf_r+0x228>)
 800a6ea:	a904      	add	r1, sp, #16
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f3af 8000 	nop.w
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	1c78      	adds	r0, r7, #1
 800a6f6:	d1d6      	bne.n	800a6a6 <_vfiprintf_r+0x19a>
 800a6f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6fa:	07d9      	lsls	r1, r3, #31
 800a6fc:	d405      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	059a      	lsls	r2, r3, #22
 800a702:	d402      	bmi.n	800a70a <_vfiprintf_r+0x1fe>
 800a704:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a706:	f7ff fa85 	bl	8009c14 <__retarget_lock_release_recursive>
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	065b      	lsls	r3, r3, #25
 800a70e:	f53f af1f 	bmi.w	800a550 <_vfiprintf_r+0x44>
 800a712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a714:	e71e      	b.n	800a554 <_vfiprintf_r+0x48>
 800a716:	ab03      	add	r3, sp, #12
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	462a      	mov	r2, r5
 800a71c:	4b05      	ldr	r3, [pc, #20]	@ (800a734 <_vfiprintf_r+0x228>)
 800a71e:	a904      	add	r1, sp, #16
 800a720:	4630      	mov	r0, r6
 800a722:	f000 f879 	bl	800a818 <_printf_i>
 800a726:	e7e4      	b.n	800a6f2 <_vfiprintf_r+0x1e6>
 800a728:	0800bc51 	.word	0x0800bc51
 800a72c:	0800bc5b 	.word	0x0800bc5b
 800a730:	00000000 	.word	0x00000000
 800a734:	0800a4e7 	.word	0x0800a4e7
 800a738:	0800bc57 	.word	0x0800bc57

0800a73c <_printf_common>:
 800a73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a740:	4616      	mov	r6, r2
 800a742:	4698      	mov	r8, r3
 800a744:	688a      	ldr	r2, [r1, #8]
 800a746:	690b      	ldr	r3, [r1, #16]
 800a748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a74c:	4293      	cmp	r3, r2
 800a74e:	bfb8      	it	lt
 800a750:	4613      	movlt	r3, r2
 800a752:	6033      	str	r3, [r6, #0]
 800a754:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a758:	4607      	mov	r7, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	b10a      	cbz	r2, 800a762 <_printf_common+0x26>
 800a75e:	3301      	adds	r3, #1
 800a760:	6033      	str	r3, [r6, #0]
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	0699      	lsls	r1, r3, #26
 800a766:	bf42      	ittt	mi
 800a768:	6833      	ldrmi	r3, [r6, #0]
 800a76a:	3302      	addmi	r3, #2
 800a76c:	6033      	strmi	r3, [r6, #0]
 800a76e:	6825      	ldr	r5, [r4, #0]
 800a770:	f015 0506 	ands.w	r5, r5, #6
 800a774:	d106      	bne.n	800a784 <_printf_common+0x48>
 800a776:	f104 0a19 	add.w	sl, r4, #25
 800a77a:	68e3      	ldr	r3, [r4, #12]
 800a77c:	6832      	ldr	r2, [r6, #0]
 800a77e:	1a9b      	subs	r3, r3, r2
 800a780:	42ab      	cmp	r3, r5
 800a782:	dc26      	bgt.n	800a7d2 <_printf_common+0x96>
 800a784:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a788:	6822      	ldr	r2, [r4, #0]
 800a78a:	3b00      	subs	r3, #0
 800a78c:	bf18      	it	ne
 800a78e:	2301      	movne	r3, #1
 800a790:	0692      	lsls	r2, r2, #26
 800a792:	d42b      	bmi.n	800a7ec <_printf_common+0xb0>
 800a794:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a798:	4641      	mov	r1, r8
 800a79a:	4638      	mov	r0, r7
 800a79c:	47c8      	blx	r9
 800a79e:	3001      	adds	r0, #1
 800a7a0:	d01e      	beq.n	800a7e0 <_printf_common+0xa4>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	6922      	ldr	r2, [r4, #16]
 800a7a6:	f003 0306 	and.w	r3, r3, #6
 800a7aa:	2b04      	cmp	r3, #4
 800a7ac:	bf02      	ittt	eq
 800a7ae:	68e5      	ldreq	r5, [r4, #12]
 800a7b0:	6833      	ldreq	r3, [r6, #0]
 800a7b2:	1aed      	subeq	r5, r5, r3
 800a7b4:	68a3      	ldr	r3, [r4, #8]
 800a7b6:	bf0c      	ite	eq
 800a7b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7bc:	2500      	movne	r5, #0
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	bfc4      	itt	gt
 800a7c2:	1a9b      	subgt	r3, r3, r2
 800a7c4:	18ed      	addgt	r5, r5, r3
 800a7c6:	2600      	movs	r6, #0
 800a7c8:	341a      	adds	r4, #26
 800a7ca:	42b5      	cmp	r5, r6
 800a7cc:	d11a      	bne.n	800a804 <_printf_common+0xc8>
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	e008      	b.n	800a7e4 <_printf_common+0xa8>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	4652      	mov	r2, sl
 800a7d6:	4641      	mov	r1, r8
 800a7d8:	4638      	mov	r0, r7
 800a7da:	47c8      	blx	r9
 800a7dc:	3001      	adds	r0, #1
 800a7de:	d103      	bne.n	800a7e8 <_printf_common+0xac>
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e8:	3501      	adds	r5, #1
 800a7ea:	e7c6      	b.n	800a77a <_printf_common+0x3e>
 800a7ec:	18e1      	adds	r1, r4, r3
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	2030      	movs	r0, #48	@ 0x30
 800a7f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7f6:	4422      	add	r2, r4
 800a7f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a800:	3302      	adds	r3, #2
 800a802:	e7c7      	b.n	800a794 <_printf_common+0x58>
 800a804:	2301      	movs	r3, #1
 800a806:	4622      	mov	r2, r4
 800a808:	4641      	mov	r1, r8
 800a80a:	4638      	mov	r0, r7
 800a80c:	47c8      	blx	r9
 800a80e:	3001      	adds	r0, #1
 800a810:	d0e6      	beq.n	800a7e0 <_printf_common+0xa4>
 800a812:	3601      	adds	r6, #1
 800a814:	e7d9      	b.n	800a7ca <_printf_common+0x8e>
	...

0800a818 <_printf_i>:
 800a818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a81c:	7e0f      	ldrb	r7, [r1, #24]
 800a81e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a820:	2f78      	cmp	r7, #120	@ 0x78
 800a822:	4691      	mov	r9, r2
 800a824:	4680      	mov	r8, r0
 800a826:	460c      	mov	r4, r1
 800a828:	469a      	mov	sl, r3
 800a82a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a82e:	d807      	bhi.n	800a840 <_printf_i+0x28>
 800a830:	2f62      	cmp	r7, #98	@ 0x62
 800a832:	d80a      	bhi.n	800a84a <_printf_i+0x32>
 800a834:	2f00      	cmp	r7, #0
 800a836:	f000 80d2 	beq.w	800a9de <_printf_i+0x1c6>
 800a83a:	2f58      	cmp	r7, #88	@ 0x58
 800a83c:	f000 80b9 	beq.w	800a9b2 <_printf_i+0x19a>
 800a840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a848:	e03a      	b.n	800a8c0 <_printf_i+0xa8>
 800a84a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a84e:	2b15      	cmp	r3, #21
 800a850:	d8f6      	bhi.n	800a840 <_printf_i+0x28>
 800a852:	a101      	add	r1, pc, #4	@ (adr r1, 800a858 <_printf_i+0x40>)
 800a854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a858:	0800a8b1 	.word	0x0800a8b1
 800a85c:	0800a8c5 	.word	0x0800a8c5
 800a860:	0800a841 	.word	0x0800a841
 800a864:	0800a841 	.word	0x0800a841
 800a868:	0800a841 	.word	0x0800a841
 800a86c:	0800a841 	.word	0x0800a841
 800a870:	0800a8c5 	.word	0x0800a8c5
 800a874:	0800a841 	.word	0x0800a841
 800a878:	0800a841 	.word	0x0800a841
 800a87c:	0800a841 	.word	0x0800a841
 800a880:	0800a841 	.word	0x0800a841
 800a884:	0800a9c5 	.word	0x0800a9c5
 800a888:	0800a8ef 	.word	0x0800a8ef
 800a88c:	0800a97f 	.word	0x0800a97f
 800a890:	0800a841 	.word	0x0800a841
 800a894:	0800a841 	.word	0x0800a841
 800a898:	0800a9e7 	.word	0x0800a9e7
 800a89c:	0800a841 	.word	0x0800a841
 800a8a0:	0800a8ef 	.word	0x0800a8ef
 800a8a4:	0800a841 	.word	0x0800a841
 800a8a8:	0800a841 	.word	0x0800a841
 800a8ac:	0800a987 	.word	0x0800a987
 800a8b0:	6833      	ldr	r3, [r6, #0]
 800a8b2:	1d1a      	adds	r2, r3, #4
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6032      	str	r2, [r6, #0]
 800a8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e09d      	b.n	800aa00 <_printf_i+0x1e8>
 800a8c4:	6833      	ldr	r3, [r6, #0]
 800a8c6:	6820      	ldr	r0, [r4, #0]
 800a8c8:	1d19      	adds	r1, r3, #4
 800a8ca:	6031      	str	r1, [r6, #0]
 800a8cc:	0606      	lsls	r6, r0, #24
 800a8ce:	d501      	bpl.n	800a8d4 <_printf_i+0xbc>
 800a8d0:	681d      	ldr	r5, [r3, #0]
 800a8d2:	e003      	b.n	800a8dc <_printf_i+0xc4>
 800a8d4:	0645      	lsls	r5, r0, #25
 800a8d6:	d5fb      	bpl.n	800a8d0 <_printf_i+0xb8>
 800a8d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8dc:	2d00      	cmp	r5, #0
 800a8de:	da03      	bge.n	800a8e8 <_printf_i+0xd0>
 800a8e0:	232d      	movs	r3, #45	@ 0x2d
 800a8e2:	426d      	negs	r5, r5
 800a8e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8e8:	4859      	ldr	r0, [pc, #356]	@ (800aa50 <_printf_i+0x238>)
 800a8ea:	230a      	movs	r3, #10
 800a8ec:	e011      	b.n	800a912 <_printf_i+0xfa>
 800a8ee:	6821      	ldr	r1, [r4, #0]
 800a8f0:	6833      	ldr	r3, [r6, #0]
 800a8f2:	0608      	lsls	r0, r1, #24
 800a8f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8f8:	d402      	bmi.n	800a900 <_printf_i+0xe8>
 800a8fa:	0649      	lsls	r1, r1, #25
 800a8fc:	bf48      	it	mi
 800a8fe:	b2ad      	uxthmi	r5, r5
 800a900:	2f6f      	cmp	r7, #111	@ 0x6f
 800a902:	4853      	ldr	r0, [pc, #332]	@ (800aa50 <_printf_i+0x238>)
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	bf14      	ite	ne
 800a908:	230a      	movne	r3, #10
 800a90a:	2308      	moveq	r3, #8
 800a90c:	2100      	movs	r1, #0
 800a90e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a912:	6866      	ldr	r6, [r4, #4]
 800a914:	60a6      	str	r6, [r4, #8]
 800a916:	2e00      	cmp	r6, #0
 800a918:	bfa2      	ittt	ge
 800a91a:	6821      	ldrge	r1, [r4, #0]
 800a91c:	f021 0104 	bicge.w	r1, r1, #4
 800a920:	6021      	strge	r1, [r4, #0]
 800a922:	b90d      	cbnz	r5, 800a928 <_printf_i+0x110>
 800a924:	2e00      	cmp	r6, #0
 800a926:	d04b      	beq.n	800a9c0 <_printf_i+0x1a8>
 800a928:	4616      	mov	r6, r2
 800a92a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a92e:	fb03 5711 	mls	r7, r3, r1, r5
 800a932:	5dc7      	ldrb	r7, [r0, r7]
 800a934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a938:	462f      	mov	r7, r5
 800a93a:	42bb      	cmp	r3, r7
 800a93c:	460d      	mov	r5, r1
 800a93e:	d9f4      	bls.n	800a92a <_printf_i+0x112>
 800a940:	2b08      	cmp	r3, #8
 800a942:	d10b      	bne.n	800a95c <_printf_i+0x144>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	07df      	lsls	r7, r3, #31
 800a948:	d508      	bpl.n	800a95c <_printf_i+0x144>
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	6861      	ldr	r1, [r4, #4]
 800a94e:	4299      	cmp	r1, r3
 800a950:	bfde      	ittt	le
 800a952:	2330      	movle	r3, #48	@ 0x30
 800a954:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a95c:	1b92      	subs	r2, r2, r6
 800a95e:	6122      	str	r2, [r4, #16]
 800a960:	f8cd a000 	str.w	sl, [sp]
 800a964:	464b      	mov	r3, r9
 800a966:	aa03      	add	r2, sp, #12
 800a968:	4621      	mov	r1, r4
 800a96a:	4640      	mov	r0, r8
 800a96c:	f7ff fee6 	bl	800a73c <_printf_common>
 800a970:	3001      	adds	r0, #1
 800a972:	d14a      	bne.n	800aa0a <_printf_i+0x1f2>
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	b004      	add	sp, #16
 800a97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	f043 0320 	orr.w	r3, r3, #32
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	4833      	ldr	r0, [pc, #204]	@ (800aa54 <_printf_i+0x23c>)
 800a988:	2778      	movs	r7, #120	@ 0x78
 800a98a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	6831      	ldr	r1, [r6, #0]
 800a992:	061f      	lsls	r7, r3, #24
 800a994:	f851 5b04 	ldr.w	r5, [r1], #4
 800a998:	d402      	bmi.n	800a9a0 <_printf_i+0x188>
 800a99a:	065f      	lsls	r7, r3, #25
 800a99c:	bf48      	it	mi
 800a99e:	b2ad      	uxthmi	r5, r5
 800a9a0:	6031      	str	r1, [r6, #0]
 800a9a2:	07d9      	lsls	r1, r3, #31
 800a9a4:	bf44      	itt	mi
 800a9a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9aa:	6023      	strmi	r3, [r4, #0]
 800a9ac:	b11d      	cbz	r5, 800a9b6 <_printf_i+0x19e>
 800a9ae:	2310      	movs	r3, #16
 800a9b0:	e7ac      	b.n	800a90c <_printf_i+0xf4>
 800a9b2:	4827      	ldr	r0, [pc, #156]	@ (800aa50 <_printf_i+0x238>)
 800a9b4:	e7e9      	b.n	800a98a <_printf_i+0x172>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	f023 0320 	bic.w	r3, r3, #32
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	e7f6      	b.n	800a9ae <_printf_i+0x196>
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	e7bd      	b.n	800a940 <_printf_i+0x128>
 800a9c4:	6833      	ldr	r3, [r6, #0]
 800a9c6:	6825      	ldr	r5, [r4, #0]
 800a9c8:	6961      	ldr	r1, [r4, #20]
 800a9ca:	1d18      	adds	r0, r3, #4
 800a9cc:	6030      	str	r0, [r6, #0]
 800a9ce:	062e      	lsls	r6, r5, #24
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	d501      	bpl.n	800a9d8 <_printf_i+0x1c0>
 800a9d4:	6019      	str	r1, [r3, #0]
 800a9d6:	e002      	b.n	800a9de <_printf_i+0x1c6>
 800a9d8:	0668      	lsls	r0, r5, #25
 800a9da:	d5fb      	bpl.n	800a9d4 <_printf_i+0x1bc>
 800a9dc:	8019      	strh	r1, [r3, #0]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	6123      	str	r3, [r4, #16]
 800a9e2:	4616      	mov	r6, r2
 800a9e4:	e7bc      	b.n	800a960 <_printf_i+0x148>
 800a9e6:	6833      	ldr	r3, [r6, #0]
 800a9e8:	1d1a      	adds	r2, r3, #4
 800a9ea:	6032      	str	r2, [r6, #0]
 800a9ec:	681e      	ldr	r6, [r3, #0]
 800a9ee:	6862      	ldr	r2, [r4, #4]
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f7f5 fc04 	bl	8000200 <memchr>
 800a9f8:	b108      	cbz	r0, 800a9fe <_printf_i+0x1e6>
 800a9fa:	1b80      	subs	r0, r0, r6
 800a9fc:	6060      	str	r0, [r4, #4]
 800a9fe:	6863      	ldr	r3, [r4, #4]
 800aa00:	6123      	str	r3, [r4, #16]
 800aa02:	2300      	movs	r3, #0
 800aa04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa08:	e7aa      	b.n	800a960 <_printf_i+0x148>
 800aa0a:	6923      	ldr	r3, [r4, #16]
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	4649      	mov	r1, r9
 800aa10:	4640      	mov	r0, r8
 800aa12:	47d0      	blx	sl
 800aa14:	3001      	adds	r0, #1
 800aa16:	d0ad      	beq.n	800a974 <_printf_i+0x15c>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	079b      	lsls	r3, r3, #30
 800aa1c:	d413      	bmi.n	800aa46 <_printf_i+0x22e>
 800aa1e:	68e0      	ldr	r0, [r4, #12]
 800aa20:	9b03      	ldr	r3, [sp, #12]
 800aa22:	4298      	cmp	r0, r3
 800aa24:	bfb8      	it	lt
 800aa26:	4618      	movlt	r0, r3
 800aa28:	e7a6      	b.n	800a978 <_printf_i+0x160>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	4632      	mov	r2, r6
 800aa2e:	4649      	mov	r1, r9
 800aa30:	4640      	mov	r0, r8
 800aa32:	47d0      	blx	sl
 800aa34:	3001      	adds	r0, #1
 800aa36:	d09d      	beq.n	800a974 <_printf_i+0x15c>
 800aa38:	3501      	adds	r5, #1
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	9903      	ldr	r1, [sp, #12]
 800aa3e:	1a5b      	subs	r3, r3, r1
 800aa40:	42ab      	cmp	r3, r5
 800aa42:	dcf2      	bgt.n	800aa2a <_printf_i+0x212>
 800aa44:	e7eb      	b.n	800aa1e <_printf_i+0x206>
 800aa46:	2500      	movs	r5, #0
 800aa48:	f104 0619 	add.w	r6, r4, #25
 800aa4c:	e7f5      	b.n	800aa3a <_printf_i+0x222>
 800aa4e:	bf00      	nop
 800aa50:	0800bc62 	.word	0x0800bc62
 800aa54:	0800bc73 	.word	0x0800bc73

0800aa58 <_scanf_chars>:
 800aa58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	688a      	ldr	r2, [r1, #8]
 800aa60:	4680      	mov	r8, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	b932      	cbnz	r2, 800aa74 <_scanf_chars+0x1c>
 800aa66:	698a      	ldr	r2, [r1, #24]
 800aa68:	2a00      	cmp	r2, #0
 800aa6a:	bf14      	ite	ne
 800aa6c:	f04f 32ff 	movne.w	r2, #4294967295
 800aa70:	2201      	moveq	r2, #1
 800aa72:	608a      	str	r2, [r1, #8]
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800ab08 <_scanf_chars+0xb0>
 800aa7a:	06d1      	lsls	r1, r2, #27
 800aa7c:	bf5f      	itttt	pl
 800aa7e:	681a      	ldrpl	r2, [r3, #0]
 800aa80:	1d11      	addpl	r1, r2, #4
 800aa82:	6019      	strpl	r1, [r3, #0]
 800aa84:	6816      	ldrpl	r6, [r2, #0]
 800aa86:	2700      	movs	r7, #0
 800aa88:	69a0      	ldr	r0, [r4, #24]
 800aa8a:	b188      	cbz	r0, 800aab0 <_scanf_chars+0x58>
 800aa8c:	2801      	cmp	r0, #1
 800aa8e:	d107      	bne.n	800aaa0 <_scanf_chars+0x48>
 800aa90:	682b      	ldr	r3, [r5, #0]
 800aa92:	781a      	ldrb	r2, [r3, #0]
 800aa94:	6963      	ldr	r3, [r4, #20]
 800aa96:	5c9b      	ldrb	r3, [r3, r2]
 800aa98:	b953      	cbnz	r3, 800aab0 <_scanf_chars+0x58>
 800aa9a:	2f00      	cmp	r7, #0
 800aa9c:	d031      	beq.n	800ab02 <_scanf_chars+0xaa>
 800aa9e:	e022      	b.n	800aae6 <_scanf_chars+0x8e>
 800aaa0:	2802      	cmp	r0, #2
 800aaa2:	d120      	bne.n	800aae6 <_scanf_chars+0x8e>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800aaac:	071b      	lsls	r3, r3, #28
 800aaae:	d41a      	bmi.n	800aae6 <_scanf_chars+0x8e>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	06da      	lsls	r2, r3, #27
 800aab4:	bf5e      	ittt	pl
 800aab6:	682b      	ldrpl	r3, [r5, #0]
 800aab8:	781b      	ldrbpl	r3, [r3, #0]
 800aaba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800aabe:	682a      	ldr	r2, [r5, #0]
 800aac0:	686b      	ldr	r3, [r5, #4]
 800aac2:	3201      	adds	r2, #1
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	68a2      	ldr	r2, [r4, #8]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	3a01      	subs	r2, #1
 800aacc:	606b      	str	r3, [r5, #4]
 800aace:	3701      	adds	r7, #1
 800aad0:	60a2      	str	r2, [r4, #8]
 800aad2:	b142      	cbz	r2, 800aae6 <_scanf_chars+0x8e>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dcd7      	bgt.n	800aa88 <_scanf_chars+0x30>
 800aad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aadc:	4629      	mov	r1, r5
 800aade:	4640      	mov	r0, r8
 800aae0:	4798      	blx	r3
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d0d0      	beq.n	800aa88 <_scanf_chars+0x30>
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	f013 0310 	ands.w	r3, r3, #16
 800aaec:	d105      	bne.n	800aafa <_scanf_chars+0xa2>
 800aaee:	68e2      	ldr	r2, [r4, #12]
 800aaf0:	3201      	adds	r2, #1
 800aaf2:	60e2      	str	r2, [r4, #12]
 800aaf4:	69a2      	ldr	r2, [r4, #24]
 800aaf6:	b102      	cbz	r2, 800aafa <_scanf_chars+0xa2>
 800aaf8:	7033      	strb	r3, [r6, #0]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	443b      	add	r3, r7
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	2000      	movs	r0, #0
 800ab02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab06:	bf00      	nop
 800ab08:	0800bca0 	.word	0x0800bca0

0800ab0c <_scanf_i>:
 800ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab10:	4698      	mov	r8, r3
 800ab12:	4b74      	ldr	r3, [pc, #464]	@ (800ace4 <_scanf_i+0x1d8>)
 800ab14:	460c      	mov	r4, r1
 800ab16:	4682      	mov	sl, r0
 800ab18:	4616      	mov	r6, r2
 800ab1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	ab03      	add	r3, sp, #12
 800ab22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ab26:	4b70      	ldr	r3, [pc, #448]	@ (800ace8 <_scanf_i+0x1dc>)
 800ab28:	69a1      	ldr	r1, [r4, #24]
 800ab2a:	4a70      	ldr	r2, [pc, #448]	@ (800acec <_scanf_i+0x1e0>)
 800ab2c:	2903      	cmp	r1, #3
 800ab2e:	bf08      	it	eq
 800ab30:	461a      	moveq	r2, r3
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	1e5a      	subs	r2, r3, #1
 800ab38:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ab3c:	bf88      	it	hi
 800ab3e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ab42:	4627      	mov	r7, r4
 800ab44:	bf82      	ittt	hi
 800ab46:	eb03 0905 	addhi.w	r9, r3, r5
 800ab4a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ab4e:	60a3      	strhi	r3, [r4, #8]
 800ab50:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ab54:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ab58:	bf98      	it	ls
 800ab5a:	f04f 0900 	movls.w	r9, #0
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	463d      	mov	r5, r7
 800ab62:	f04f 0b00 	mov.w	fp, #0
 800ab66:	6831      	ldr	r1, [r6, #0]
 800ab68:	ab03      	add	r3, sp, #12
 800ab6a:	7809      	ldrb	r1, [r1, #0]
 800ab6c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ab70:	2202      	movs	r2, #2
 800ab72:	f7f5 fb45 	bl	8000200 <memchr>
 800ab76:	b328      	cbz	r0, 800abc4 <_scanf_i+0xb8>
 800ab78:	f1bb 0f01 	cmp.w	fp, #1
 800ab7c:	d159      	bne.n	800ac32 <_scanf_i+0x126>
 800ab7e:	6862      	ldr	r2, [r4, #4]
 800ab80:	b92a      	cbnz	r2, 800ab8e <_scanf_i+0x82>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	2108      	movs	r1, #8
 800ab86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab8a:	6061      	str	r1, [r4, #4]
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	6822      	ldr	r2, [r4, #0]
 800ab90:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	68a2      	ldr	r2, [r4, #8]
 800ab98:	1e51      	subs	r1, r2, #1
 800ab9a:	60a1      	str	r1, [r4, #8]
 800ab9c:	b192      	cbz	r2, 800abc4 <_scanf_i+0xb8>
 800ab9e:	6832      	ldr	r2, [r6, #0]
 800aba0:	1c51      	adds	r1, r2, #1
 800aba2:	6031      	str	r1, [r6, #0]
 800aba4:	7812      	ldrb	r2, [r2, #0]
 800aba6:	f805 2b01 	strb.w	r2, [r5], #1
 800abaa:	6872      	ldr	r2, [r6, #4]
 800abac:	3a01      	subs	r2, #1
 800abae:	2a00      	cmp	r2, #0
 800abb0:	6072      	str	r2, [r6, #4]
 800abb2:	dc07      	bgt.n	800abc4 <_scanf_i+0xb8>
 800abb4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800abb8:	4631      	mov	r1, r6
 800abba:	4650      	mov	r0, sl
 800abbc:	4790      	blx	r2
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f040 8085 	bne.w	800acce <_scanf_i+0x1c2>
 800abc4:	f10b 0b01 	add.w	fp, fp, #1
 800abc8:	f1bb 0f03 	cmp.w	fp, #3
 800abcc:	d1cb      	bne.n	800ab66 <_scanf_i+0x5a>
 800abce:	6863      	ldr	r3, [r4, #4]
 800abd0:	b90b      	cbnz	r3, 800abd6 <_scanf_i+0xca>
 800abd2:	230a      	movs	r3, #10
 800abd4:	6063      	str	r3, [r4, #4]
 800abd6:	6863      	ldr	r3, [r4, #4]
 800abd8:	4945      	ldr	r1, [pc, #276]	@ (800acf0 <_scanf_i+0x1e4>)
 800abda:	6960      	ldr	r0, [r4, #20]
 800abdc:	1ac9      	subs	r1, r1, r3
 800abde:	f000 f9a9 	bl	800af34 <__sccl>
 800abe2:	f04f 0b00 	mov.w	fp, #0
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d03d      	beq.n	800ac6a <_scanf_i+0x15e>
 800abee:	6831      	ldr	r1, [r6, #0]
 800abf0:	6960      	ldr	r0, [r4, #20]
 800abf2:	f891 c000 	ldrb.w	ip, [r1]
 800abf6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d035      	beq.n	800ac6a <_scanf_i+0x15e>
 800abfe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ac02:	d124      	bne.n	800ac4e <_scanf_i+0x142>
 800ac04:	0510      	lsls	r0, r2, #20
 800ac06:	d522      	bpl.n	800ac4e <_scanf_i+0x142>
 800ac08:	f10b 0b01 	add.w	fp, fp, #1
 800ac0c:	f1b9 0f00 	cmp.w	r9, #0
 800ac10:	d003      	beq.n	800ac1a <_scanf_i+0x10e>
 800ac12:	3301      	adds	r3, #1
 800ac14:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac18:	60a3      	str	r3, [r4, #8]
 800ac1a:	6873      	ldr	r3, [r6, #4]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	6073      	str	r3, [r6, #4]
 800ac22:	dd1b      	ble.n	800ac5c <_scanf_i+0x150>
 800ac24:	6833      	ldr	r3, [r6, #0]
 800ac26:	3301      	adds	r3, #1
 800ac28:	6033      	str	r3, [r6, #0]
 800ac2a:	68a3      	ldr	r3, [r4, #8]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	60a3      	str	r3, [r4, #8]
 800ac30:	e7d9      	b.n	800abe6 <_scanf_i+0xda>
 800ac32:	f1bb 0f02 	cmp.w	fp, #2
 800ac36:	d1ae      	bne.n	800ab96 <_scanf_i+0x8a>
 800ac38:	6822      	ldr	r2, [r4, #0]
 800ac3a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ac3e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ac42:	d1bf      	bne.n	800abc4 <_scanf_i+0xb8>
 800ac44:	2110      	movs	r1, #16
 800ac46:	6061      	str	r1, [r4, #4]
 800ac48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac4c:	e7a2      	b.n	800ab94 <_scanf_i+0x88>
 800ac4e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ac52:	6022      	str	r2, [r4, #0]
 800ac54:	780b      	ldrb	r3, [r1, #0]
 800ac56:	f805 3b01 	strb.w	r3, [r5], #1
 800ac5a:	e7de      	b.n	800ac1a <_scanf_i+0x10e>
 800ac5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac60:	4631      	mov	r1, r6
 800ac62:	4650      	mov	r0, sl
 800ac64:	4798      	blx	r3
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d0df      	beq.n	800ac2a <_scanf_i+0x11e>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	05d9      	lsls	r1, r3, #23
 800ac6e:	d50d      	bpl.n	800ac8c <_scanf_i+0x180>
 800ac70:	42bd      	cmp	r5, r7
 800ac72:	d909      	bls.n	800ac88 <_scanf_i+0x17c>
 800ac74:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac7c:	4632      	mov	r2, r6
 800ac7e:	4650      	mov	r0, sl
 800ac80:	4798      	blx	r3
 800ac82:	f105 39ff 	add.w	r9, r5, #4294967295
 800ac86:	464d      	mov	r5, r9
 800ac88:	42bd      	cmp	r5, r7
 800ac8a:	d028      	beq.n	800acde <_scanf_i+0x1d2>
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	f012 0210 	ands.w	r2, r2, #16
 800ac92:	d113      	bne.n	800acbc <_scanf_i+0x1b0>
 800ac94:	702a      	strb	r2, [r5, #0]
 800ac96:	6863      	ldr	r3, [r4, #4]
 800ac98:	9e01      	ldr	r6, [sp, #4]
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	4650      	mov	r0, sl
 800ac9e:	47b0      	blx	r6
 800aca0:	f8d8 3000 	ldr.w	r3, [r8]
 800aca4:	6821      	ldr	r1, [r4, #0]
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	f8c8 2000 	str.w	r2, [r8]
 800acac:	f011 0f20 	tst.w	r1, #32
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	d00f      	beq.n	800acd4 <_scanf_i+0x1c8>
 800acb4:	6018      	str	r0, [r3, #0]
 800acb6:	68e3      	ldr	r3, [r4, #12]
 800acb8:	3301      	adds	r3, #1
 800acba:	60e3      	str	r3, [r4, #12]
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	1bed      	subs	r5, r5, r7
 800acc0:	445d      	add	r5, fp
 800acc2:	442b      	add	r3, r5
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	2000      	movs	r0, #0
 800acc8:	b007      	add	sp, #28
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	f04f 0b00 	mov.w	fp, #0
 800acd2:	e7ca      	b.n	800ac6a <_scanf_i+0x15e>
 800acd4:	07ca      	lsls	r2, r1, #31
 800acd6:	bf4c      	ite	mi
 800acd8:	8018      	strhmi	r0, [r3, #0]
 800acda:	6018      	strpl	r0, [r3, #0]
 800acdc:	e7eb      	b.n	800acb6 <_scanf_i+0x1aa>
 800acde:	2001      	movs	r0, #1
 800ace0:	e7f2      	b.n	800acc8 <_scanf_i+0x1bc>
 800ace2:	bf00      	nop
 800ace4:	0800bb50 	.word	0x0800bb50
 800ace8:	0800b215 	.word	0x0800b215
 800acec:	0800b2f5 	.word	0x0800b2f5
 800acf0:	0800bc94 	.word	0x0800bc94

0800acf4 <__sflush_r>:
 800acf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	0716      	lsls	r6, r2, #28
 800acfe:	4605      	mov	r5, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	d454      	bmi.n	800adae <__sflush_r+0xba>
 800ad04:	684b      	ldr	r3, [r1, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	dc02      	bgt.n	800ad10 <__sflush_r+0x1c>
 800ad0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	dd48      	ble.n	800ada2 <__sflush_r+0xae>
 800ad10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad12:	2e00      	cmp	r6, #0
 800ad14:	d045      	beq.n	800ada2 <__sflush_r+0xae>
 800ad16:	2300      	movs	r3, #0
 800ad18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad1c:	682f      	ldr	r7, [r5, #0]
 800ad1e:	6a21      	ldr	r1, [r4, #32]
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	d030      	beq.n	800ad86 <__sflush_r+0x92>
 800ad24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	0759      	lsls	r1, r3, #29
 800ad2a:	d505      	bpl.n	800ad38 <__sflush_r+0x44>
 800ad2c:	6863      	ldr	r3, [r4, #4]
 800ad2e:	1ad2      	subs	r2, r2, r3
 800ad30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad32:	b10b      	cbz	r3, 800ad38 <__sflush_r+0x44>
 800ad34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad36:	1ad2      	subs	r2, r2, r3
 800ad38:	2300      	movs	r3, #0
 800ad3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad3c:	6a21      	ldr	r1, [r4, #32]
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b0      	blx	r6
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	d106      	bne.n	800ad56 <__sflush_r+0x62>
 800ad48:	6829      	ldr	r1, [r5, #0]
 800ad4a:	291d      	cmp	r1, #29
 800ad4c:	d82b      	bhi.n	800ada6 <__sflush_r+0xb2>
 800ad4e:	4a2a      	ldr	r2, [pc, #168]	@ (800adf8 <__sflush_r+0x104>)
 800ad50:	410a      	asrs	r2, r1
 800ad52:	07d6      	lsls	r6, r2, #31
 800ad54:	d427      	bmi.n	800ada6 <__sflush_r+0xb2>
 800ad56:	2200      	movs	r2, #0
 800ad58:	6062      	str	r2, [r4, #4]
 800ad5a:	04d9      	lsls	r1, r3, #19
 800ad5c:	6922      	ldr	r2, [r4, #16]
 800ad5e:	6022      	str	r2, [r4, #0]
 800ad60:	d504      	bpl.n	800ad6c <__sflush_r+0x78>
 800ad62:	1c42      	adds	r2, r0, #1
 800ad64:	d101      	bne.n	800ad6a <__sflush_r+0x76>
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	b903      	cbnz	r3, 800ad6c <__sflush_r+0x78>
 800ad6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad6e:	602f      	str	r7, [r5, #0]
 800ad70:	b1b9      	cbz	r1, 800ada2 <__sflush_r+0xae>
 800ad72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad76:	4299      	cmp	r1, r3
 800ad78:	d002      	beq.n	800ad80 <__sflush_r+0x8c>
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f7fe ff78 	bl	8009c70 <_free_r>
 800ad80:	2300      	movs	r3, #0
 800ad82:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad84:	e00d      	b.n	800ada2 <__sflush_r+0xae>
 800ad86:	2301      	movs	r3, #1
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b0      	blx	r6
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	1c50      	adds	r0, r2, #1
 800ad90:	d1c9      	bne.n	800ad26 <__sflush_r+0x32>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0c6      	beq.n	800ad26 <__sflush_r+0x32>
 800ad98:	2b1d      	cmp	r3, #29
 800ad9a:	d001      	beq.n	800ada0 <__sflush_r+0xac>
 800ad9c:	2b16      	cmp	r3, #22
 800ad9e:	d11e      	bne.n	800adde <__sflush_r+0xea>
 800ada0:	602f      	str	r7, [r5, #0]
 800ada2:	2000      	movs	r0, #0
 800ada4:	e022      	b.n	800adec <__sflush_r+0xf8>
 800ada6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adaa:	b21b      	sxth	r3, r3
 800adac:	e01b      	b.n	800ade6 <__sflush_r+0xf2>
 800adae:	690f      	ldr	r7, [r1, #16]
 800adb0:	2f00      	cmp	r7, #0
 800adb2:	d0f6      	beq.n	800ada2 <__sflush_r+0xae>
 800adb4:	0793      	lsls	r3, r2, #30
 800adb6:	680e      	ldr	r6, [r1, #0]
 800adb8:	bf08      	it	eq
 800adba:	694b      	ldreq	r3, [r1, #20]
 800adbc:	600f      	str	r7, [r1, #0]
 800adbe:	bf18      	it	ne
 800adc0:	2300      	movne	r3, #0
 800adc2:	eba6 0807 	sub.w	r8, r6, r7
 800adc6:	608b      	str	r3, [r1, #8]
 800adc8:	f1b8 0f00 	cmp.w	r8, #0
 800adcc:	dde9      	ble.n	800ada2 <__sflush_r+0xae>
 800adce:	6a21      	ldr	r1, [r4, #32]
 800add0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800add2:	4643      	mov	r3, r8
 800add4:	463a      	mov	r2, r7
 800add6:	4628      	mov	r0, r5
 800add8:	47b0      	blx	r6
 800adda:	2800      	cmp	r0, #0
 800addc:	dc08      	bgt.n	800adf0 <__sflush_r+0xfc>
 800adde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf0:	4407      	add	r7, r0
 800adf2:	eba8 0800 	sub.w	r8, r8, r0
 800adf6:	e7e7      	b.n	800adc8 <__sflush_r+0xd4>
 800adf8:	dfbffffe 	.word	0xdfbffffe

0800adfc <_fflush_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	690b      	ldr	r3, [r1, #16]
 800ae00:	4605      	mov	r5, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	b913      	cbnz	r3, 800ae0c <_fflush_r+0x10>
 800ae06:	2500      	movs	r5, #0
 800ae08:	4628      	mov	r0, r5
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	b118      	cbz	r0, 800ae16 <_fflush_r+0x1a>
 800ae0e:	6a03      	ldr	r3, [r0, #32]
 800ae10:	b90b      	cbnz	r3, 800ae16 <_fflush_r+0x1a>
 800ae12:	f7fe fc13 	bl	800963c <__sinit>
 800ae16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0f3      	beq.n	800ae06 <_fflush_r+0xa>
 800ae1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae20:	07d0      	lsls	r0, r2, #31
 800ae22:	d404      	bmi.n	800ae2e <_fflush_r+0x32>
 800ae24:	0599      	lsls	r1, r3, #22
 800ae26:	d402      	bmi.n	800ae2e <_fflush_r+0x32>
 800ae28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2a:	f7fe fef2 	bl	8009c12 <__retarget_lock_acquire_recursive>
 800ae2e:	4628      	mov	r0, r5
 800ae30:	4621      	mov	r1, r4
 800ae32:	f7ff ff5f 	bl	800acf4 <__sflush_r>
 800ae36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae38:	07da      	lsls	r2, r3, #31
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	d4e4      	bmi.n	800ae08 <_fflush_r+0xc>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	059b      	lsls	r3, r3, #22
 800ae42:	d4e1      	bmi.n	800ae08 <_fflush_r+0xc>
 800ae44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae46:	f7fe fee5 	bl	8009c14 <__retarget_lock_release_recursive>
 800ae4a:	e7dd      	b.n	800ae08 <_fflush_r+0xc>

0800ae4c <fiprintf>:
 800ae4c:	b40e      	push	{r1, r2, r3}
 800ae4e:	b503      	push	{r0, r1, lr}
 800ae50:	4601      	mov	r1, r0
 800ae52:	ab03      	add	r3, sp, #12
 800ae54:	4805      	ldr	r0, [pc, #20]	@ (800ae6c <fiprintf+0x20>)
 800ae56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5a:	6800      	ldr	r0, [r0, #0]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	f7ff fb55 	bl	800a50c <_vfiprintf_r>
 800ae62:	b002      	add	sp, #8
 800ae64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae68:	b003      	add	sp, #12
 800ae6a:	4770      	bx	lr
 800ae6c:	2000001c 	.word	0x2000001c

0800ae70 <__swhatbuf_r>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	460c      	mov	r4, r1
 800ae74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	b096      	sub	sp, #88	@ 0x58
 800ae7c:	4615      	mov	r5, r2
 800ae7e:	461e      	mov	r6, r3
 800ae80:	da0d      	bge.n	800ae9e <__swhatbuf_r+0x2e>
 800ae82:	89a3      	ldrh	r3, [r4, #12]
 800ae84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae88:	f04f 0100 	mov.w	r1, #0
 800ae8c:	bf14      	ite	ne
 800ae8e:	2340      	movne	r3, #64	@ 0x40
 800ae90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae94:	2000      	movs	r0, #0
 800ae96:	6031      	str	r1, [r6, #0]
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	b016      	add	sp, #88	@ 0x58
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	466a      	mov	r2, sp
 800aea0:	f000 f8d6 	bl	800b050 <_fstat_r>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	dbec      	blt.n	800ae82 <__swhatbuf_r+0x12>
 800aea8:	9901      	ldr	r1, [sp, #4]
 800aeaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aeae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aeb2:	4259      	negs	r1, r3
 800aeb4:	4159      	adcs	r1, r3
 800aeb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeba:	e7eb      	b.n	800ae94 <__swhatbuf_r+0x24>

0800aebc <__smakebuf_r>:
 800aebc:	898b      	ldrh	r3, [r1, #12]
 800aebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aec0:	079d      	lsls	r5, r3, #30
 800aec2:	4606      	mov	r6, r0
 800aec4:	460c      	mov	r4, r1
 800aec6:	d507      	bpl.n	800aed8 <__smakebuf_r+0x1c>
 800aec8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	6123      	str	r3, [r4, #16]
 800aed0:	2301      	movs	r3, #1
 800aed2:	6163      	str	r3, [r4, #20]
 800aed4:	b003      	add	sp, #12
 800aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed8:	ab01      	add	r3, sp, #4
 800aeda:	466a      	mov	r2, sp
 800aedc:	f7ff ffc8 	bl	800ae70 <__swhatbuf_r>
 800aee0:	9f00      	ldr	r7, [sp, #0]
 800aee2:	4605      	mov	r5, r0
 800aee4:	4639      	mov	r1, r7
 800aee6:	4630      	mov	r0, r6
 800aee8:	f7fe ff36 	bl	8009d58 <_malloc_r>
 800aeec:	b948      	cbnz	r0, 800af02 <__smakebuf_r+0x46>
 800aeee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aef2:	059a      	lsls	r2, r3, #22
 800aef4:	d4ee      	bmi.n	800aed4 <__smakebuf_r+0x18>
 800aef6:	f023 0303 	bic.w	r3, r3, #3
 800aefa:	f043 0302 	orr.w	r3, r3, #2
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	e7e2      	b.n	800aec8 <__smakebuf_r+0xc>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	6020      	str	r0, [r4, #0]
 800af06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	9b01      	ldr	r3, [sp, #4]
 800af0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af12:	b15b      	cbz	r3, 800af2c <__smakebuf_r+0x70>
 800af14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af18:	4630      	mov	r0, r6
 800af1a:	f000 f8ab 	bl	800b074 <_isatty_r>
 800af1e:	b128      	cbz	r0, 800af2c <__smakebuf_r+0x70>
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f023 0303 	bic.w	r3, r3, #3
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	431d      	orrs	r5, r3
 800af30:	81a5      	strh	r5, [r4, #12]
 800af32:	e7cf      	b.n	800aed4 <__smakebuf_r+0x18>

0800af34 <__sccl>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	780b      	ldrb	r3, [r1, #0]
 800af38:	4604      	mov	r4, r0
 800af3a:	2b5e      	cmp	r3, #94	@ 0x5e
 800af3c:	bf0b      	itete	eq
 800af3e:	784b      	ldrbeq	r3, [r1, #1]
 800af40:	1c4a      	addne	r2, r1, #1
 800af42:	1c8a      	addeq	r2, r1, #2
 800af44:	2100      	movne	r1, #0
 800af46:	bf08      	it	eq
 800af48:	2101      	moveq	r1, #1
 800af4a:	3801      	subs	r0, #1
 800af4c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800af50:	f800 1f01 	strb.w	r1, [r0, #1]!
 800af54:	42a8      	cmp	r0, r5
 800af56:	d1fb      	bne.n	800af50 <__sccl+0x1c>
 800af58:	b90b      	cbnz	r3, 800af5e <__sccl+0x2a>
 800af5a:	1e50      	subs	r0, r2, #1
 800af5c:	bd70      	pop	{r4, r5, r6, pc}
 800af5e:	f081 0101 	eor.w	r1, r1, #1
 800af62:	54e1      	strb	r1, [r4, r3]
 800af64:	4610      	mov	r0, r2
 800af66:	4602      	mov	r2, r0
 800af68:	f812 5b01 	ldrb.w	r5, [r2], #1
 800af6c:	2d2d      	cmp	r5, #45	@ 0x2d
 800af6e:	d005      	beq.n	800af7c <__sccl+0x48>
 800af70:	2d5d      	cmp	r5, #93	@ 0x5d
 800af72:	d016      	beq.n	800afa2 <__sccl+0x6e>
 800af74:	2d00      	cmp	r5, #0
 800af76:	d0f1      	beq.n	800af5c <__sccl+0x28>
 800af78:	462b      	mov	r3, r5
 800af7a:	e7f2      	b.n	800af62 <__sccl+0x2e>
 800af7c:	7846      	ldrb	r6, [r0, #1]
 800af7e:	2e5d      	cmp	r6, #93	@ 0x5d
 800af80:	d0fa      	beq.n	800af78 <__sccl+0x44>
 800af82:	42b3      	cmp	r3, r6
 800af84:	dcf8      	bgt.n	800af78 <__sccl+0x44>
 800af86:	3002      	adds	r0, #2
 800af88:	461a      	mov	r2, r3
 800af8a:	3201      	adds	r2, #1
 800af8c:	4296      	cmp	r6, r2
 800af8e:	54a1      	strb	r1, [r4, r2]
 800af90:	dcfb      	bgt.n	800af8a <__sccl+0x56>
 800af92:	1af2      	subs	r2, r6, r3
 800af94:	3a01      	subs	r2, #1
 800af96:	1c5d      	adds	r5, r3, #1
 800af98:	42b3      	cmp	r3, r6
 800af9a:	bfa8      	it	ge
 800af9c:	2200      	movge	r2, #0
 800af9e:	18ab      	adds	r3, r5, r2
 800afa0:	e7e1      	b.n	800af66 <__sccl+0x32>
 800afa2:	4610      	mov	r0, r2
 800afa4:	e7da      	b.n	800af5c <__sccl+0x28>

0800afa6 <__submore>:
 800afa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afaa:	460c      	mov	r4, r1
 800afac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800afae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afb2:	4299      	cmp	r1, r3
 800afb4:	d11d      	bne.n	800aff2 <__submore+0x4c>
 800afb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800afba:	f7fe fecd 	bl	8009d58 <_malloc_r>
 800afbe:	b918      	cbnz	r0, 800afc8 <__submore+0x22>
 800afc0:	f04f 30ff 	mov.w	r0, #4294967295
 800afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afcc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800afce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800afd2:	6360      	str	r0, [r4, #52]	@ 0x34
 800afd4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800afd8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800afdc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800afe0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800afe4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800afe8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800afec:	6020      	str	r0, [r4, #0]
 800afee:	2000      	movs	r0, #0
 800aff0:	e7e8      	b.n	800afc4 <__submore+0x1e>
 800aff2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800aff4:	0077      	lsls	r7, r6, #1
 800aff6:	463a      	mov	r2, r7
 800aff8:	f000 f863 	bl	800b0c2 <_realloc_r>
 800affc:	4605      	mov	r5, r0
 800affe:	2800      	cmp	r0, #0
 800b000:	d0de      	beq.n	800afc0 <__submore+0x1a>
 800b002:	eb00 0806 	add.w	r8, r0, r6
 800b006:	4601      	mov	r1, r0
 800b008:	4632      	mov	r2, r6
 800b00a:	4640      	mov	r0, r8
 800b00c:	f7fe fe03 	bl	8009c16 <memcpy>
 800b010:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b014:	f8c4 8000 	str.w	r8, [r4]
 800b018:	e7e9      	b.n	800afee <__submore+0x48>

0800b01a <memmove>:
 800b01a:	4288      	cmp	r0, r1
 800b01c:	b510      	push	{r4, lr}
 800b01e:	eb01 0402 	add.w	r4, r1, r2
 800b022:	d902      	bls.n	800b02a <memmove+0x10>
 800b024:	4284      	cmp	r4, r0
 800b026:	4623      	mov	r3, r4
 800b028:	d807      	bhi.n	800b03a <memmove+0x20>
 800b02a:	1e43      	subs	r3, r0, #1
 800b02c:	42a1      	cmp	r1, r4
 800b02e:	d008      	beq.n	800b042 <memmove+0x28>
 800b030:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b034:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b038:	e7f8      	b.n	800b02c <memmove+0x12>
 800b03a:	4402      	add	r2, r0
 800b03c:	4601      	mov	r1, r0
 800b03e:	428a      	cmp	r2, r1
 800b040:	d100      	bne.n	800b044 <memmove+0x2a>
 800b042:	bd10      	pop	{r4, pc}
 800b044:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b048:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b04c:	e7f7      	b.n	800b03e <memmove+0x24>
	...

0800b050 <_fstat_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	@ (800b070 <_fstat_r+0x20>)
 800b054:	2300      	movs	r3, #0
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	f7f6 fe72 	bl	8001d46 <_fstat>
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	d102      	bne.n	800b06c <_fstat_r+0x1c>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	b103      	cbz	r3, 800b06c <_fstat_r+0x1c>
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	bd38      	pop	{r3, r4, r5, pc}
 800b06e:	bf00      	nop
 800b070:	20001598 	.word	0x20001598

0800b074 <_isatty_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d06      	ldr	r5, [pc, #24]	@ (800b090 <_isatty_r+0x1c>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	602b      	str	r3, [r5, #0]
 800b080:	f7f6 fe71 	bl	8001d66 <_isatty>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_isatty_r+0x1a>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_isatty_r+0x1a>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	20001598 	.word	0x20001598

0800b094 <_sbrk_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d06      	ldr	r5, [pc, #24]	@ (800b0b0 <_sbrk_r+0x1c>)
 800b098:	2300      	movs	r3, #0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	f7f6 fe7a 	bl	8001d98 <_sbrk>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_sbrk_r+0x1a>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_sbrk_r+0x1a>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20001598 	.word	0x20001598

0800b0b4 <abort>:
 800b0b4:	b508      	push	{r3, lr}
 800b0b6:	2006      	movs	r0, #6
 800b0b8:	f000 f946 	bl	800b348 <raise>
 800b0bc:	2001      	movs	r0, #1
 800b0be:	f7f6 fdf2 	bl	8001ca6 <_exit>

0800b0c2 <_realloc_r>:
 800b0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c6:	4680      	mov	r8, r0
 800b0c8:	4615      	mov	r5, r2
 800b0ca:	460c      	mov	r4, r1
 800b0cc:	b921      	cbnz	r1, 800b0d8 <_realloc_r+0x16>
 800b0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	f7fe be40 	b.w	8009d58 <_malloc_r>
 800b0d8:	b92a      	cbnz	r2, 800b0e6 <_realloc_r+0x24>
 800b0da:	f7fe fdc9 	bl	8009c70 <_free_r>
 800b0de:	2400      	movs	r4, #0
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e6:	f000 f94b 	bl	800b380 <_malloc_usable_size_r>
 800b0ea:	4285      	cmp	r5, r0
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	d802      	bhi.n	800b0f6 <_realloc_r+0x34>
 800b0f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0f4:	d8f4      	bhi.n	800b0e0 <_realloc_r+0x1e>
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	f7fe fe2d 	bl	8009d58 <_malloc_r>
 800b0fe:	4607      	mov	r7, r0
 800b100:	2800      	cmp	r0, #0
 800b102:	d0ec      	beq.n	800b0de <_realloc_r+0x1c>
 800b104:	42b5      	cmp	r5, r6
 800b106:	462a      	mov	r2, r5
 800b108:	4621      	mov	r1, r4
 800b10a:	bf28      	it	cs
 800b10c:	4632      	movcs	r2, r6
 800b10e:	f7fe fd82 	bl	8009c16 <memcpy>
 800b112:	4621      	mov	r1, r4
 800b114:	4640      	mov	r0, r8
 800b116:	f7fe fdab 	bl	8009c70 <_free_r>
 800b11a:	463c      	mov	r4, r7
 800b11c:	e7e0      	b.n	800b0e0 <_realloc_r+0x1e>
	...

0800b120 <_strtol_l.constprop.0>:
 800b120:	2b24      	cmp	r3, #36	@ 0x24
 800b122:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b126:	4686      	mov	lr, r0
 800b128:	4690      	mov	r8, r2
 800b12a:	d801      	bhi.n	800b130 <_strtol_l.constprop.0+0x10>
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d106      	bne.n	800b13e <_strtol_l.constprop.0+0x1e>
 800b130:	f7fe fd44 	bl	8009bbc <__errno>
 800b134:	2316      	movs	r3, #22
 800b136:	6003      	str	r3, [r0, #0]
 800b138:	2000      	movs	r0, #0
 800b13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13e:	4834      	ldr	r0, [pc, #208]	@ (800b210 <_strtol_l.constprop.0+0xf0>)
 800b140:	460d      	mov	r5, r1
 800b142:	462a      	mov	r2, r5
 800b144:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b148:	5d06      	ldrb	r6, [r0, r4]
 800b14a:	f016 0608 	ands.w	r6, r6, #8
 800b14e:	d1f8      	bne.n	800b142 <_strtol_l.constprop.0+0x22>
 800b150:	2c2d      	cmp	r4, #45	@ 0x2d
 800b152:	d12d      	bne.n	800b1b0 <_strtol_l.constprop.0+0x90>
 800b154:	782c      	ldrb	r4, [r5, #0]
 800b156:	2601      	movs	r6, #1
 800b158:	1c95      	adds	r5, r2, #2
 800b15a:	f033 0210 	bics.w	r2, r3, #16
 800b15e:	d109      	bne.n	800b174 <_strtol_l.constprop.0+0x54>
 800b160:	2c30      	cmp	r4, #48	@ 0x30
 800b162:	d12a      	bne.n	800b1ba <_strtol_l.constprop.0+0x9a>
 800b164:	782a      	ldrb	r2, [r5, #0]
 800b166:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b16a:	2a58      	cmp	r2, #88	@ 0x58
 800b16c:	d125      	bne.n	800b1ba <_strtol_l.constprop.0+0x9a>
 800b16e:	786c      	ldrb	r4, [r5, #1]
 800b170:	2310      	movs	r3, #16
 800b172:	3502      	adds	r5, #2
 800b174:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b178:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b17c:	2200      	movs	r2, #0
 800b17e:	fbbc f9f3 	udiv	r9, ip, r3
 800b182:	4610      	mov	r0, r2
 800b184:	fb03 ca19 	mls	sl, r3, r9, ip
 800b188:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b18c:	2f09      	cmp	r7, #9
 800b18e:	d81b      	bhi.n	800b1c8 <_strtol_l.constprop.0+0xa8>
 800b190:	463c      	mov	r4, r7
 800b192:	42a3      	cmp	r3, r4
 800b194:	dd27      	ble.n	800b1e6 <_strtol_l.constprop.0+0xc6>
 800b196:	1c57      	adds	r7, r2, #1
 800b198:	d007      	beq.n	800b1aa <_strtol_l.constprop.0+0x8a>
 800b19a:	4581      	cmp	r9, r0
 800b19c:	d320      	bcc.n	800b1e0 <_strtol_l.constprop.0+0xc0>
 800b19e:	d101      	bne.n	800b1a4 <_strtol_l.constprop.0+0x84>
 800b1a0:	45a2      	cmp	sl, r4
 800b1a2:	db1d      	blt.n	800b1e0 <_strtol_l.constprop.0+0xc0>
 800b1a4:	fb00 4003 	mla	r0, r0, r3, r4
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1ae:	e7eb      	b.n	800b188 <_strtol_l.constprop.0+0x68>
 800b1b0:	2c2b      	cmp	r4, #43	@ 0x2b
 800b1b2:	bf04      	itt	eq
 800b1b4:	782c      	ldrbeq	r4, [r5, #0]
 800b1b6:	1c95      	addeq	r5, r2, #2
 800b1b8:	e7cf      	b.n	800b15a <_strtol_l.constprop.0+0x3a>
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1da      	bne.n	800b174 <_strtol_l.constprop.0+0x54>
 800b1be:	2c30      	cmp	r4, #48	@ 0x30
 800b1c0:	bf0c      	ite	eq
 800b1c2:	2308      	moveq	r3, #8
 800b1c4:	230a      	movne	r3, #10
 800b1c6:	e7d5      	b.n	800b174 <_strtol_l.constprop.0+0x54>
 800b1c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b1cc:	2f19      	cmp	r7, #25
 800b1ce:	d801      	bhi.n	800b1d4 <_strtol_l.constprop.0+0xb4>
 800b1d0:	3c37      	subs	r4, #55	@ 0x37
 800b1d2:	e7de      	b.n	800b192 <_strtol_l.constprop.0+0x72>
 800b1d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b1d8:	2f19      	cmp	r7, #25
 800b1da:	d804      	bhi.n	800b1e6 <_strtol_l.constprop.0+0xc6>
 800b1dc:	3c57      	subs	r4, #87	@ 0x57
 800b1de:	e7d8      	b.n	800b192 <_strtol_l.constprop.0+0x72>
 800b1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e4:	e7e1      	b.n	800b1aa <_strtol_l.constprop.0+0x8a>
 800b1e6:	1c53      	adds	r3, r2, #1
 800b1e8:	d108      	bne.n	800b1fc <_strtol_l.constprop.0+0xdc>
 800b1ea:	2322      	movs	r3, #34	@ 0x22
 800b1ec:	f8ce 3000 	str.w	r3, [lr]
 800b1f0:	4660      	mov	r0, ip
 800b1f2:	f1b8 0f00 	cmp.w	r8, #0
 800b1f6:	d0a0      	beq.n	800b13a <_strtol_l.constprop.0+0x1a>
 800b1f8:	1e69      	subs	r1, r5, #1
 800b1fa:	e006      	b.n	800b20a <_strtol_l.constprop.0+0xea>
 800b1fc:	b106      	cbz	r6, 800b200 <_strtol_l.constprop.0+0xe0>
 800b1fe:	4240      	negs	r0, r0
 800b200:	f1b8 0f00 	cmp.w	r8, #0
 800b204:	d099      	beq.n	800b13a <_strtol_l.constprop.0+0x1a>
 800b206:	2a00      	cmp	r2, #0
 800b208:	d1f6      	bne.n	800b1f8 <_strtol_l.constprop.0+0xd8>
 800b20a:	f8c8 1000 	str.w	r1, [r8]
 800b20e:	e794      	b.n	800b13a <_strtol_l.constprop.0+0x1a>
 800b210:	0800bca0 	.word	0x0800bca0

0800b214 <_strtol_r>:
 800b214:	f7ff bf84 	b.w	800b120 <_strtol_l.constprop.0>

0800b218 <_strtoul_l.constprop.0>:
 800b218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b21c:	4e34      	ldr	r6, [pc, #208]	@ (800b2f0 <_strtoul_l.constprop.0+0xd8>)
 800b21e:	4686      	mov	lr, r0
 800b220:	460d      	mov	r5, r1
 800b222:	4628      	mov	r0, r5
 800b224:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b228:	5d37      	ldrb	r7, [r6, r4]
 800b22a:	f017 0708 	ands.w	r7, r7, #8
 800b22e:	d1f8      	bne.n	800b222 <_strtoul_l.constprop.0+0xa>
 800b230:	2c2d      	cmp	r4, #45	@ 0x2d
 800b232:	d12f      	bne.n	800b294 <_strtoul_l.constprop.0+0x7c>
 800b234:	782c      	ldrb	r4, [r5, #0]
 800b236:	2701      	movs	r7, #1
 800b238:	1c85      	adds	r5, r0, #2
 800b23a:	f033 0010 	bics.w	r0, r3, #16
 800b23e:	d109      	bne.n	800b254 <_strtoul_l.constprop.0+0x3c>
 800b240:	2c30      	cmp	r4, #48	@ 0x30
 800b242:	d12c      	bne.n	800b29e <_strtoul_l.constprop.0+0x86>
 800b244:	7828      	ldrb	r0, [r5, #0]
 800b246:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b24a:	2858      	cmp	r0, #88	@ 0x58
 800b24c:	d127      	bne.n	800b29e <_strtoul_l.constprop.0+0x86>
 800b24e:	786c      	ldrb	r4, [r5, #1]
 800b250:	2310      	movs	r3, #16
 800b252:	3502      	adds	r5, #2
 800b254:	f04f 38ff 	mov.w	r8, #4294967295
 800b258:	2600      	movs	r6, #0
 800b25a:	fbb8 f8f3 	udiv	r8, r8, r3
 800b25e:	fb03 f908 	mul.w	r9, r3, r8
 800b262:	ea6f 0909 	mvn.w	r9, r9
 800b266:	4630      	mov	r0, r6
 800b268:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b26c:	f1bc 0f09 	cmp.w	ip, #9
 800b270:	d81c      	bhi.n	800b2ac <_strtoul_l.constprop.0+0x94>
 800b272:	4664      	mov	r4, ip
 800b274:	42a3      	cmp	r3, r4
 800b276:	dd2a      	ble.n	800b2ce <_strtoul_l.constprop.0+0xb6>
 800b278:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b27c:	d007      	beq.n	800b28e <_strtoul_l.constprop.0+0x76>
 800b27e:	4580      	cmp	r8, r0
 800b280:	d322      	bcc.n	800b2c8 <_strtoul_l.constprop.0+0xb0>
 800b282:	d101      	bne.n	800b288 <_strtoul_l.constprop.0+0x70>
 800b284:	45a1      	cmp	r9, r4
 800b286:	db1f      	blt.n	800b2c8 <_strtoul_l.constprop.0+0xb0>
 800b288:	fb00 4003 	mla	r0, r0, r3, r4
 800b28c:	2601      	movs	r6, #1
 800b28e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b292:	e7e9      	b.n	800b268 <_strtoul_l.constprop.0+0x50>
 800b294:	2c2b      	cmp	r4, #43	@ 0x2b
 800b296:	bf04      	itt	eq
 800b298:	782c      	ldrbeq	r4, [r5, #0]
 800b29a:	1c85      	addeq	r5, r0, #2
 800b29c:	e7cd      	b.n	800b23a <_strtoul_l.constprop.0+0x22>
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1d8      	bne.n	800b254 <_strtoul_l.constprop.0+0x3c>
 800b2a2:	2c30      	cmp	r4, #48	@ 0x30
 800b2a4:	bf0c      	ite	eq
 800b2a6:	2308      	moveq	r3, #8
 800b2a8:	230a      	movne	r3, #10
 800b2aa:	e7d3      	b.n	800b254 <_strtoul_l.constprop.0+0x3c>
 800b2ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b2b0:	f1bc 0f19 	cmp.w	ip, #25
 800b2b4:	d801      	bhi.n	800b2ba <_strtoul_l.constprop.0+0xa2>
 800b2b6:	3c37      	subs	r4, #55	@ 0x37
 800b2b8:	e7dc      	b.n	800b274 <_strtoul_l.constprop.0+0x5c>
 800b2ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b2be:	f1bc 0f19 	cmp.w	ip, #25
 800b2c2:	d804      	bhi.n	800b2ce <_strtoul_l.constprop.0+0xb6>
 800b2c4:	3c57      	subs	r4, #87	@ 0x57
 800b2c6:	e7d5      	b.n	800b274 <_strtoul_l.constprop.0+0x5c>
 800b2c8:	f04f 36ff 	mov.w	r6, #4294967295
 800b2cc:	e7df      	b.n	800b28e <_strtoul_l.constprop.0+0x76>
 800b2ce:	1c73      	adds	r3, r6, #1
 800b2d0:	d106      	bne.n	800b2e0 <_strtoul_l.constprop.0+0xc8>
 800b2d2:	2322      	movs	r3, #34	@ 0x22
 800b2d4:	f8ce 3000 	str.w	r3, [lr]
 800b2d8:	4630      	mov	r0, r6
 800b2da:	b932      	cbnz	r2, 800b2ea <_strtoul_l.constprop.0+0xd2>
 800b2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2e0:	b107      	cbz	r7, 800b2e4 <_strtoul_l.constprop.0+0xcc>
 800b2e2:	4240      	negs	r0, r0
 800b2e4:	2a00      	cmp	r2, #0
 800b2e6:	d0f9      	beq.n	800b2dc <_strtoul_l.constprop.0+0xc4>
 800b2e8:	b106      	cbz	r6, 800b2ec <_strtoul_l.constprop.0+0xd4>
 800b2ea:	1e69      	subs	r1, r5, #1
 800b2ec:	6011      	str	r1, [r2, #0]
 800b2ee:	e7f5      	b.n	800b2dc <_strtoul_l.constprop.0+0xc4>
 800b2f0:	0800bca0 	.word	0x0800bca0

0800b2f4 <_strtoul_r>:
 800b2f4:	f7ff bf90 	b.w	800b218 <_strtoul_l.constprop.0>

0800b2f8 <_raise_r>:
 800b2f8:	291f      	cmp	r1, #31
 800b2fa:	b538      	push	{r3, r4, r5, lr}
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	460c      	mov	r4, r1
 800b300:	d904      	bls.n	800b30c <_raise_r+0x14>
 800b302:	2316      	movs	r3, #22
 800b304:	6003      	str	r3, [r0, #0]
 800b306:	f04f 30ff 	mov.w	r0, #4294967295
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b30e:	b112      	cbz	r2, 800b316 <_raise_r+0x1e>
 800b310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b314:	b94b      	cbnz	r3, 800b32a <_raise_r+0x32>
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f830 	bl	800b37c <_getpid_r>
 800b31c:	4622      	mov	r2, r4
 800b31e:	4601      	mov	r1, r0
 800b320:	4628      	mov	r0, r5
 800b322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b326:	f000 b817 	b.w	800b358 <_kill_r>
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d00a      	beq.n	800b344 <_raise_r+0x4c>
 800b32e:	1c59      	adds	r1, r3, #1
 800b330:	d103      	bne.n	800b33a <_raise_r+0x42>
 800b332:	2316      	movs	r3, #22
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	2001      	movs	r0, #1
 800b338:	e7e7      	b.n	800b30a <_raise_r+0x12>
 800b33a:	2100      	movs	r1, #0
 800b33c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b340:	4620      	mov	r0, r4
 800b342:	4798      	blx	r3
 800b344:	2000      	movs	r0, #0
 800b346:	e7e0      	b.n	800b30a <_raise_r+0x12>

0800b348 <raise>:
 800b348:	4b02      	ldr	r3, [pc, #8]	@ (800b354 <raise+0xc>)
 800b34a:	4601      	mov	r1, r0
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	f7ff bfd3 	b.w	800b2f8 <_raise_r>
 800b352:	bf00      	nop
 800b354:	2000001c 	.word	0x2000001c

0800b358 <_kill_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d07      	ldr	r5, [pc, #28]	@ (800b378 <_kill_r+0x20>)
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	4608      	mov	r0, r1
 800b362:	4611      	mov	r1, r2
 800b364:	602b      	str	r3, [r5, #0]
 800b366:	f7f6 fc8e 	bl	8001c86 <_kill>
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	d102      	bne.n	800b374 <_kill_r+0x1c>
 800b36e:	682b      	ldr	r3, [r5, #0]
 800b370:	b103      	cbz	r3, 800b374 <_kill_r+0x1c>
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	bd38      	pop	{r3, r4, r5, pc}
 800b376:	bf00      	nop
 800b378:	20001598 	.word	0x20001598

0800b37c <_getpid_r>:
 800b37c:	f7f6 bc7b 	b.w	8001c76 <_getpid>

0800b380 <_malloc_usable_size_r>:
 800b380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b384:	1f18      	subs	r0, r3, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfbc      	itt	lt
 800b38a:	580b      	ldrlt	r3, [r1, r0]
 800b38c:	18c0      	addlt	r0, r0, r3
 800b38e:	4770      	bx	lr

0800b390 <_init>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	bf00      	nop
 800b394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b396:	bc08      	pop	{r3}
 800b398:	469e      	mov	lr, r3
 800b39a:	4770      	bx	lr

0800b39c <_fini>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	bf00      	nop
 800b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a2:	bc08      	pop	{r3}
 800b3a4:	469e      	mov	lr, r3
 800b3a6:	4770      	bx	lr

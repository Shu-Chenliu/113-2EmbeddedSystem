
ESLab_final_STM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000096c  0800be80  0800be80  0000ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7ec  0800c7ec  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7ec  0800c7ec  0000d7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f4  0800c7f4  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f4  0800c7f4  0000d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7f8  0800c7f8  0000d7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c7fc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e04  2000006c  0800c868  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e70  0800c868  0000ee70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027844  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005345  00000000  00000000  000358e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002328  00000000  00000000  0003ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b37  00000000  00000000  0003cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006485  00000000  00000000  0003ea87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028308  00000000  00000000  00044f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101d53  00000000  00000000  0006d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ef67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a224  00000000  00000000  0016efac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001791d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be68 	.word	0x0800be68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800be68 	.word	0x0800be68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000578:	1d39      	adds	r1, r7, #4
 800057a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800057e:	2201      	movs	r2, #1
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <__io_putchar+0x20>)
 8000582:	f005 f95d 	bl	8005840 <HAL_UART_Transmit>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000220 	.word	0x20000220

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t  MAC_Addr[6] = {0};
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	2300      	movs	r3, #0
 80005a0:	813b      	strh	r3, [r7, #8]
  uint8_t  IP_Addr[4] = {0};
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
  Socket = -1;
 80005a6:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <main+0x114>)
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	601a      	str	r2, [r3, #0]
  int16_t Trials = CONNECTION_TRIAL_MAX;
 80005ae:	230a      	movs	r3, #10
 80005b0:	81fb      	strh	r3, [r7, #14]
  lastScanTime=0;
 80005b2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <main+0x118>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
  lastScanType=0;
 80005b8:	4b3d      	ldr	r3, [pc, #244]	@ (80006b0 <main+0x11c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
  flag=0;
 80005be:	4b3d      	ldr	r3, [pc, #244]	@ (80006b4 <main+0x120>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f002 f858 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f8a6 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 faac 	bl	8000b28 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005d0:	f000 f904 	bl	80007dc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005d4:	f000 f93a 	bl	800084c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005d8:	f000 f976 	bl	80008c8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005dc:	f000 f9d8 	bl	8000990 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005e0:	f000 fa14 	bl	8000a0c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 fa42 	bl	8000a6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e8:	f000 fa70 	bl	8000acc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005ec:	f000 f992 	bl	8000914 <MX_SPI1_Init>
//    }
//    else
//    {
//      printf("> ERROR : WIFI Module cannot be initialized.\n");
//    }
  MFRC522_Init();
 80005f0:	f000 ff64 	bl	80014bc <MFRC522_Init>
  printf("rc522 init\n");
 80005f4:	4830      	ldr	r0, [pc, #192]	@ (80006b8 <main+0x124>)
 80005f6:	f009 ff31 	bl	800a45c <puts>
    uchar ver = Read_MFRC522(0x37);  // VersionReg
 80005fa:	2037      	movs	r0, #55	@ 0x37
 80005fc:	f000 fee8 	bl	80013d0 <Read_MFRC522>
 8000600:	4603      	mov	r3, r0
 8000602:	737b      	strb	r3, [r7, #13]
    printf("MFRC522 VersionReg = 0x%02X\n", ver);
 8000604:	7b7b      	ldrb	r3, [r7, #13]
 8000606:	4619      	mov	r1, r3
 8000608:	482c      	ldr	r0, [pc, #176]	@ (80006bc <main+0x128>)
 800060a:	f009 febf 	bl	800a38c <iprintf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060e:	f006 f955 	bl	80068bc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of WIFIsocket */
  WIFIsocketHandle = osMutexNew(&WIFIsocket_attributes);
 8000612:	482b      	ldr	r0, [pc, #172]	@ (80006c0 <main+0x12c>)
 8000614:	f006 fa49 	bl	8006aaa <osMutexNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a2a      	ldr	r2, [pc, #168]	@ (80006c4 <main+0x130>)
 800061c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of taskSem */
  taskSemHandle = osSemaphoreNew(1, 1, &taskSem_attributes);
 800061e:	4a2a      	ldr	r2, [pc, #168]	@ (80006c8 <main+0x134>)
 8000620:	2101      	movs	r1, #1
 8000622:	2001      	movs	r0, #1
 8000624:	f006 fb4f 	bl	8006cc6 <osSemaphoreNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a28      	ldr	r2, [pc, #160]	@ (80006cc <main+0x138>)
 800062c:	6013      	str	r3, [r2, #0]

  /* creation of storeStart */
  storeStartHandle = osSemaphoreNew(1, 0, &storeStart_attributes);
 800062e:	4a28      	ldr	r2, [pc, #160]	@ (80006d0 <main+0x13c>)
 8000630:	2100      	movs	r1, #0
 8000632:	2001      	movs	r0, #1
 8000634:	f006 fb47 	bl	8006cc6 <osSemaphoreNew>
 8000638:	4603      	mov	r3, r0
 800063a:	4a26      	ldr	r2, [pc, #152]	@ (80006d4 <main+0x140>)
 800063c:	6013      	str	r3, [r2, #0]

  /* creation of storeStop */
  storeStopHandle = osSemaphoreNew(1, 0, &storeStop_attributes);
 800063e:	4a26      	ldr	r2, [pc, #152]	@ (80006d8 <main+0x144>)
 8000640:	2100      	movs	r1, #0
 8000642:	2001      	movs	r0, #1
 8000644:	f006 fb3f 	bl	8006cc6 <osSemaphoreNew>
 8000648:	4603      	mov	r3, r0
 800064a:	4a24      	ldr	r2, [pc, #144]	@ (80006dc <main+0x148>)
 800064c:	6013      	str	r3, [r2, #0]

  /* creation of depositStart */
  depositStartHandle = osSemaphoreNew(1, 0, &depositStart_attributes);
 800064e:	4a24      	ldr	r2, [pc, #144]	@ (80006e0 <main+0x14c>)
 8000650:	2100      	movs	r1, #0
 8000652:	2001      	movs	r0, #1
 8000654:	f006 fb37 	bl	8006cc6 <osSemaphoreNew>
 8000658:	4603      	mov	r3, r0
 800065a:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <main+0x150>)
 800065c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of storingTask */
  storingTaskHandle = osThreadNew(StartStoringTask, NULL, &storingTask_attributes);
 800065e:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <main+0x154>)
 8000660:	2100      	movs	r1, #0
 8000662:	4822      	ldr	r0, [pc, #136]	@ (80006ec <main+0x158>)
 8000664:	f006 f974 	bl	8006950 <osThreadNew>
 8000668:	4603      	mov	r3, r0
 800066a:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <main+0x15c>)
 800066c:	6013      	str	r3, [r2, #0]

  /* creation of depositTask */
  depositTaskHandle = osThreadNew(StartDepositTask, NULL, &depositTask_attributes);
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <main+0x160>)
 8000670:	2100      	movs	r1, #0
 8000672:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <main+0x164>)
 8000674:	f006 f96c 	bl	8006950 <osThreadNew>
 8000678:	4603      	mov	r3, r0
 800067a:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <main+0x168>)
 800067c:	6013      	str	r3, [r2, #0]

  /* creation of storingStopTask */
  storingStopTaskHandle = osThreadNew(storingStopTaskFunc, NULL, &storingStopTask_attributes);
 800067e:	4a20      	ldr	r2, [pc, #128]	@ (8000700 <main+0x16c>)
 8000680:	2100      	movs	r1, #0
 8000682:	4820      	ldr	r0, [pc, #128]	@ (8000704 <main+0x170>)
 8000684:	f006 f964 	bl	8006950 <osThreadNew>
 8000688:	4603      	mov	r3, r0
 800068a:	4a1f      	ldr	r2, [pc, #124]	@ (8000708 <main+0x174>)
 800068c:	6013      	str	r3, [r2, #0]

  /* creation of receiveWIFI */
  receiveWIFIHandle = osThreadNew(receiveWIFITask, NULL, &receiveWIFI_attributes);
 800068e:	4a1f      	ldr	r2, [pc, #124]	@ (800070c <main+0x178>)
 8000690:	2100      	movs	r1, #0
 8000692:	481f      	ldr	r0, [pc, #124]	@ (8000710 <main+0x17c>)
 8000694:	f006 f95c 	bl	8006950 <osThreadNew>
 8000698:	4603      	mov	r3, r0
 800069a:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <main+0x180>)
 800069c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f006 f931 	bl	8006904 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x10e>
 80006a6:	bf00      	nop
 80006a8:	20000a4c 	.word	0x20000a4c
 80006ac:	20000a58 	.word	0x20000a58
 80006b0:	20000a5c 	.word	0x20000a5c
 80006b4:	20000a5d 	.word	0x20000a5d
 80006b8:	0800bf30 	.word	0x0800bf30
 80006bc:	0800bf3c 	.word	0x0800bf3c
 80006c0:	0800c604 	.word	0x0800c604
 80006c4:	20000824 	.word	0x20000824
 80006c8:	0800c614 	.word	0x0800c614
 80006cc:	20000828 	.word	0x20000828
 80006d0:	0800c624 	.word	0x0800c624
 80006d4:	2000082c 	.word	0x2000082c
 80006d8:	0800c634 	.word	0x0800c634
 80006dc:	20000830 	.word	0x20000830
 80006e0:	0800c644 	.word	0x0800c644
 80006e4:	20000834 	.word	0x20000834
 80006e8:	0800c574 	.word	0x0800c574
 80006ec:	080011a1 	.word	0x080011a1
 80006f0:	20000814 	.word	0x20000814
 80006f4:	0800c598 	.word	0x0800c598
 80006f8:	080011e9 	.word	0x080011e9
 80006fc:	20000818 	.word	0x20000818
 8000700:	0800c5bc 	.word	0x0800c5bc
 8000704:	08001231 	.word	0x08001231
 8000708:	2000081c 	.word	0x2000081c
 800070c:	0800c5e0 	.word	0x0800c5e0
 8000710:	0800128d 	.word	0x0800128d
 8000714:	20000820 	.word	0x20000820

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b096      	sub	sp, #88	@ 0x58
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2244      	movs	r2, #68	@ 0x44
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f009 ffd4 	bl	800a6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800073e:	f002 ff09 	bl	8003554 <HAL_PWREx_ControlVoltageScaling>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000748:	f000 fe00 	bl	800134c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800074c:	f002 fee4 	bl	8003518 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000750:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <SystemClock_Config+0xc0>)
 8000752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000756:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <SystemClock_Config+0xc0>)
 8000758:	f023 0318 	bic.w	r3, r3, #24
 800075c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000760:	2314      	movs	r3, #20
 8000762:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000770:	2360      	movs	r3, #96	@ 0x60
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000778:	2301      	movs	r3, #1
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000780:	2328      	movs	r3, #40	@ 0x28
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000784:	2307      	movs	r3, #7
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4618      	mov	r0, r3
 8000796:	f002 ffff 	bl	8003798 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007a0:	f000 fdd4 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2303      	movs	r3, #3
 80007aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	2104      	movs	r1, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 fbc7 	bl	8003f50 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007c8:	f000 fdc0 	bl	800134c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007cc:	f004 f8ce 	bl	800496c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007d0:	bf00      	nop
 80007d2:	3758      	adds	r7, #88	@ 0x58
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007e2:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <MX_DFSDM1_Init+0x6c>)
 80007e4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800080c:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000814:	2204      	movs	r2, #4
 8000816:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000820:	2201      	movs	r2, #1
 8000822:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_DFSDM1_Init+0x68>)
 8000832:	f002 f8cb 	bl	80029cc <HAL_DFSDM_ChannelInit>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800083c:	f000 fd86 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000088 	.word	0x20000088
 8000848:	40016020 	.word	0x40016020

0800084c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000850:	4b1b      	ldr	r3, [pc, #108]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	@ (80008c4 <MX_I2C2_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000856:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000858:	f640 6214 	movw	r2, #3604	@ 0xe14
 800085c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000864:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000866:	2201      	movs	r2, #1
 8000868:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000876:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_I2C2_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800088a:	f002 fbdf 	bl	800304c <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 fd5a 	bl	800134c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <MX_I2C2_Init+0x74>)
 800089c:	f002 fc71 	bl	8003182 <HAL_I2CEx_ConfigAnalogFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80008a6:	f000 fd51 	bl	800134c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_I2C2_Init+0x74>)
 80008ae:	f002 fcb3 	bl	8003218 <HAL_I2CEx_ConfigDigitalFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 fd48 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000c0 	.word	0x200000c0
 80008c4:	40005800 	.word	0x40005800

080008c8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008ce:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <MX_QUADSPI_Init+0x48>)
 80008d0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008da:	2204      	movs	r2, #4
 80008dc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008e4:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008e6:	2217      	movs	r2, #23
 80008e8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_QUADSPI_Init+0x44>)
 80008f8:	f002 fe92 	bl	8003620 <HAL_QSPI_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000902:	f000 fd23 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000114 	.word	0x20000114
 8000910:	a0001000 	.word	0xa0001000

08000914 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_SPI1_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <MX_SPI1_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000920:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_SPI1_Init+0x74>)
 800092e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000932:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000946:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_SPI1_Init+0x74>)
 800094a:	2210      	movs	r2, #16
 800094c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000962:	2207      	movs	r2, #7
 8000964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_SPI1_Init+0x74>)
 800096e:	2208      	movs	r2, #8
 8000970:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_SPI1_Init+0x74>)
 8000974:	f004 f9dc 	bl	8004d30 <HAL_SPI_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 fce5 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000158 	.word	0x20000158
 800098c:	40013000 	.word	0x40013000

08000990 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */
//
  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000994:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <MX_SPI3_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	@ (8000a08 <MX_SPI3_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a04 <MX_SPI3_Init+0x74>)
 800099c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a8:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009aa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009de:	2207      	movs	r2, #7
 80009e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009ea:	2208      	movs	r2, #8
 80009ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_SPI3_Init+0x74>)
 80009f0:	f004 f99e 	bl	8004d30 <HAL_SPI_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fca7 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
//
  /* USER CODE END SPI3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200001bc 	.word	0x200001bc
 8000a08:	40003c00 	.word	0x40003c00

08000a0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	@ (8000a68 <MX_USART1_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_USART1_UART_Init+0x58>)
 8000a50:	f004 fea8 	bl	80057a4 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 fc77 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000220 	.word	0x20000220
 8000a68:	40013800 	.word	0x40013800

08000a6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	@ (8000ac8 <MX_USART3_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	f004 fe78 	bl	80057a4 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f000 fc47 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200002a8 	.word	0x200002a8
 8000ac8:	40004800 	.word	0x40004800

08000acc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ad6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2206      	movs	r2, #6
 8000adc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b10:	f002 fbce 	bl	80032b0 <HAL_PCD_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 fc17 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000330 	.word	0x20000330

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3e:	4bbf      	ldr	r3, [pc, #764]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	4abe      	ldr	r2, [pc, #760]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4a:	4bbc      	ldr	r3, [pc, #752]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4bb9      	ldr	r3, [pc, #740]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5a:	4ab8      	ldr	r2, [pc, #736]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b62:	4bb6      	ldr	r3, [pc, #728]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4bb3      	ldr	r3, [pc, #716]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	4ab2      	ldr	r2, [pc, #712]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7a:	4bb0      	ldr	r3, [pc, #704]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4bad      	ldr	r3, [pc, #692]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	4aac      	ldr	r2, [pc, #688]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b92:	4baa      	ldr	r3, [pc, #680]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4ba7      	ldr	r3, [pc, #668]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	4aa6      	ldr	r2, [pc, #664]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000baa:	4ba4      	ldr	r3, [pc, #656]	@ (8000e3c <MX_GPIO_Init+0x314>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000bbc:	48a0      	ldr	r0, [pc, #640]	@ (8000e40 <MX_GPIO_Init+0x318>)
 8000bbe:	f002 fa15 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f240 215f 	movw	r1, #607	@ 0x25f
 8000bc8:	489e      	ldr	r0, [pc, #632]	@ (8000e44 <MX_GPIO_Init+0x31c>)
 8000bca:	f002 fa0f 	bl	8002fec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f240 1117 	movw	r1, #279	@ 0x117
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f002 fa08 	bl	8002fec <HAL_GPIO_WritePin>
                          |SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f24f 0104 	movw	r1, #61444	@ 0xf004
 8000be2:	4899      	ldr	r0, [pc, #612]	@ (8000e48 <MX_GPIO_Init+0x320>)
 8000be4:	f002 fa02 	bl	8002fec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000bee:	4897      	ldr	r0, [pc, #604]	@ (8000e4c <MX_GPIO_Init+0x324>)
 8000bf0:	f002 f9fc 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfa:	4894      	ldr	r0, [pc, #592]	@ (8000e4c <MX_GPIO_Init+0x324>)
 8000bfc:	f002 f9f6 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2120      	movs	r1, #32
 8000c04:	4890      	ldr	r0, [pc, #576]	@ (8000e48 <MX_GPIO_Init+0x320>)
 8000c06:	f002 f9f1 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	488c      	ldr	r0, [pc, #560]	@ (8000e40 <MX_GPIO_Init+0x318>)
 8000c10:	f002 f9ec 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c14:	f240 1315 	movw	r3, #277	@ 0x115
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4884      	ldr	r0, [pc, #528]	@ (8000e40 <MX_GPIO_Init+0x318>)
 8000c2e:	f002 f81b 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c32:	2362      	movs	r3, #98	@ 0x62
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	487e      	ldr	r0, [pc, #504]	@ (8000e40 <MX_GPIO_Init+0x318>)
 8000c48:	f002 f80e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4878      	ldr	r0, [pc, #480]	@ (8000e44 <MX_GPIO_Init+0x31c>)
 8000c64:	f002 f800 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c68:	f240 235f 	movw	r3, #607	@ 0x25f
 8000c6c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4870      	ldr	r0, [pc, #448]	@ (8000e44 <MX_GPIO_Init+0x31c>)
 8000c82:	f001 fff1 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000c86:	f240 1317 	movw	r3, #279	@ 0x117
 8000c8a:	617b      	str	r3, [r7, #20]
                          |SPBTLE_RF_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca2:	f001 ffe1 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000caa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbe:	f001 ffd3 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A0_Pin;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cc6:	230b      	movs	r3, #11
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	485b      	ldr	r0, [pc, #364]	@ (8000e44 <MX_GPIO_Init+0x31c>)
 8000cd6:	f001 ffc7 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4856      	ldr	r0, [pc, #344]	@ (8000e48 <MX_GPIO_Init+0x320>)
 8000cf0:	f001 ffba 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8000cf4:	2312      	movs	r3, #18
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d04:	2302      	movs	r3, #2
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	484e      	ldr	r0, [pc, #312]	@ (8000e48 <MX_GPIO_Init+0x320>)
 8000d10:	f001 ffaa 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d14:	f24f 0324 	movw	r3, #61476	@ 0xf024
 8000d18:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4846      	ldr	r0, [pc, #280]	@ (8000e48 <MX_GPIO_Init+0x320>)
 8000d2e:	f001 ff9b 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d32:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000d36:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4840      	ldr	r0, [pc, #256]	@ (8000e4c <MX_GPIO_Init+0x324>)
 8000d4a:	f001 ff8d 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d4e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4839      	ldr	r0, [pc, #228]	@ (8000e4c <MX_GPIO_Init+0x324>)
 8000d68:	f001 ff7e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d6c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4830      	ldr	r0, [pc, #192]	@ (8000e44 <MX_GPIO_Init+0x31c>)
 8000d84:	f001 ff70 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da8:	f001 ff5e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dbc:	2305      	movs	r3, #5
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4821      	ldr	r0, [pc, #132]	@ (8000e4c <MX_GPIO_Init+0x324>)
 8000dc8:	f001 ff4e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dcc:	2378      	movs	r3, #120	@ 0x78
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4819      	ldr	r0, [pc, #100]	@ (8000e4c <MX_GPIO_Init+0x324>)
 8000de8:	f001 ff3e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000dec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480f      	ldr	r0, [pc, #60]	@ (8000e48 <MX_GPIO_Init+0x320>)
 8000e0a:	f001 ff2d 	bl	8002c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2105      	movs	r1, #5
 8000e12:	2009      	movs	r0, #9
 8000e14:	f001 fda3 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000e18:	2009      	movs	r0, #9
 8000e1a:	f001 fdbc 	bl	8002996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	2017      	movs	r0, #23
 8000e24:	f001 fd9b 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e28:	2017      	movs	r0, #23
 8000e2a:	f001 fdb4 	bl	8002996 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2105      	movs	r1, #5
 8000e32:	2028      	movs	r0, #40	@ 0x28
 8000e34:	f001 fd93 	bl	800295e <HAL_NVIC_SetPriority>
 8000e38:	e00a      	b.n	8000e50 <MX_GPIO_Init+0x328>
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	48001000 	.word	0x48001000
 8000e44:	48000800 	.word	0x48000800
 8000e48:	48000400 	.word	0x48000400
 8000e4c:	48000c00 	.word	0x48000c00
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e50:	2028      	movs	r0, #40	@ 0x28
 8000e52:	f001 fda0 	bl	8002996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	@ 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop

08000e60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	printf("PIN:%d",GPIO_Pin);
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4813      	ldr	r0, [pc, #76]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x5c>)
 8000e70:	f009 fa8c 	bl	800a38c <iprintf>
  switch (GPIO_Pin)
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d002      	beq.n	8000e80 <HAL_GPIO_EXTI_Callback+0x20>
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_EXTI_Callback+0x26>
		}
		break;
	}
    default:
    {
      break;
 8000e7e:	e019      	b.n	8000eb4 <HAL_GPIO_EXTI_Callback+0x54>
		SPI_WIFI_ISR();
 8000e80:	f001 fba6 	bl	80025d0 <SPI_WIFI_ISR>
		break;
 8000e84:	e016      	b.n	8000eb4 <HAL_GPIO_EXTI_Callback+0x54>
		if (HAL_GPIO_ReadPin(GPIOA, BUTTON_Pin) == GPIO_PIN_RESET)  // Falling edge (pressed)
 8000e86:	2108      	movs	r1, #8
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8c:	f002 f896 	bl	8002fbc <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d105      	bne.n	8000ea2 <HAL_GPIO_EXTI_Callback+0x42>
			osSemaphoreRelease(storeStartHandle);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x60>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f005 ffee 	bl	8006e7c <osSemaphoreRelease>
		break;
 8000ea0:	e007      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x52>
			printf("stopping\n");
 8000ea2:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000ea4:	f009 fada 	bl	800a45c <puts>
			osSemaphoreRelease(storeStopHandle);
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 ffe5 	bl	8006e7c <osSemaphoreRelease>
		break;
 8000eb2:	bf00      	nop
    }
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0800bf5c 	.word	0x0800bf5c
 8000ec0:	2000082c 	.word	0x2000082c
 8000ec4:	0800bf64 	.word	0x0800bf64
 8000ec8:	20000830 	.word	0x20000830

08000ecc <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <SPI3_IRQHandler+0x10>)
 8000ed2:	f004 f9ef 	bl	80052b4 <HAL_SPI_IRQHandler>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000a8c 	.word	0x20000a8c

08000ee0 <StartStoringProcess>:
void StartStoringProcess(void){
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af04      	add	r7, sp, #16
	while(flag==1){
 8000ee6:	e083      	b.n	8000ff0 <StartStoringProcess+0x110>
		status = MFRC522_Request(PICC_REQIDL, str);
 8000ee8:	4947      	ldr	r1, [pc, #284]	@ (8001008 <StartStoringProcess+0x128>)
 8000eea:	2026      	movs	r0, #38	@ 0x26
 8000eec:	f000 fbdd 	bl	80016aa <MFRC522_Request>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b45      	ldr	r3, [pc, #276]	@ (800100c <StartStoringProcess+0x12c>)
 8000ef6:	701a      	strb	r2, [r3, #0]
		printf("status:%d\n",status);
 8000ef8:	4b44      	ldr	r3, [pc, #272]	@ (800100c <StartStoringProcess+0x12c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4844      	ldr	r0, [pc, #272]	@ (8001010 <StartStoringProcess+0x130>)
 8000f00:	f009 fa44 	bl	800a38c <iprintf>
		if (status == MI_OK)
 8000f04:	4b41      	ldr	r3, [pc, #260]	@ (800100c <StartStoringProcess+0x12c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d16e      	bne.n	8000fea <StartStoringProcess+0x10a>
		{
		    printf("Card detected\n");
 8000f0c:	4841      	ldr	r0, [pc, #260]	@ (8001014 <StartStoringProcess+0x134>)
 8000f0e:	f009 faa5 	bl	800a45c <puts>

		    status = MFRC522_Anticoll(str);
 8000f12:	483d      	ldr	r0, [pc, #244]	@ (8001008 <StartStoringProcess+0x128>)
 8000f14:	f000 fbee 	bl	80016f4 <MFRC522_Anticoll>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <StartStoringProcess+0x12c>)
 8000f1e:	701a      	strb	r2, [r3, #0]
		    if (status == MI_OK)
 8000f20:	4b3a      	ldr	r3, [pc, #232]	@ (800100c <StartStoringProcess+0x12c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d160      	bne.n	8000fea <StartStoringProcess+0x10a>
		    {
		        memcpy(sNum, str, 5);
 8000f28:	4b3b      	ldr	r3, [pc, #236]	@ (8001018 <StartStoringProcess+0x138>)
 8000f2a:	4a37      	ldr	r2, [pc, #220]	@ (8001008 <StartStoringProcess+0x128>)
 8000f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f30:	6018      	str	r0, [r3, #0]
 8000f32:	3304      	adds	r3, #4
 8000f34:	7019      	strb	r1, [r3, #0]
//		        lastScanTime=HAL_GetTick();
		        printf("Card UID: %02X %02X %02X %02X %02X\n",
		               sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f36:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <StartStoringProcess+0x138>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
		        printf("Card UID: %02X %02X %02X %02X %02X\n",
 8000f3a:	4619      	mov	r1, r3
		               sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f3c:	4b36      	ldr	r3, [pc, #216]	@ (8001018 <StartStoringProcess+0x138>)
 8000f3e:	785b      	ldrb	r3, [r3, #1]
		        printf("Card UID: %02X %02X %02X %02X %02X\n",
 8000f40:	4618      	mov	r0, r3
		               sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f42:	4b35      	ldr	r3, [pc, #212]	@ (8001018 <StartStoringProcess+0x138>)
 8000f44:	789b      	ldrb	r3, [r3, #2]
		        printf("Card UID: %02X %02X %02X %02X %02X\n",
 8000f46:	461c      	mov	r4, r3
		               sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f48:	4b33      	ldr	r3, [pc, #204]	@ (8001018 <StartStoringProcess+0x138>)
 8000f4a:	78db      	ldrb	r3, [r3, #3]
		        printf("Card UID: %02X %02X %02X %02X %02X\n",
 8000f4c:	461a      	mov	r2, r3
		               sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <StartStoringProcess+0x138>)
 8000f50:	791b      	ldrb	r3, [r3, #4]
		        printf("Card UID: %02X %02X %02X %02X %02X\n",
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	4623      	mov	r3, r4
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4830      	ldr	r0, [pc, #192]	@ (800101c <StartStoringProcess+0x13c>)
 8000f5c:	f009 fa16 	bl	800a38c <iprintf>
		        sprintf(TxData, "%02X %02X %02X %02X %02X\n",
		                sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f60:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <StartStoringProcess+0x138>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
		        sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 8000f64:	4618      	mov	r0, r3
		                sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f66:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <StartStoringProcess+0x138>)
 8000f68:	785b      	ldrb	r3, [r3, #1]
		        sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 8000f6a:	461c      	mov	r4, r3
		                sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <StartStoringProcess+0x138>)
 8000f6e:	789b      	ldrb	r3, [r3, #2]
		        sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 8000f70:	461a      	mov	r2, r3
		                sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <StartStoringProcess+0x138>)
 8000f74:	78db      	ldrb	r3, [r3, #3]
		        sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 8000f76:	4619      	mov	r1, r3
		                sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <StartStoringProcess+0x138>)
 8000f7a:	791b      	ldrb	r3, [r3, #4]
		        sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	9101      	str	r1, [sp, #4]
 8000f80:	9200      	str	r2, [sp, #0]
 8000f82:	4623      	mov	r3, r4
 8000f84:	4602      	mov	r2, r0
 8000f86:	4926      	ldr	r1, [pc, #152]	@ (8001020 <StartStoringProcess+0x140>)
 8000f88:	4826      	ldr	r0, [pc, #152]	@ (8001024 <StartStoringProcess+0x144>)
 8000f8a:	f009 fa6f 	bl	800a46c <siprintf>

		        if (osMutexAcquire(WIFIsocketHandle, 1000) == osOK) // 最多等 1 秒
 8000f8e:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <StartStoringProcess+0x148>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f96:	4618      	mov	r0, r3
 8000f98:	f005 fe0d 	bl	8006bb6 <osMutexAcquire>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d120      	bne.n	8000fe4 <StartStoringProcess+0x104>
				{
					ret = WIFI_SendData(Socket, (const uint8_t *)TxData, strlen(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8000fa2:	4b22      	ldr	r3, [pc, #136]	@ (800102c <StartStoringProcess+0x14c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	461c      	mov	r4, r3
 8000fa8:	481e      	ldr	r0, [pc, #120]	@ (8001024 <StartStoringProcess+0x144>)
 8000faa:	f7ff f911 	bl	80001d0 <strlen>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <StartStoringProcess+0x150>)
 8000fba:	491a      	ldr	r1, [pc, #104]	@ (8001024 <StartStoringProcess+0x144>)
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f001 fb17 	bl	80025f0 <WIFI_SendData>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <StartStoringProcess+0x154>)
 8000fc8:	601a      	str	r2, [r3, #0]
					osMutexRelease(WIFIsocketHandle);
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <StartStoringProcess+0x148>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f005 fe3c 	bl	8006c4c <osMutexRelease>

					if (ret != WIFI_STATUS_OK)
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <StartStoringProcess+0x154>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <StartStoringProcess+0x10a>
					{
						printf("> ERROR : Failed to Send Data, connection closed\n");
 8000fdc:	4816      	ldr	r0, [pc, #88]	@ (8001038 <StartStoringProcess+0x158>)
 8000fde:	f009 fa3d 	bl	800a45c <puts>
						break;
 8000fe2:	e00c      	b.n	8000ffe <StartStoringProcess+0x11e>
					}
				}
				else
				{
					printf("Socket busy, send skipped.\n");
 8000fe4:	4815      	ldr	r0, [pc, #84]	@ (800103c <StartStoringProcess+0x15c>)
 8000fe6:	f009 fa39 	bl	800a45c <puts>
				}

		    }
		}
		osDelay(100);
 8000fea:	2064      	movs	r0, #100	@ 0x64
 8000fec:	f005 fd42 	bl	8006a74 <osDelay>
	while(flag==1){
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <StartStoringProcess+0x160>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	f43f af76 	beq.w	8000ee8 <StartStoringProcess+0x8>
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3704      	adds	r7, #4
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	bf00      	nop
 8001008:	20000a68 	.word	0x20000a68
 800100c:	20000a64 	.word	0x20000a64
 8001010:	0800bf70 	.word	0x0800bf70
 8001014:	0800bf7c 	.word	0x0800bf7c
 8001018:	20000a78 	.word	0x20000a78
 800101c:	0800bf8c 	.word	0x0800bf8c
 8001020:	0800bfb0 	.word	0x0800bfb0
 8001024:	20000a2c 	.word	0x20000a2c
 8001028:	20000824 	.word	0x20000824
 800102c:	20000a4c 	.word	0x20000a4c
 8001030:	20000a50 	.word	0x20000a50
 8001034:	20000a54 	.word	0x20000a54
 8001038:	0800bfcc 	.word	0x0800bfcc
 800103c:	0800c000 	.word	0x0800c000
 8001040:	20000a5d 	.word	0x20000a5d

08001044 <StartDepositProcess>:
void StartDepositProcess(){
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b087      	sub	sp, #28
 8001048:	af04      	add	r7, sp, #16
	int count=0;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
	while(count<expectedItemCount){
 800104e:	e080      	b.n	8001152 <StartDepositProcess+0x10e>
		status = MFRC522_Request(PICC_REQIDL, str);
 8001050:	4945      	ldr	r1, [pc, #276]	@ (8001168 <StartDepositProcess+0x124>)
 8001052:	2026      	movs	r0, #38	@ 0x26
 8001054:	f000 fb29 	bl	80016aa <MFRC522_Request>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b43      	ldr	r3, [pc, #268]	@ (800116c <StartDepositProcess+0x128>)
 800105e:	701a      	strb	r2, [r3, #0]
		if (status == MI_OK)
 8001060:	4b42      	ldr	r3, [pc, #264]	@ (800116c <StartDepositProcess+0x128>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d171      	bne.n	800114c <StartDepositProcess+0x108>
		{
			printf("Card detected\n");
 8001068:	4841      	ldr	r0, [pc, #260]	@ (8001170 <StartDepositProcess+0x12c>)
 800106a:	f009 f9f7 	bl	800a45c <puts>

			status = MFRC522_Anticoll(str);
 800106e:	483e      	ldr	r0, [pc, #248]	@ (8001168 <StartDepositProcess+0x124>)
 8001070:	f000 fb40 	bl	80016f4 <MFRC522_Anticoll>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b3c      	ldr	r3, [pc, #240]	@ (800116c <StartDepositProcess+0x128>)
 800107a:	701a      	strb	r2, [r3, #0]
			if (status == MI_OK)
 800107c:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <StartDepositProcess+0x128>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d163      	bne.n	800114c <StartDepositProcess+0x108>
			{
				memcpy(sNum, str, 5);
 8001084:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <StartDepositProcess+0x130>)
 8001086:	4a38      	ldr	r2, [pc, #224]	@ (8001168 <StartDepositProcess+0x124>)
 8001088:	e892 0003 	ldmia.w	r2, {r0, r1}
 800108c:	6018      	str	r0, [r3, #0]
 800108e:	3304      	adds	r3, #4
 8001090:	7019      	strb	r1, [r3, #0]
//		        lastScanTime=HAL_GetTick();
				printf("Card UID: %02X %02X %02X %02X %02X\n",
					   sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <StartDepositProcess+0x130>)
 8001094:	781b      	ldrb	r3, [r3, #0]
				printf("Card UID: %02X %02X %02X %02X %02X\n",
 8001096:	4619      	mov	r1, r3
					   sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 8001098:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <StartDepositProcess+0x130>)
 800109a:	785b      	ldrb	r3, [r3, #1]
				printf("Card UID: %02X %02X %02X %02X %02X\n",
 800109c:	4618      	mov	r0, r3
					   sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 800109e:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <StartDepositProcess+0x130>)
 80010a0:	789b      	ldrb	r3, [r3, #2]
				printf("Card UID: %02X %02X %02X %02X %02X\n",
 80010a2:	461c      	mov	r4, r3
					   sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 80010a4:	4b33      	ldr	r3, [pc, #204]	@ (8001174 <StartDepositProcess+0x130>)
 80010a6:	78db      	ldrb	r3, [r3, #3]
				printf("Card UID: %02X %02X %02X %02X %02X\n",
 80010a8:	461a      	mov	r2, r3
					   sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <StartDepositProcess+0x130>)
 80010ac:	791b      	ldrb	r3, [r3, #4]
				printf("Card UID: %02X %02X %02X %02X %02X\n",
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	9200      	str	r2, [sp, #0]
 80010b2:	4623      	mov	r3, r4
 80010b4:	4602      	mov	r2, r0
 80010b6:	4830      	ldr	r0, [pc, #192]	@ (8001178 <StartDepositProcess+0x134>)
 80010b8:	f009 f968 	bl	800a38c <iprintf>
				sprintf(TxData, "%02X %02X %02X %02X %02X\n",
						sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 80010bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <StartDepositProcess+0x130>)
 80010be:	781b      	ldrb	r3, [r3, #0]
				sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 80010c0:	4618      	mov	r0, r3
						sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <StartDepositProcess+0x130>)
 80010c4:	785b      	ldrb	r3, [r3, #1]
				sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 80010c6:	461c      	mov	r4, r3
						sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 80010c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <StartDepositProcess+0x130>)
 80010ca:	789b      	ldrb	r3, [r3, #2]
				sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 80010cc:	461a      	mov	r2, r3
						sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <StartDepositProcess+0x130>)
 80010d0:	78db      	ldrb	r3, [r3, #3]
				sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 80010d2:	4619      	mov	r1, r3
						sNum[0], sNum[1], sNum[2], sNum[3], sNum[4]);
 80010d4:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <StartDepositProcess+0x130>)
 80010d6:	791b      	ldrb	r3, [r3, #4]
				sprintf(TxData, "%02X %02X %02X %02X %02X\n",
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	9101      	str	r1, [sp, #4]
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	4623      	mov	r3, r4
 80010e0:	4602      	mov	r2, r0
 80010e2:	4926      	ldr	r1, [pc, #152]	@ (800117c <StartDepositProcess+0x138>)
 80010e4:	4826      	ldr	r0, [pc, #152]	@ (8001180 <StartDepositProcess+0x13c>)
 80010e6:	f009 f9c1 	bl	800a46c <siprintf>
				if (osMutexAcquire(WIFIsocketHandle, 1000) == osOK) // 最多等 1 秒
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <StartDepositProcess+0x140>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 fd5f 	bl	8006bb6 <osMutexAcquire>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d120      	bne.n	8001140 <StartDepositProcess+0xfc>
				{
					ret = WIFI_SendData(Socket, (const uint8_t *)TxData, strlen(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <StartDepositProcess+0x144>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	461c      	mov	r4, r3
 8001104:	481e      	ldr	r0, [pc, #120]	@ (8001180 <StartDepositProcess+0x13c>)
 8001106:	f7ff f863 	bl	80001d0 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	b29a      	uxth	r2, r3
 800110e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <StartDepositProcess+0x148>)
 8001116:	491a      	ldr	r1, [pc, #104]	@ (8001180 <StartDepositProcess+0x13c>)
 8001118:	4620      	mov	r0, r4
 800111a:	f001 fa69 	bl	80025f0 <WIFI_SendData>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <StartDepositProcess+0x14c>)
 8001124:	601a      	str	r2, [r3, #0]
					osMutexRelease(WIFIsocketHandle);
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <StartDepositProcess+0x140>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fd8e 	bl	8006c4c <osMutexRelease>

					if (ret != WIFI_STATUS_OK)
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <StartDepositProcess+0x14c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <StartDepositProcess+0x102>
					{
						printf("> ERROR : Failed to Send Data, connection closed\n");
 8001138:	4816      	ldr	r0, [pc, #88]	@ (8001194 <StartDepositProcess+0x150>)
 800113a:	f009 f98f 	bl	800a45c <puts>
						break;
 800113e:	e00f      	b.n	8001160 <StartDepositProcess+0x11c>
					}
				}
				else
				{
					printf("Socket busy, send skipped.\n");
 8001140:	4815      	ldr	r0, [pc, #84]	@ (8001198 <StartDepositProcess+0x154>)
 8001142:	f009 f98b 	bl	800a45c <puts>
				}
				count++;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3301      	adds	r3, #1
 800114a:	607b      	str	r3, [r7, #4]

			}
		}
		osDelay(100);
 800114c:	2064      	movs	r0, #100	@ 0x64
 800114e:	f005 fc91 	bl	8006a74 <osDelay>
	while(count<expectedItemCount){
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <StartDepositProcess+0x158>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	f6ff af79 	blt.w	8001050 <StartDepositProcess+0xc>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	20000a68 	.word	0x20000a68
 800116c:	20000a64 	.word	0x20000a64
 8001170:	0800bf7c 	.word	0x0800bf7c
 8001174:	20000a78 	.word	0x20000a78
 8001178:	0800bf8c 	.word	0x0800bf8c
 800117c:	0800bfb0 	.word	0x0800bfb0
 8001180:	20000a2c 	.word	0x20000a2c
 8001184:	20000824 	.word	0x20000824
 8001188:	20000a4c 	.word	0x20000a4c
 800118c:	20000a50 	.word	0x20000a50
 8001190:	20000a54 	.word	0x20000a54
 8001194:	0800bfcc 	.word	0x0800bfcc
 8001198:	0800c000 	.word	0x0800c000
 800119c:	20000a60 	.word	0x20000a60

080011a0 <StartStoringTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartStoringTask */
void StartStoringTask(void *argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(storeStartHandle, osWaitForever);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <StartStoringTask+0x38>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	4618      	mov	r0, r3
 80011b2:	f005 fe11 	bl	8006dd8 <osSemaphoreAcquire>
	  osSemaphoreAcquire(taskSemHandle,osWaitForever);
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <StartStoringTask+0x3c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f04f 31ff 	mov.w	r1, #4294967295
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fe0a 	bl	8006dd8 <osSemaphoreAcquire>
	  printf("start storing\n");
 80011c4:	4806      	ldr	r0, [pc, #24]	@ (80011e0 <StartStoringTask+0x40>)
 80011c6:	f009 f949 	bl	800a45c <puts>
	  //scanning
	  flag=1;
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <StartStoringTask+0x44>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
	  StartStoringProcess();
 80011d0:	f7ff fe86 	bl	8000ee0 <StartStoringProcess>
	  osSemaphoreAcquire(storeStartHandle, osWaitForever);
 80011d4:	bf00      	nop
 80011d6:	e7e7      	b.n	80011a8 <StartStoringTask+0x8>
 80011d8:	2000082c 	.word	0x2000082c
 80011dc:	20000828 	.word	0x20000828
 80011e0:	0800c01c 	.word	0x0800c01c
 80011e4:	20000a5d 	.word	0x20000a5d

080011e8 <StartDepositTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDepositTask */
void StartDepositTask(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDepositTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(depositStartHandle, osWaitForever);
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <StartDepositTask+0x3c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fded 	bl	8006dd8 <osSemaphoreAcquire>
	  osSemaphoreAcquire(taskSemHandle,osWaitForever);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <StartDepositTask+0x40>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f04f 31ff 	mov.w	r1, #4294967295
 8001206:	4618      	mov	r0, r3
 8001208:	f005 fde6 	bl	8006dd8 <osSemaphoreAcquire>
	  printf("start deposit\n");
 800120c:	4807      	ldr	r0, [pc, #28]	@ (800122c <StartDepositTask+0x44>)
 800120e:	f009 f925 	bl	800a45c <puts>
	  StartDepositProcess();
 8001212:	f7ff ff17 	bl	8001044 <StartDepositProcess>
	  osSemaphoreRelease(taskSemHandle);
 8001216:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <StartDepositTask+0x40>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f005 fe2e 	bl	8006e7c <osSemaphoreRelease>
	  osSemaphoreAcquire(depositStartHandle, osWaitForever);
 8001220:	bf00      	nop
 8001222:	e7e5      	b.n	80011f0 <StartDepositTask+0x8>
 8001224:	20000834 	.word	0x20000834
 8001228:	20000828 	.word	0x20000828
 800122c:	0800c02c 	.word	0x0800c02c

08001230 <storingStopTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_storingStopTaskFunc */
void storingStopTaskFunc(void *argument)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storingStopTaskFunc */
  /* Infinite loop */
	printf("storingStopTaskFunc started\n");
 8001238:	480e      	ldr	r0, [pc, #56]	@ (8001274 <storingStopTaskFunc+0x44>)
 800123a:	f009 f90f 	bl	800a45c <puts>
  for(;;)
  {
	  osSemaphoreAcquire(storeStopHandle, osWaitForever);
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <storingStopTaskFunc+0x48>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f04f 31ff 	mov.w	r1, #4294967295
 8001246:	4618      	mov	r0, r3
 8001248:	f005 fdc6 	bl	8006dd8 <osSemaphoreAcquire>
	  printf("ending storing process\n");
 800124c:	480b      	ldr	r0, [pc, #44]	@ (800127c <storingStopTaskFunc+0x4c>)
 800124e:	f009 f905 	bl	800a45c <puts>
	  osDelay(1000*TIME_TO_C);
 8001252:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001256:	f005 fc0d 	bl	8006a74 <osDelay>
	  printf("delay end\n");
 800125a:	4809      	ldr	r0, [pc, #36]	@ (8001280 <storingStopTaskFunc+0x50>)
 800125c:	f009 f8fe 	bl	800a45c <puts>
	  flag=0;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <storingStopTaskFunc+0x54>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	  osSemaphoreRelease(taskSemHandle);
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <storingStopTaskFunc+0x58>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f005 fe06 	bl	8006e7c <osSemaphoreRelease>
	  osSemaphoreAcquire(storeStopHandle, osWaitForever);
 8001270:	bf00      	nop
 8001272:	e7e4      	b.n	800123e <storingStopTaskFunc+0xe>
 8001274:	0800c03c 	.word	0x0800c03c
 8001278:	20000830 	.word	0x20000830
 800127c:	0800c058 	.word	0x0800c058
 8001280:	0800c070 	.word	0x0800c070
 8001284:	20000a5d 	.word	0x20000a5d
 8001288:	20000828 	.word	0x20000828

0800128c <receiveWIFITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receiveWIFITask */
void receiveWIFITask(void *argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receiveWIFITask */
  /* Infinite loop */
  for(;;)
  {
	  if(Socket != -1)
 8001294:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <receiveWIFITask+0x9c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d0fa      	beq.n	8001294 <receiveWIFITask+0x8>
	  {
		if (osMutexAcquire(WIFIsocketHandle, 100) == osOK)  // 最多等 100ms
 800129e:	4b23      	ldr	r3, [pc, #140]	@ (800132c <receiveWIFITask+0xa0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2164      	movs	r1, #100	@ 0x64
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 fc86 	bl	8006bb6 <osMutexAcquire>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d137      	bne.n	8001320 <receiveWIFITask+0x94>
		{
		  ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData) - 1, &Datalen, WIFI_READ_TIMEOUT);
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <receiveWIFITask+0x9c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <receiveWIFITask+0xa4>)
 80012be:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80012c2:	491c      	ldr	r1, [pc, #112]	@ (8001334 <receiveWIFITask+0xa8>)
 80012c4:	f001 f9b6 	bl	8002634 <WIFI_ReceiveData>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <receiveWIFITask+0xac>)
 80012ce:	601a      	str	r2, [r3, #0]
		  osMutexRelease(WIFIsocketHandle);
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <receiveWIFITask+0xa0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 fcb9 	bl	8006c4c <osMutexRelease>

		  if (ret == WIFI_STATUS_OK)
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <receiveWIFITask+0xac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1d8      	bne.n	8001294 <receiveWIFITask+0x8>
		  {
			RxData[Datalen] = 0;
 80012e2:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <receiveWIFITask+0xa4>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <receiveWIFITask+0xa8>)
 80012ea:	2100      	movs	r1, #0
 80012ec:	5499      	strb	r1, [r3, r2]
			printf("Received: %s\n", RxData);
 80012ee:	4911      	ldr	r1, [pc, #68]	@ (8001334 <receiveWIFITask+0xa8>)
 80012f0:	4812      	ldr	r0, [pc, #72]	@ (800133c <receiveWIFITask+0xb0>)
 80012f2:	f009 f84b 	bl	800a38c <iprintf>

			int itemCount = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
			if (sscanf((char *)RxData, "start: %d", &itemCount) == 1)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	461a      	mov	r2, r3
 8001300:	490f      	ldr	r1, [pc, #60]	@ (8001340 <receiveWIFITask+0xb4>)
 8001302:	480c      	ldr	r0, [pc, #48]	@ (8001334 <receiveWIFITask+0xa8>)
 8001304:	f009 f8d2 	bl	800a4ac <siscanf>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d1c2      	bne.n	8001294 <receiveWIFITask+0x8>
			{
			  expectedItemCount = itemCount;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4a0c      	ldr	r2, [pc, #48]	@ (8001344 <receiveWIFITask+0xb8>)
 8001312:	6013      	str	r3, [r2, #0]
			  osSemaphoreRelease(storeStartHandle);
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <receiveWIFITask+0xbc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f005 fdaf 	bl	8006e7c <osSemaphoreRelease>
 800131e:	e7b9      	b.n	8001294 <receiveWIFITask+0x8>
		  }
		}
		else
		{
		  // mutex timeout，跳過一次
		  osDelay(10);
 8001320:	200a      	movs	r0, #10
 8001322:	f005 fba7 	bl	8006a74 <osDelay>
	  if(Socket != -1)
 8001326:	e7b5      	b.n	8001294 <receiveWIFITask+0x8>
 8001328:	20000a4c 	.word	0x20000a4c
 800132c:	20000824 	.word	0x20000824
 8001330:	20000a50 	.word	0x20000a50
 8001334:	20000838 	.word	0x20000838
 8001338:	20000a54 	.word	0x20000a54
 800133c:	0800c07c 	.word	0x0800c07c
 8001340:	0800c08c 	.word	0x0800c08c
 8001344:	20000a60 	.word	0x20000a60
 8001348:	2000082c 	.word	0x2000082c

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <Error_Handler+0x8>

08001358 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001362:	f107 020f 	add.w	r2, r7, #15
 8001366:	1df9      	adds	r1, r7, #7
 8001368:	2364      	movs	r3, #100	@ 0x64
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	4804      	ldr	r0, [pc, #16]	@ (8001380 <RC522_SPI_Transfer+0x28>)
 8001370:	f003 fd81 	bl	8004e76 <HAL_SPI_TransmitReceive>

	return rx_data;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000158 	.word	0x20000158

08001384 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	460a      	mov	r2, r1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	480c      	ldr	r0, [pc, #48]	@ (80013cc <Write_MFRC522+0x48>)
 800139a:	f001 fe27 	bl	8002fec <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffd4 	bl	8001358 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffd0 	bl	8001358 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2104      	movs	r1, #4
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <Write_MFRC522+0x48>)
 80013be:	f001 fe15 	bl	8002fec <HAL_GPIO_WritePin>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	48000400 	.word	0x48000400

080013d0 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2104      	movs	r1, #4
 80013de:	480f      	ldr	r0, [pc, #60]	@ (800141c <Read_MFRC522+0x4c>)
 80013e0:	f001 fe04 	bl	8002fec <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffad 	bl	8001358 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff ffaa 	bl	8001358 <RC522_SPI_Transfer>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2104      	movs	r1, #4
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <Read_MFRC522+0x4c>)
 800140e:	f001 fded 	bl	8002fec <HAL_GPIO_WritePin>

	return val;
 8001412:	7bfb      	ldrb	r3, [r7, #15]

}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	48000400 	.word	0x48000400

08001420 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffcc 	bl	80013d0 <Read_MFRC522>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	4313      	orrs	r3, r2
 8001442:	b2da      	uxtb	r2, r3
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff9b 	bl	8001384 <Write_MFRC522>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	460a      	mov	r2, r1
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	4613      	mov	r3, r2
 8001464:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ffb1 	bl	80013d0 <Read_MFRC522>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001472:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001476:	43db      	mvns	r3, r3
 8001478:	b25a      	sxtb	r2, r3
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4013      	ands	r3, r2
 8001480:	b25b      	sxtb	r3, r3
 8001482:	b2da      	uxtb	r2, r3
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff7b 	bl	8001384 <Write_MFRC522>
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800149a:	2014      	movs	r0, #20
 800149c:	f7ff ff98 	bl	80013d0 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80014a0:	2103      	movs	r1, #3
 80014a2:	2014      	movs	r0, #20
 80014a4:	f7ff ffbc 	bl	8001420 <SetBitMask>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80014b0:	210f      	movs	r1, #15
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff ff66 	bl	8001384 <Write_MFRC522>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	2104      	movs	r1, #4
 80014c4:	4813      	ldr	r0, [pc, #76]	@ (8001514 <MFRC522_Init+0x58>)
 80014c6:	f001 fd91 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2110      	movs	r1, #16
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d2:	f001 fd8b 	bl	8002fec <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80014d6:	f7ff ffe9 	bl	80014ac <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80014da:	218d      	movs	r1, #141	@ 0x8d
 80014dc:	202a      	movs	r0, #42	@ 0x2a
 80014de:	f7ff ff51 	bl	8001384 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80014e2:	213e      	movs	r1, #62	@ 0x3e
 80014e4:	202b      	movs	r0, #43	@ 0x2b
 80014e6:	f7ff ff4d 	bl	8001384 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80014ea:	211e      	movs	r1, #30
 80014ec:	202d      	movs	r0, #45	@ 0x2d
 80014ee:	f7ff ff49 	bl	8001384 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	202c      	movs	r0, #44	@ 0x2c
 80014f6:	f7ff ff45 	bl	8001384 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80014fa:	2140      	movs	r1, #64	@ 0x40
 80014fc:	2015      	movs	r0, #21
 80014fe:	f7ff ff41 	bl	8001384 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001502:	213d      	movs	r1, #61	@ 0x3d
 8001504:	2011      	movs	r0, #17
 8001506:	f7ff ff3d 	bl	8001384 <Write_MFRC522>

	AntennaOn();
 800150a:	f7ff ffc4 	bl	8001496 <AntennaOn>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	48000400 	.word	0x48000400

08001518 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4603      	mov	r3, r0
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	4613      	mov	r3, r2
 8001528:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800152a:	2302      	movs	r3, #2
 800152c:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 800152e:	2300      	movs	r3, #0
 8001530:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001532:	2300      	movs	r3, #0
 8001534:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d006      	beq.n	800154a <MFRC522_ToCard+0x32>
 800153c:	2b0e      	cmp	r3, #14
 800153e:	d109      	bne.n	8001554 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001540:	2312      	movs	r3, #18
 8001542:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001544:	2310      	movs	r3, #16
 8001546:	777b      	strb	r3, [r7, #29]
			break;
 8001548:	e005      	b.n	8001556 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800154a:	2377      	movs	r3, #119	@ 0x77
 800154c:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 800154e:	2330      	movs	r3, #48	@ 0x30
 8001550:	777b      	strb	r3, [r7, #29]
			break;
 8001552:	e000      	b.n	8001556 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001554:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001556:	7fbb      	ldrb	r3, [r7, #30]
 8001558:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	2002      	movs	r0, #2
 8001562:	f7ff ff0f 	bl	8001384 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	2004      	movs	r0, #4
 800156a:	f7ff ff74 	bl	8001456 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 800156e:	2180      	movs	r1, #128	@ 0x80
 8001570:	200a      	movs	r0, #10
 8001572:	f7ff ff55 	bl	8001420 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001576:	2100      	movs	r1, #0
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff ff03 	bl	8001384 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	e00a      	b.n	800159a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	2009      	movs	r0, #9
 8001590:	f7ff fef8 	bl	8001384 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	3301      	adds	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3f0      	bcc.n	8001584 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4619      	mov	r1, r3
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff feec 	bl	8001384 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d103      	bne.n	80015ba <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	200d      	movs	r0, #13
 80015b6:	f7ff ff33 	bl	8001420 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80015ba:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015be:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80015c0:	2004      	movs	r0, #4
 80015c2:	f7ff ff05 	bl	80013d0 <Read_MFRC522>
 80015c6:	4603      	mov	r3, r0
 80015c8:	773b      	strb	r3, [r7, #28]
        i--;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <MFRC522_ToCard+0xd4>
 80015d6:	7f3b      	ldrb	r3, [r7, #28]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <MFRC522_ToCard+0xd4>
 80015e0:	7f3a      	ldrb	r2, [r7, #28]
 80015e2:	7f7b      	ldrb	r3, [r7, #29]
 80015e4:	4013      	ands	r3, r2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0e9      	beq.n	80015c0 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80015ec:	2180      	movs	r1, #128	@ 0x80
 80015ee:	200d      	movs	r0, #13
 80015f0:	f7ff ff31 	bl	8001456 <ClearBitMask>

    if (i != 0)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d052      	beq.n	80016a0 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80015fa:	2006      	movs	r0, #6
 80015fc:	f7ff fee8 	bl	80013d0 <Read_MFRC522>
 8001600:	4603      	mov	r3, r0
 8001602:	f003 031b 	and.w	r3, r3, #27
 8001606:	2b00      	cmp	r3, #0
 8001608:	d148      	bne.n	800169c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800160e:	7f3a      	ldrb	r2, [r7, #28]
 8001610:	7fbb      	ldrb	r3, [r7, #30]
 8001612:	4013      	ands	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 800161e:	2301      	movs	r3, #1
 8001620:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d13b      	bne.n	80016a0 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001628:	200a      	movs	r0, #10
 800162a:	f7ff fed1 	bl	80013d0 <Read_MFRC522>
 800162e:	4603      	mov	r3, r0
 8001630:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001632:	200c      	movs	r0, #12
 8001634:	f7ff fecc 	bl	80013d0 <Read_MFRC522>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001646:	7f3b      	ldrb	r3, [r7, #28]
 8001648:	3b01      	subs	r3, #1
 800164a:	00da      	lsls	r2, r3, #3
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e004      	b.n	8001662 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001658:	7f3b      	ldrb	r3, [r7, #28]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	461a      	mov	r2, r3
 800165e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001660:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001662:	7f3b      	ldrb	r3, [r7, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800166c:	7f3b      	ldrb	r3, [r7, #28]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d901      	bls.n	8001676 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8001672:	2310      	movs	r3, #16
 8001674:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
 800167a:	e00a      	b.n	8001692 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	18d4      	adds	r4, r2, r3
 8001682:	2009      	movs	r0, #9
 8001684:	f7ff fea4 	bl	80013d0 <Read_MFRC522>
 8001688:	4603      	mov	r3, r0
 800168a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	3301      	adds	r3, #1
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	7f3b      	ldrb	r3, [r7, #28]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3f0      	bcc.n	800167c <MFRC522_ToCard+0x164>
 800169a:	e001      	b.n	80016a0 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800169c:	2302      	movs	r3, #2
 800169e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80016a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}

080016aa <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af02      	add	r7, sp, #8
 80016b0:	4603      	mov	r3, r0
 80016b2:	6039      	str	r1, [r7, #0]
 80016b4:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80016b6:	2107      	movs	r1, #7
 80016b8:	200d      	movs	r0, #13
 80016ba:	f7ff fe63 	bl	8001384 <Write_MFRC522>

	TagType[0] = reqMode;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2201      	movs	r2, #1
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	200c      	movs	r0, #12
 80016d2:	f7ff ff21 	bl	8001518 <MFRC522_ToCard>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <MFRC522_Request+0x3c>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d001      	beq.n	80016ea <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 80016e6:	2302      	movs	r3, #2
 80016e8:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001700:	2100      	movs	r1, #0
 8001702:	200d      	movs	r0, #13
 8001704:	f7ff fe3e 	bl	8001384 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2293      	movs	r2, #147	@ 0x93
 800170c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3301      	adds	r3, #1
 8001712:	2220      	movs	r2, #32
 8001714:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	200c      	movs	r0, #12
 8001724:	f7ff fef8 	bl	8001518 <MFRC522_ToCard>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	73bb      	strb	r3, [r7, #14]
 8001736:	e009      	b.n	800174c <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	7b7b      	ldrb	r3, [r7, #13]
 8001742:	4053      	eors	r3, r2
 8001744:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001746:	7bbb      	ldrb	r3, [r7, #14]
 8001748:	3301      	adds	r3, #1
 800174a:	73bb      	strb	r3, [r7, #14]
 800174c:	7bbb      	ldrb	r3, [r7, #14]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d9f2      	bls.n	8001738 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	7b7a      	ldrb	r2, [r7, #13]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001760:	2302      	movs	r3, #2
 8001762:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <HAL_MspInit+0x4c>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800177a:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <HAL_MspInit+0x4c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	@ 0x60
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <HAL_MspInit+0x4c>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <HAL_MspInit+0x4c>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001792:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_MspInit+0x4c>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001798:	6593      	str	r3, [r2, #88]	@ 0x58
 800179a:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_MspInit+0x4c>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	210f      	movs	r1, #15
 80017aa:	f06f 0001 	mvn.w	r0, #1
 80017ae:	f001 f8d6 	bl	800295e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0ac      	sub	sp, #176	@ 0xb0
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2288      	movs	r2, #136	@ 0x88
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f008 ff77 	bl	800a6d4 <memset>
  if(DFSDM1_Init == 0)
 80017e6:	4b25      	ldr	r3, [pc, #148]	@ (800187c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d142      	bne.n	8001874 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80017ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fdca 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800180a:	f7ff fd9f 	bl	800134c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800180e:	4b1c      	ldr	r3, [pc, #112]	@ (8001880 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001812:	4a1b      	ldr	r2, [pc, #108]	@ (8001880 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001814:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001818:	6613      	str	r3, [r2, #96]	@ 0x60
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182a:	4a15      	ldr	r2, [pc, #84]	@ (8001880 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800182c:	f043 0310 	orr.w	r3, r3, #16
 8001830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800183e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001842:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001858:	2306      	movs	r3, #6
 800185a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	@ (8001884 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001866:	f001 f9ff 	bl	8002c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a02      	ldr	r2, [pc, #8]	@ (800187c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001872:	6013      	str	r3, [r2, #0]
  }

}
 8001874:	bf00      	nop
 8001876:	37b0      	adds	r7, #176	@ 0xb0
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000a80 	.word	0x20000a80
 8001880:	40021000 	.word	0x40021000
 8001884:	48001000 	.word	0x48001000

08001888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ac      	sub	sp, #176	@ 0xb0
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2288      	movs	r2, #136	@ 0x88
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f008 ff13 	bl	800a6d4 <memset>
  if(hi2c->Instance==I2C2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a21      	ldr	r2, [pc, #132]	@ (8001938 <HAL_I2C_MspInit+0xb0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d13b      	bne.n	8001930 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018bc:	2300      	movs	r3, #0
 80018be:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fd67 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018d0:	f7ff fd3c 	bl	800134c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_I2C_MspInit+0xb4>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d8:	4a18      	ldr	r2, [pc, #96]	@ (800193c <HAL_I2C_MspInit+0xb4>)
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <HAL_I2C_MspInit+0xb4>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80018ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f4:	2312      	movs	r3, #18
 80018f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001906:	2304      	movs	r3, #4
 8001908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001910:	4619      	mov	r1, r3
 8001912:	480b      	ldr	r0, [pc, #44]	@ (8001940 <HAL_I2C_MspInit+0xb8>)
 8001914:	f001 f9a8 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_I2C_MspInit+0xb4>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_I2C_MspInit+0xb4>)
 800191e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001922:	6593      	str	r3, [r2, #88]	@ 0x58
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_I2C_MspInit+0xb4>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001930:	bf00      	nop
 8001932:	37b0      	adds	r7, #176	@ 0xb0
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40005800 	.word	0x40005800
 800193c:	40021000 	.word	0x40021000
 8001940:	48000400 	.word	0x48000400

08001944 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	@ 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a17      	ldr	r2, [pc, #92]	@ (80019c0 <HAL_QSPI_MspInit+0x7c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d128      	bne.n	80019b8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001966:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <HAL_QSPI_MspInit+0x80>)
 8001968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_QSPI_MspInit+0x80>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001970:	6513      	str	r3, [r2, #80]	@ 0x50
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <HAL_QSPI_MspInit+0x80>)
 8001974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800197e:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <HAL_QSPI_MspInit+0x80>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <HAL_QSPI_MspInit+0x80>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_QSPI_MspInit+0x80>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001996:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800199a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019a8:	230a      	movs	r3, #10
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <HAL_QSPI_MspInit+0x84>)
 80019b4:	f001 f958 	bl	8002c68 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80019b8:	bf00      	nop
 80019ba:	3728      	adds	r7, #40	@ 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	a0001000 	.word	0xa0001000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	48001000 	.word	0x48001000

080019cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	@ 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <HAL_SPI_MspInit+0xdc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d129      	bne.n	8001a42 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f2:	4a2e      	ldr	r2, [pc, #184]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 80019f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019fa:	4b2c      	ldr	r3, [pc, #176]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	4a28      	ldr	r2, [pc, #160]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a12:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|ARD_D12_Pin|ARD_D11_Pin;
 8001a1e:	23e0      	movs	r3, #224	@ 0xe0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a3c:	f001 f914 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a40:	e02d      	b.n	8001a9e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab0 <HAL_SPI_MspInit+0xe4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d128      	bne.n	8001a9e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a4c:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a50:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a68:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a6a:	f043 0304 	orr.w	r3, r3, #4
 8001a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <HAL_SPI_MspInit+0xe0>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001a7c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a8e:	2306      	movs	r3, #6
 8001a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <HAL_SPI_MspInit+0xe8>)
 8001a9a:	f001 f8e5 	bl	8002c68 <HAL_GPIO_Init>
}
 8001a9e:	bf00      	nop
 8001aa0:	3730      	adds	r7, #48	@ 0x30
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40013000 	.word	0x40013000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40003c00 	.word	0x40003c00
 8001ab4:	48000800 	.word	0x48000800

08001ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0ae      	sub	sp, #184	@ 0xb8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2288      	movs	r2, #136	@ 0x88
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f008 fdfb 	bl	800a6d4 <memset>
  if(huart->Instance==USART1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a42      	ldr	r2, [pc, #264]	@ (8001bec <HAL_UART_MspInit+0x134>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d13b      	bne.n	8001b60 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aec:	2300      	movs	r3, #0
 8001aee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fc4f 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b00:	f7ff fc24 	bl	800134c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b04:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b08:	4a39      	ldr	r2, [pc, #228]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b10:	4b37      	ldr	r3, [pc, #220]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b20:	4a33      	ldr	r2, [pc, #204]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b34:	23c0      	movs	r3, #192	@ 0xc0
 8001b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4826      	ldr	r0, [pc, #152]	@ (8001bf4 <HAL_UART_MspInit+0x13c>)
 8001b5a:	f001 f885 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b5e:	e040      	b.n	8001be2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a24      	ldr	r2, [pc, #144]	@ (8001bf8 <HAL_UART_MspInit+0x140>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13b      	bne.n	8001be2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fc0e 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001b82:	f7ff fbe3 	bl	800134c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b86:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	4a19      	ldr	r2, [pc, #100]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a13      	ldr	r2, [pc, #76]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_UART_MspInit+0x138>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001bb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <HAL_UART_MspInit+0x144>)
 8001bde:	f001 f843 	bl	8002c68 <HAL_GPIO_Init>
}
 8001be2:	bf00      	nop
 8001be4:	37b8      	adds	r7, #184	@ 0xb8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	40004800 	.word	0x40004800
 8001bfc:	48000c00 	.word	0x48000c00

08001c00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0ac      	sub	sp, #176	@ 0xb0
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2288      	movs	r2, #136	@ 0x88
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f008 fd57 	bl	800a6d4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c2e:	d17c      	bne.n	8001d2a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c34:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001c46:	2318      	movs	r3, #24
 8001c48:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c5a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fb99 	bl	8004398 <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001c6c:	f7ff fb6e 	bl	800134c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001c88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca6:	f000 ffdf 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001caa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cc4:	230a      	movs	r3, #10
 8001cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd4:	f000 ffc8 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cdc:	4a15      	ldr	r2, [pc, #84]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001cde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d114      	bne.n	8001d26 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	4a0c      	ldr	r2, [pc, #48]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d08:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d14:	f001 fc74 	bl	8003600 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <HAL_PCD_MspInit+0x134>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001d24:	e001      	b.n	8001d2a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001d26:	f001 fc6b 	bl	8003600 <HAL_PWREx_EnableVddUSB>
}
 8001d2a:	bf00      	nop
 8001d2c:	37b0      	adds	r7, #176	@ 0xb0
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <NMI_Handler+0x4>

08001d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <MemManage_Handler+0x4>

08001d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <BusFault_Handler+0x4>

08001d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <UsageFault_Handler+0x4>

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d72:	f000 fcd5 	bl	8002720 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d76:	f007 f8cb 	bl	8008f10 <xTaskGetSchedulerState>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d001      	beq.n	8001d84 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d80:	f007 ffc2 	bl	8009d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001d8c:	2008      	movs	r0, #8
 8001d8e:	f001 f945 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001d9a:	2020      	movs	r0, #32
 8001d9c:	f001 f93e 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001da0:	2040      	movs	r0, #64	@ 0x40
 8001da2:	f001 f93b 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001da6:	2080      	movs	r0, #128	@ 0x80
 8001da8:	f001 f938 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001dac:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001db0:	f001 f934 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001dbc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001dc0:	f001 f92c 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001dc4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001dc8:	f001 f928 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001dcc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001dd0:	f001 f924 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001dd4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001dd8:	f001 f920 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ddc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001de0:	f001 f91c 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f001 f915 	bl	800301c <HAL_GPIO_EXTI_IRQHandler>
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e00a      	b.n	8001e1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e08:	f3af 8000 	nop.w
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	60ba      	str	r2, [r7, #8]
 8001e14:	b2ca      	uxtb	r2, r1
 8001e16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	dbf0      	blt.n	8001e08 <_read+0x12>
  }

  return len;
 8001e26:	687b      	ldr	r3, [r7, #4]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e009      	b.n	8001e56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	60ba      	str	r2, [r7, #8]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb90 	bl	8000570 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	dbf1      	blt.n	8001e42 <_write+0x12>
  }
  return len;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_close>:

int _close(int file)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e90:	605a      	str	r2, [r3, #4]
  return 0;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_isatty>:

int _isatty(int file)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed8:	4a14      	ldr	r2, [pc, #80]	@ (8001f2c <_sbrk+0x5c>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <_sbrk+0x60>)
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <_sbrk+0x64>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <_sbrk+0x68>)
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d207      	bcs.n	8001f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f00:	f008 fc4c 	bl	800a79c <__errno>
 8001f04:	4603      	mov	r3, r0
 8001f06:	220c      	movs	r2, #12
 8001f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0e:	e009      	b.n	8001f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f10:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f16:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a05      	ldr	r2, [pc, #20]	@ (8001f34 <_sbrk+0x64>)
 8001f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20018000 	.word	0x20018000
 8001f30:	00000400 	.word	0x00000400
 8001f34:	20000a84 	.word	0x20000a84
 8001f38:	20002e70 	.word	0x20002e70

08001f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <SystemInit+0x20>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f46:	4a05      	ldr	r2, [pc, #20]	@ (8001f5c <SystemInit+0x20>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f64:	f7ff ffea 	bl	8001f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	@ (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f008 fc0b 	bl	800a7a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7fe faff 	bl	8000594 <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fa4:	0800c7fc 	.word	0x0800c7fc
  ldr r2, =_sbss
 8001fa8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fac:	20002e70 	.word	0x20002e70

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d056      	beq.n	8002080 <AT_ExecuteCommand+0xcc>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d051      	beq.n	8002080 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001fe2:	68b8      	ldr	r0, [r7, #8]
 8001fe4:	f7fe f8f4 	bl	80001d0 <strlen>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b299      	uxth	r1, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68b8      	ldr	r0, [r7, #8]
 8001ff6:	47a0      	blx	r4
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	dd3e      	ble.n	8002080 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800200e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
 8002016:	4603      	mov	r3, r0
 8002018:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800201a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800201e:	2b00      	cmp	r3, #0
 8002020:	dd27      	ble.n	8002072 <AT_ExecuteCommand+0xbe>
 8002022:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002026:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800202a:	dc22      	bgt.n	8002072 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800202c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002030:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002034:	d105      	bne.n	8002042 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8002036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8002042:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 800204e:	490f      	ldr	r1, [pc, #60]	@ (800208c <AT_ExecuteCommand+0xd8>)
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f008 fb47 	bl	800a6e4 <strstr>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e010      	b.n	8002082 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8002060:	490b      	ldr	r1, [pc, #44]	@ (8002090 <AT_ExecuteCommand+0xdc>)
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f008 fb3e 	bl	800a6e4 <strstr>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800206e:	2305      	movs	r3, #5
 8002070:	e007      	b.n	8002082 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8002072:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002076:	f113 0f04 	cmn.w	r3, #4
 800207a:	d101      	bne.n	8002080 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800207c:	2306      	movs	r3, #6
 800207e:	e000      	b.n	8002082 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8002080:	2304      	movs	r3, #4
}
 8002082:	4618      	mov	r0, r3
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	bf00      	nop
 800208c:	0800c0e0 	.word	0x0800c0e0
 8002090:	0800c0ec 	.word	0x0800c0ec

08002094 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80020ae:	68b8      	ldr	r0, [r7, #8]
 80020b0:	f7fe f88e 	bl	80001d0 <strlen>
 80020b4:	4603      	mov	r3, r0
 80020b6:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80020b8:	8a7b      	ldrh	r3, [r7, #18]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <AT_RequestSendData+0x32>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e05d      	b.n	8002182 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d057      	beq.n	8002180 <AT_RequestSendData+0xec>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d052      	beq.n	8002180 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 80020e6:	8a79      	ldrh	r1, [r7, #18]
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	4798      	blx	r3
 80020ec:	4603      	mov	r3, r0
 80020ee:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80020f0:	8a3a      	ldrh	r2, [r7, #16]
 80020f2:	8a7b      	ldrh	r3, [r7, #18]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d143      	bne.n	8002180 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002104:	8879      	ldrh	r1, [r7, #2]
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
 800210a:	4603      	mov	r3, r0
 800210c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800210e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	429a      	cmp	r2, r3
 8002116:	d131      	bne.n	800217c <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8002124:	2100      	movs	r1, #0
 8002126:	6a38      	ldr	r0, [r7, #32]
 8002128:	4798      	blx	r3
 800212a:	4603      	mov	r3, r0
 800212c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800212e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	dd19      	ble.n	800216a <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8002136:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800213a:	6a3a      	ldr	r2, [r7, #32]
 800213c:	4413      	add	r3, r2
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8002142:	4912      	ldr	r1, [pc, #72]	@ (800218c <AT_RequestSendData+0xf8>)
 8002144:	6a38      	ldr	r0, [r7, #32]
 8002146:	f008 facd 	bl	800a6e4 <strstr>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e016      	b.n	8002182 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002154:	490e      	ldr	r1, [pc, #56]	@ (8002190 <AT_RequestSendData+0xfc>)
 8002156:	6a38      	ldr	r0, [r7, #32]
 8002158:	f008 fac4 	bl	800a6e4 <strstr>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002162:	2305      	movs	r3, #5
 8002164:	e00d      	b.n	8002182 <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8002166:	2302      	movs	r3, #2
 8002168:	e00b      	b.n	8002182 <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800216a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800216e:	f113 0f04 	cmn.w	r3, #4
 8002172:	d101      	bne.n	8002178 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8002174:	2306      	movs	r3, #6
 8002176:	e004      	b.n	8002182 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8002178:	2302      	movs	r3, #2
 800217a:	e002      	b.n	8002182 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800217c:	2302      	movs	r3, #2
 800217e:	e000      	b.n	8002182 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8002180:	2304      	movs	r3, #4
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	0800c0e0 	.word	0x0800c0e0
 8002190:	0800c0ec 	.word	0x0800c0ec

08002194 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021a8:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8087 	beq.w	80022c4 <AT_RequestReceiveData+0x130>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8081 	beq.w	80022c4 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	f7fe f801 	bl	80001d0 <strlen>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b299      	uxth	r1, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 80021d8:	461a      	mov	r2, r3
 80021da:	68b8      	ldr	r0, [r7, #8]
 80021dc:	47a0      	blx	r4
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dd6f      	ble.n	80022c4 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 80021f0:	2100      	movs	r1, #0
 80021f2:	6938      	ldr	r0, [r7, #16]
 80021f4:	4798      	blx	r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b0d      	cmp	r3, #13
 8002200:	d104      	bne.n	800220c <AT_RequestReceiveData+0x78>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	3301      	adds	r3, #1
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b0a      	cmp	r3, #10
 800220a:	d001      	beq.n	8002210 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 800220c:	2304      	movs	r3, #4
 800220e:	e05a      	b.n	80022c6 <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3b02      	subs	r3, #2
 8002214:	617b      	str	r3, [r7, #20]
    p += 2;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3302      	adds	r3, #2
 800221a:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b07      	cmp	r3, #7
 8002220:	d94a      	bls.n	80022b8 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8002222:	e002      	b.n	800222a <AT_RequestReceiveData+0x96>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3b01      	subs	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <AT_RequestReceiveData+0xaa>
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3b01      	subs	r3, #1
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b15      	cmp	r3, #21
 800223c:	d0f2      	beq.n	8002224 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3b08      	subs	r3, #8
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	491f      	ldr	r1, [pc, #124]	@ (80022d0 <AT_RequestReceiveData+0x13c>)
 8002252:	4618      	mov	r0, r3
 8002254:	f008 fa46 	bl	800a6e4 <strstr>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b08      	subs	r3, #8
 8002264:	b29a      	uxth	r2, r3
 8002266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002268:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	429a      	cmp	r2, r3
 8002272:	d202      	bcs.n	800227a <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8002274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	6939      	ldr	r1, [r7, #16]
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f008 fab7 	bl	800a7f6 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e01c      	b.n	80022c6 <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3b04      	subs	r3, #4
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	2204      	movs	r2, #4
 8002296:	490f      	ldr	r1, [pc, #60]	@ (80022d4 <AT_RequestReceiveData+0x140>)
 8002298:	4618      	mov	r0, r3
 800229a:	f008 fa0b 	bl	800a6b4 <memcmp>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d104      	bne.n	80022ae <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	2200      	movs	r2, #0
 80022a8:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80022aa:	2305      	movs	r3, #5
 80022ac:	e00b      	b.n	80022c6 <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80022ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b0:	2200      	movs	r2, #0
 80022b2:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80022b4:	2305      	movs	r3, #5
 80022b6:	e006      	b.n	80022c6 <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f113 0f04 	cmn.w	r3, #4
 80022be:	d101      	bne.n	80022c4 <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80022c0:	2306      	movs	r3, #6
 80022c2:	e000      	b.n	80022c6 <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80022c4:	2304      	movs	r3, #4
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	bf00      	nop
 80022d0:	0800c0e0 	.word	0x0800c0e0
 80022d4:	0800c0f4 	.word	0x0800c0f4

080022d8 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	461a      	mov	r2, r3
 80022e4:	460b      	mov	r3, r1
 80022e6:	72fb      	strb	r3, [r7, #11]
 80022e8:	4613      	mov	r3, r2
 80022ea:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80022ec:	2302      	movs	r3, #2
 80022ee:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e001      	b.n	8002300 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002300:	893b      	ldrh	r3, [r7, #8]
 8002302:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8002306:	d302      	bcc.n	800230e <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002308:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800230c:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	893a      	ldrh	r2, [r7, #8]
 8002312:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800231a:	7afa      	ldrb	r2, [r7, #11]
 800231c:	4942      	ldr	r1, [pc, #264]	@ (8002428 <ES_WIFI_SendData+0x150>)
 800231e:	4618      	mov	r0, r3
 8002320:	f008 f8a4 	bl	800a46c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002330:	461a      	mov	r2, r3
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7ff fe3e 	bl	8001fb4 <AT_ExecuteCommand>
 8002338:	4603      	mov	r3, r0
 800233a:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d15e      	bne.n	8002400 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4938      	ldr	r1, [pc, #224]	@ (800242c <ES_WIFI_SendData+0x154>)
 800234c:	4618      	mov	r0, r3
 800234e:	f008 f88d 	bl	800a46c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800235e:	461a      	mov	r2, r3
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff fe27 	bl	8001fb4 <AT_ExecuteCommand>
 8002366:	4603      	mov	r3, r0
 8002368:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d13d      	bne.n	80023ec <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002376:	893a      	ldrh	r2, [r7, #8]
 8002378:	492d      	ldr	r1, [pc, #180]	@ (8002430 <ES_WIFI_SendData+0x158>)
 800237a:	4618      	mov	r0, r3
 800237c:	f008 f876 	bl	800a46c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800238c:	893a      	ldrh	r2, [r7, #8]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4613      	mov	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff fe7d 	bl	8002094 <AT_RequestSendData>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d119      	bne.n	80023d8 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023aa:	4922      	ldr	r1, [pc, #136]	@ (8002434 <ES_WIFI_SendData+0x15c>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f008 f999 	bl	800a6e4 <strstr>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02c      	beq.n	8002412 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80023b8:	f640 1202 	movw	r2, #2306	@ 0x902
 80023bc:	491e      	ldr	r1, [pc, #120]	@ (8002438 <ES_WIFI_SendData+0x160>)
 80023be:	481f      	ldr	r0, [pc, #124]	@ (800243c <ES_WIFI_SendData+0x164>)
 80023c0:	f007 ffe4 	bl	800a38c <iprintf>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80023ca:	4619      	mov	r1, r3
 80023cc:	481c      	ldr	r0, [pc, #112]	@ (8002440 <ES_WIFI_SendData+0x168>)
 80023ce:	f007 ffdd 	bl	800a38c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80023d2:	2302      	movs	r3, #2
 80023d4:	74fb      	strb	r3, [r7, #19]
 80023d6:	e01c      	b.n	8002412 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80023d8:	f640 1208 	movw	r2, #2312	@ 0x908
 80023dc:	4916      	ldr	r1, [pc, #88]	@ (8002438 <ES_WIFI_SendData+0x160>)
 80023de:	4817      	ldr	r0, [pc, #92]	@ (800243c <ES_WIFI_SendData+0x164>)
 80023e0:	f007 ffd4 	bl	800a38c <iprintf>
 80023e4:	4817      	ldr	r0, [pc, #92]	@ (8002444 <ES_WIFI_SendData+0x16c>)
 80023e6:	f008 f839 	bl	800a45c <puts>
 80023ea:	e012      	b.n	8002412 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80023ec:	f640 120d 	movw	r2, #2317	@ 0x90d
 80023f0:	4911      	ldr	r1, [pc, #68]	@ (8002438 <ES_WIFI_SendData+0x160>)
 80023f2:	4812      	ldr	r0, [pc, #72]	@ (800243c <ES_WIFI_SendData+0x164>)
 80023f4:	f007 ffca 	bl	800a38c <iprintf>
 80023f8:	4813      	ldr	r0, [pc, #76]	@ (8002448 <ES_WIFI_SendData+0x170>)
 80023fa:	f008 f82f 	bl	800a45c <puts>
 80023fe:	e008      	b.n	8002412 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8002400:	f640 1212 	movw	r2, #2322	@ 0x912
 8002404:	490c      	ldr	r1, [pc, #48]	@ (8002438 <ES_WIFI_SendData+0x160>)
 8002406:	480d      	ldr	r0, [pc, #52]	@ (800243c <ES_WIFI_SendData+0x164>)
 8002408:	f007 ffc0 	bl	800a38c <iprintf>
 800240c:	480f      	ldr	r0, [pc, #60]	@ (800244c <ES_WIFI_SendData+0x174>)
 800240e:	f008 f825 	bl	800a45c <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d102      	bne.n	800241e <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2200      	movs	r2, #0
 800241c:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	0800c1f0 	.word	0x0800c1f0
 800242c:	0800c3a4 	.word	0x0800c3a4
 8002430:	0800c3ac 	.word	0x0800c3ac
 8002434:	0800c3b8 	.word	0x0800c3b8
 8002438:	0800c280 	.word	0x0800c280
 800243c:	0800c298 	.word	0x0800c298
 8002440:	0800c3c0 	.word	0x0800c3c0
 8002444:	0800c3dc 	.word	0x0800c3dc
 8002448:	0800c3f8 	.word	0x0800c3f8
 800244c:	0800c40c 	.word	0x0800c40c

08002450 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	461a      	mov	r2, r3
 800245c:	460b      	mov	r3, r1
 800245e:	72fb      	strb	r3, [r7, #11]
 8002460:	4613      	mov	r3, r2
 8002462:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002464:	2302      	movs	r3, #2
 8002466:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e001      	b.n	8002478 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8002478:	893b      	ldrh	r3, [r7, #8]
 800247a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800247e:	f200 808b 	bhi.w	8002598 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002488:	7afa      	ldrb	r2, [r7, #11]
 800248a:	4946      	ldr	r1, [pc, #280]	@ (80025a4 <ES_WIFI_ReceiveData+0x154>)
 800248c:	4618      	mov	r0, r3
 800248e:	f007 ffed 	bl	800a46c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800249e:	461a      	mov	r2, r3
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff fd87 	bl	8001fb4 <AT_ExecuteCommand>
 80024a6:	4603      	mov	r3, r0
 80024a8:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d165      	bne.n	800257c <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80024b6:	893a      	ldrh	r2, [r7, #8]
 80024b8:	493b      	ldr	r1, [pc, #236]	@ (80025a8 <ES_WIFI_ReceiveData+0x158>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f007 ffd6 	bl	800a46c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80024cc:	461a      	mov	r2, r3
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fd70 	bl	8001fb4 <AT_ExecuteCommand>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d141      	bne.n	8002562 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4931      	ldr	r1, [pc, #196]	@ (80025ac <ES_WIFI_ReceiveData+0x15c>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f007 ffbf 	bl	800a46c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80024fa:	461a      	mov	r2, r3
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff fd59 	bl	8001fb4 <AT_ExecuteCommand>
 8002502:	4603      	mov	r3, r0
 8002504:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d120      	bne.n	800254e <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002512:	4927      	ldr	r1, [pc, #156]	@ (80025b0 <ES_WIFI_ReceiveData+0x160>)
 8002514:	4618      	mov	r0, r3
 8002516:	f007 ffa9 	bl	800a46c <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002520:	893a      	ldrh	r2, [r7, #8]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f7ff fe32 	bl	8002194 <AT_RequestReceiveData>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d02e      	beq.n	8002598 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 800253a:	f640 12aa 	movw	r2, #2474	@ 0x9aa
 800253e:	491d      	ldr	r1, [pc, #116]	@ (80025b4 <ES_WIFI_ReceiveData+0x164>)
 8002540:	481d      	ldr	r0, [pc, #116]	@ (80025b8 <ES_WIFI_ReceiveData+0x168>)
 8002542:	f007 ff23 	bl	800a38c <iprintf>
 8002546:	481d      	ldr	r0, [pc, #116]	@ (80025bc <ES_WIFI_ReceiveData+0x16c>)
 8002548:	f007 ff88 	bl	800a45c <puts>
 800254c:	e024      	b.n	8002598 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 800254e:	f640 12af 	movw	r2, #2479	@ 0x9af
 8002552:	4918      	ldr	r1, [pc, #96]	@ (80025b4 <ES_WIFI_ReceiveData+0x164>)
 8002554:	4818      	ldr	r0, [pc, #96]	@ (80025b8 <ES_WIFI_ReceiveData+0x168>)
 8002556:	f007 ff19 	bl	800a38c <iprintf>
 800255a:	4819      	ldr	r0, [pc, #100]	@ (80025c0 <ES_WIFI_ReceiveData+0x170>)
 800255c:	f007 ff7e 	bl	800a45c <puts>
 8002560:	e01a      	b.n	8002598 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8002562:	f640 12b4 	movw	r2, #2484	@ 0x9b4
 8002566:	4913      	ldr	r1, [pc, #76]	@ (80025b4 <ES_WIFI_ReceiveData+0x164>)
 8002568:	4813      	ldr	r0, [pc, #76]	@ (80025b8 <ES_WIFI_ReceiveData+0x168>)
 800256a:	f007 ff0f 	bl	800a38c <iprintf>
 800256e:	4815      	ldr	r0, [pc, #84]	@ (80025c4 <ES_WIFI_ReceiveData+0x174>)
 8002570:	f007 ff74 	bl	800a45c <puts>
        *Receivedlen = 0;
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	2200      	movs	r2, #0
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e00d      	b.n	8002598 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 800257c:	f640 12ba 	movw	r2, #2490	@ 0x9ba
 8002580:	490c      	ldr	r1, [pc, #48]	@ (80025b4 <ES_WIFI_ReceiveData+0x164>)
 8002582:	480d      	ldr	r0, [pc, #52]	@ (80025b8 <ES_WIFI_ReceiveData+0x168>)
 8002584:	f007 ff02 	bl	800a38c <iprintf>
 8002588:	480f      	ldr	r0, [pc, #60]	@ (80025c8 <ES_WIFI_ReceiveData+0x178>)
 800258a:	f007 ff67 	bl	800a45c <puts>
      issue15++;
 800258e:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <ES_WIFI_ReceiveData+0x17c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a0d      	ldr	r2, [pc, #52]	@ (80025cc <ES_WIFI_ReceiveData+0x17c>)
 8002596:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	0800c1f0 	.word	0x0800c1f0
 80025a8:	0800c430 	.word	0x0800c430
 80025ac:	0800c438 	.word	0x0800c438
 80025b0:	0800c440 	.word	0x0800c440
 80025b4:	0800c280 	.word	0x0800c280
 80025b8:	0800c298 	.word	0x0800c298
 80025bc:	0800c444 	.word	0x0800c444
 80025c0:	0800c464 	.word	0x0800c464
 80025c4:	0800c47c 	.word	0x0800c47c
 80025c8:	0800c49c 	.word	0x0800c49c
 80025cc:	20000a88 	.word	0x20000a88

080025d0 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <SPI_WIFI_ISR+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <SPI_WIFI_ISR+0x1c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
   }
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000af0 	.word	0x20000af0

080025f0 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	b2d9      	uxtb	r1, r3
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	4806      	ldr	r0, [pc, #24]	@ (8002630 <WIFI_SendData+0x40>)
 8002618:	f7ff fe5e 	bl	80022d8 <ES_WIFI_SendData>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000af4 	.word	0x20000af4

08002634 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4613      	mov	r3, r2
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4806      	ldr	r0, [pc, #24]	@ (8002674 <WIFI_ReceiveData+0x40>)
 800265c:	f7ff fef8 	bl	8002450 <ES_WIFI_ReceiveData>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800266a:	7dfb      	ldrb	r3, [r7, #23]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000af4 	.word	0x20000af4

08002678 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002682:	2003      	movs	r0, #3
 8002684:	f000 f960 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002688:	200f      	movs	r0, #15
 800268a:	f000 f80d 	bl	80026a8 <HAL_InitTick>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	71fb      	strb	r3, [r7, #7]
 8002698:	e001      	b.n	800269e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800269a:	f7ff f869 	bl	8001770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800269e:	79fb      	ldrb	r3, [r7, #7]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026b4:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <HAL_InitTick+0x6c>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d023      	beq.n	8002704 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_InitTick+0x70>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <HAL_InitTick+0x6c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f96d 	bl	80029b2 <HAL_SYSTICK_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d809      	bhi.n	80026f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f000 f937 	bl	800295e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f0:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <HAL_InitTick+0x74>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e007      	b.n	8002708 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e004      	b.n	8002708 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	e001      	b.n	8002708 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000008 	.word	0x20000008
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008
 8002744:	200013f4 	.word	0x200013f4

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	200013f4 	.word	0x200013f4

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000008 	.word	0x20000008

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	@ (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	@ (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	@ (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	@ 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	@ 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff29 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff3e 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff31 	bl	800280c <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0ac      	b.n	8002b38 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f8b2 	bl	8002b4c <DFSDM_GetChannelFromInstance>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a55      	ldr	r2, [pc, #340]	@ (8002b40 <HAL_DFSDM_ChannelInit+0x174>)
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e09f      	b.n	8002b38 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fe fee1 	bl	80017c0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80029fe:	4b51      	ldr	r3, [pc, #324]	@ (8002b44 <HAL_DFSDM_ChannelInit+0x178>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a4f      	ldr	r2, [pc, #316]	@ (8002b44 <HAL_DFSDM_ChannelInit+0x178>)
 8002a06:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a08:	4b4e      	ldr	r3, [pc, #312]	@ (8002b44 <HAL_DFSDM_ChannelInit+0x178>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d125      	bne.n	8002a5c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a10:	4b4d      	ldr	r3, [pc, #308]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a1a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4948      	ldr	r1, [pc, #288]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a46      	ldr	r2, [pc, #280]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a30:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002a34:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	791b      	ldrb	r3, [r3, #4]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002a3e:	4b42      	ldr	r3, [pc, #264]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	493f      	ldr	r1, [pc, #252]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002a50:	4b3d      	ldr	r3, [pc, #244]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3c      	ldr	r2, [pc, #240]	@ (8002b48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a5a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002a6a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a7a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a80:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 020f 	bic.w	r2, r2, #15
 8002a98:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6819      	ldr	r1, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002ac0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f002 0207 	and.w	r2, r2, #7
 8002aec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b18:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f810 	bl	8002b4c <DFSDM_GetChannelFromInstance>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4904      	ldr	r1, [pc, #16]	@ (8002b40 <HAL_DFSDM_ChannelInit+0x174>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200013fc 	.word	0x200013fc
 8002b44:	200013f8 	.word	0x200013f8
 8002b48:	40016000 	.word	0x40016000

08002b4c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d102      	bne.n	8002b62 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e02b      	b.n	8002bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a19      	ldr	r2, [pc, #100]	@ (8002bcc <DFSDM_GetChannelFromInstance+0x80>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d102      	bne.n	8002b70 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e024      	b.n	8002bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <DFSDM_GetChannelFromInstance+0x84>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d102      	bne.n	8002b7e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e01d      	b.n	8002bba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a14      	ldr	r2, [pc, #80]	@ (8002bd4 <DFSDM_GetChannelFromInstance+0x88>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d102      	bne.n	8002b8c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002b86:	2304      	movs	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e016      	b.n	8002bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d102      	bne.n	8002b9a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002b94:	2305      	movs	r3, #5
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e00f      	b.n	8002bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bdc <DFSDM_GetChannelFromInstance+0x90>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d102      	bne.n	8002ba8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e008      	b.n	8002bba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a0d      	ldr	r2, [pc, #52]	@ (8002be0 <DFSDM_GetChannelFromInstance+0x94>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d102      	bne.n	8002bb6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002bb0:	2307      	movs	r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e001      	b.n	8002bba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40016000 	.word	0x40016000
 8002bcc:	40016020 	.word	0x40016020
 8002bd0:	40016040 	.word	0x40016040
 8002bd4:	40016080 	.word	0x40016080
 8002bd8:	400160a0 	.word	0x400160a0
 8002bdc:	400160c0 	.word	0x400160c0
 8002be0:	400160e0 	.word	0x400160e0

08002be4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d005      	beq.n	8002c08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2204      	movs	r2, #4
 8002c00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	e029      	b.n	8002c5c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 020e 	bic.w	r2, r2, #14
 8002c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2c:	f003 021c 	and.w	r2, r3, #28
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
    }
  }
  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e17f      	b.n	8002f78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8171 	beq.w	8002f72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x40>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0201 	and.w	r2, r3, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d118      	bne.n	8002d48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f003 0201 	and.w	r2, r3, #1
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d017      	beq.n	8002d84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d123      	bne.n	8002dd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	6939      	ldr	r1, [r7, #16]
 8002dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80ac 	beq.w	8002f72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f98 <HAL_GPIO_Init+0x330>)
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002f98 <HAL_GPIO_Init+0x330>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e26:	4b5c      	ldr	r3, [pc, #368]	@ (8002f98 <HAL_GPIO_Init+0x330>)
 8002e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e32:	4a5a      	ldr	r2, [pc, #360]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	220f      	movs	r2, #15
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e5c:	d025      	beq.n	8002eaa <HAL_GPIO_Init+0x242>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa0 <HAL_GPIO_Init+0x338>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d01f      	beq.n	8002ea6 <HAL_GPIO_Init+0x23e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa4 <HAL_GPIO_Init+0x33c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d019      	beq.n	8002ea2 <HAL_GPIO_Init+0x23a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa8 <HAL_GPIO_Init+0x340>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_GPIO_Init+0x236>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4c      	ldr	r2, [pc, #304]	@ (8002fac <HAL_GPIO_Init+0x344>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00d      	beq.n	8002e9a <HAL_GPIO_Init+0x232>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4b      	ldr	r2, [pc, #300]	@ (8002fb0 <HAL_GPIO_Init+0x348>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_GPIO_Init+0x22e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb4 <HAL_GPIO_Init+0x34c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_GPIO_Init+0x22a>
 8002e8e:	2306      	movs	r3, #6
 8002e90:	e00c      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e00a      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e96:	2305      	movs	r3, #5
 8002e98:	e008      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e004      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e002      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_GPIO_Init+0x244>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	f002 0203 	and.w	r2, r2, #3
 8002eb2:	0092      	lsls	r2, r2, #2
 8002eb4:	4093      	lsls	r3, r2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ebc:	4937      	ldr	r1, [pc, #220]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eca:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eee:	4a32      	ldr	r2, [pc, #200]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ef4:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f18:	4a27      	ldr	r2, [pc, #156]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f42:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f6c:	4a12      	ldr	r2, [pc, #72]	@ (8002fb8 <HAL_GPIO_Init+0x350>)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f47f ae78 	bne.w	8002c78 <HAL_GPIO_Init+0x10>
  }
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40010000 	.word	0x40010000
 8002fa0:	48000400 	.word	0x48000400
 8002fa4:	48000800 	.word	0x48000800
 8002fa8:	48000c00 	.word	0x48000c00
 8002fac:	48001000 	.word	0x48001000
 8002fb0:	48001400 	.word	0x48001400
 8002fb4:	48001800 	.word	0x48001800
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e001      	b.n	8002fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003008:	e002      	b.n	8003010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003026:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d006      	beq.n	8003040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003032:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd ff10 	bl	8000e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40010400 	.word	0x40010400

0800304c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e08d      	b.n	800317a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe fc08 	bl	8001888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	@ 0x24
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800309c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d107      	bne.n	80030c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	e006      	b.n	80030d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d108      	bne.n	80030ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e007      	b.n	80030fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800310c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003110:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003120:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69d9      	ldr	r1, [r3, #28]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	d138      	bne.n	800320a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e032      	b.n	800320c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2224      	movs	r2, #36	@ 0x24
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	d139      	bne.n	80032a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003238:	2302      	movs	r3, #2
 800323a:	e033      	b.n	80032a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2224      	movs	r2, #36	@ 0x24
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800326a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e101      	b.n	80034c6 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe fc92 	bl	8001c00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2203      	movs	r2, #3
 80032e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 f830 	bl	8006354 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7c1a      	ldrb	r2, [r3, #16]
 80032fc:	f88d 2000 	strb.w	r2, [sp]
 8003300:	3304      	adds	r3, #4
 8003302:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003304:	f002 fff9 	bl	80062fa <USB_CoreInit>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e0d5      	b.n	80034c6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f003 f828 	bl	8006376 <USB_SetCurrentMode>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0c6      	b.n	80034c6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e04a      	b.n	80033d4 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3315      	adds	r3, #21
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3314      	adds	r3, #20
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	b298      	uxth	r0, r3
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	332e      	adds	r3, #46	@ 0x2e
 800337a:	4602      	mov	r2, r0
 800337c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	3318      	adds	r3, #24
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	331c      	adds	r3, #28
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3320      	adds	r3, #32
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	3324      	adds	r3, #36	@ 0x24
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	3301      	adds	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	791b      	ldrb	r3, [r3, #4]
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3af      	bcc.n	800333e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	e044      	b.n	800346e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	3301      	adds	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	791b      	ldrb	r3, [r3, #4]
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	429a      	cmp	r2, r3
 8003476:	d3b5      	bcc.n	80033e4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	7c1a      	ldrb	r2, [r3, #16]
 8003480:	f88d 2000 	strb.w	r2, [sp]
 8003484:	3304      	adds	r3, #4
 8003486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003488:	f002 ffc2 	bl	8006410 <USB_DevInit>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e013      	b.n	80034c6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7b1b      	ldrb	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d102      	bne.n	80034ba <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f80a 	bl	80034ce <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f003 f967 	bl	8006792 <USB_DevDisconnect>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003500:	f043 0303 	orr.w	r3, r3, #3
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a04      	ldr	r2, [pc, #16]	@ (8003534 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003526:	6013      	str	r3, [r2, #0]
}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40007000 	.word	0x40007000

08003538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800353c:	4b04      	ldr	r3, [pc, #16]	@ (8003550 <HAL_PWREx_GetVoltageRange+0x18>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40007000 	.word	0x40007000

08003554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003562:	d130      	bne.n	80035c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003564:	4b23      	ldr	r3, [pc, #140]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800356c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003570:	d038      	beq.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003572:	4b20      	ldr	r3, [pc, #128]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800357a:	4a1e      	ldr	r2, [pc, #120]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003582:	4b1d      	ldr	r3, [pc, #116]	@ (80035f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2232      	movs	r2, #50	@ 0x32
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	4a1b      	ldr	r2, [pc, #108]	@ (80035fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0c9b      	lsrs	r3, r3, #18
 8003594:	3301      	adds	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003598:	e002      	b.n	80035a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b01      	subs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a0:	4b14      	ldr	r3, [pc, #80]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ac:	d102      	bne.n	80035b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f2      	bne.n	800359a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c0:	d110      	bne.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e00f      	b.n	80035e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035c6:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d2:	d007      	beq.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035d4:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035dc:	4a05      	ldr	r2, [pc, #20]	@ (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40007000 	.word	0x40007000
 80035f8:	20000000 	.word	0x20000000
 80035fc:	431bde83 	.word	0x431bde83

08003600 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a04      	ldr	r2, [pc, #16]	@ (800361c <HAL_PWREx_EnableVddUSB+0x1c>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800360e:	6053      	str	r3, [r2, #4]
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40007000 	.word	0x40007000

08003620 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff f88e 	bl	8002748 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e063      	b.n	8003700 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10b      	bne.n	800365c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fe f979 	bl	8001944 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003652:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f858 	bl	800370c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	3b01      	subs	r3, #1
 800366c:	021a      	lsls	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	2120      	movs	r1, #32
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f850 	bl	8003728 <QSPI_WaitFlagStateUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800368c:	7afb      	ldrb	r3, [r7, #11]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d131      	bne.n	80036f6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800369c:	f023 0310 	bic.w	r3, r3, #16
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6852      	ldr	r2, [r2, #4]
 80036a4:	0611      	lsls	r1, r2, #24
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <HAL_QSPI_Init+0xe8>)
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6912      	ldr	r2, [r2, #16]
 80036c2:	0411      	lsls	r1, r2, #16
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6952      	ldr	r2, [r2, #20]
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6992      	ldr	r2, [r2, #24]
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80036fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	ffe0f8fe 	.word	0xffe0f8fe

0800370c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003738:	e01a      	b.n	8003770 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d016      	beq.n	8003770 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7ff f801 	bl	8002748 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2204      	movs	r2, #4
 800375c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e00e      	b.n	800378e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	2300      	moveq	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	429a      	cmp	r2, r3
 800378a:	d1d6      	bne.n	800373a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e3ca      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037aa:	4b97      	ldr	r3, [pc, #604]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b4:	4b94      	ldr	r3, [pc, #592]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80e4 	beq.w	8003994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_RCC_OscConfig+0x4a>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	f040 808b 	bne.w	80038f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f040 8087 	bne.w	80038f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037e2:	4b89      	ldr	r3, [pc, #548]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d005      	beq.n	80037fa <HAL_RCC_OscConfig+0x62>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e3a2      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	4b82      	ldr	r3, [pc, #520]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_RCC_OscConfig+0x7c>
 800380a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003812:	e005      	b.n	8003820 <HAL_RCC_OscConfig+0x88>
 8003814:	4b7c      	ldr	r3, [pc, #496]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003820:	4293      	cmp	r3, r2
 8003822:	d223      	bcs.n	800386c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fd55 	bl	80042d8 <RCC_SetFlashLatencyFromMSIRange>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e383      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003838:	4b73      	ldr	r3, [pc, #460]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a72      	ldr	r2, [pc, #456]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b70      	ldr	r3, [pc, #448]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	496d      	ldr	r1, [pc, #436]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003856:	4b6c      	ldr	r3, [pc, #432]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	4968      	ldr	r1, [pc, #416]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
 800386a:	e025      	b.n	80038b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800386c:	4b66      	ldr	r3, [pc, #408]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003872:	f043 0308 	orr.w	r3, r3, #8
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b63      	ldr	r3, [pc, #396]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4960      	ldr	r1, [pc, #384]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	495b      	ldr	r1, [pc, #364]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fd15 	bl	80042d8 <RCC_SetFlashLatencyFromMSIRange>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e343      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038b8:	f000 fc4a 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b52      	ldr	r3, [pc, #328]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	091b      	lsrs	r3, r3, #4
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	4950      	ldr	r1, [pc, #320]	@ (8003a0c <HAL_RCC_OscConfig+0x274>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
 80038d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003a10 <HAL_RCC_OscConfig+0x278>)
 80038d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003a14 <HAL_RCC_OscConfig+0x27c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fee3 	bl	80026a8 <HAL_InitTick>
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d052      	beq.n	8003992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	e327      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d032      	beq.n	800395e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038f8:	4b43      	ldr	r3, [pc, #268]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a42      	ldr	r2, [pc, #264]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003904:	f7fe ff20 	bl	8002748 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800390c:	f7fe ff1c 	bl	8002748 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e310      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800391e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800392a:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a36      	ldr	r2, [pc, #216]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b34      	ldr	r3, [pc, #208]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4931      	ldr	r1, [pc, #196]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003948:	4b2f      	ldr	r3, [pc, #188]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	492c      	ldr	r1, [pc, #176]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
 800395c:	e01a      	b.n	8003994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800395e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800396a:	f7fe feed 	bl	8002748 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003972:	f7fe fee9 	bl	8002748 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e2dd      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003984:	4b20      	ldr	r3, [pc, #128]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1f0      	bne.n	8003972 <HAL_RCC_OscConfig+0x1da>
 8003990:	e000      	b.n	8003994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d074      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d005      	beq.n	80039b2 <HAL_RCC_OscConfig+0x21a>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d10e      	bne.n	80039ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d10b      	bne.n	80039ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b2:	4b15      	ldr	r3, [pc, #84]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d064      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2f0>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d160      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e2ba      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x24a>
 80039d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e026      	b.n	8003a30 <HAL_RCC_OscConfig+0x298>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039ea:	d115      	bne.n	8003a18 <HAL_RCC_OscConfig+0x280>
 80039ec:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a05      	ldr	r2, [pc, #20]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80039f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b03      	ldr	r3, [pc, #12]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a02      	ldr	r2, [pc, #8]	@ (8003a08 <HAL_RCC_OscConfig+0x270>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e014      	b.n	8003a30 <HAL_RCC_OscConfig+0x298>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	0800c654 	.word	0x0800c654
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004
 8003a18:	4ba0      	ldr	r3, [pc, #640]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a9f      	ldr	r2, [pc, #636]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b9d      	ldr	r3, [pc, #628]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a9c      	ldr	r2, [pc, #624]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe fe86 	bl	8002748 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fe82 	bl	8002748 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	@ 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e276      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	4b92      	ldr	r3, [pc, #584]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x2a8>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe fe72 	bl	8002748 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fe fe6e 	bl	8002748 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	@ 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e262      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7a:	4b88      	ldr	r3, [pc, #544]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2d0>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d060      	beq.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x310>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d119      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	4b7c      	ldr	r3, [pc, #496]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x328>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e23f      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac0:	4b76      	ldr	r3, [pc, #472]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	4973      	ldr	r1, [pc, #460]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad4:	e040      	b.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d023      	beq.n	8003b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ade:	4b6f      	ldr	r3, [pc, #444]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fe fe2d 	bl	8002748 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003af2:	f7fe fe29 	bl	8002748 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e21d      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b04:	4b65      	ldr	r3, [pc, #404]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b62      	ldr	r3, [pc, #392]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	061b      	lsls	r3, r3, #24
 8003b1e:	495f      	ldr	r1, [pc, #380]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
 8003b24:	e018      	b.n	8003b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b26:	4b5d      	ldr	r3, [pc, #372]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a5c      	ldr	r2, [pc, #368]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fe fe09 	bl	8002748 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe fe05 	bl	8002748 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1f9      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b4c:	4b53      	ldr	r3, [pc, #332]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f0      	bne.n	8003b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d03c      	beq.n	8003bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01c      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b72:	4a4a      	ldr	r2, [pc, #296]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fde4 	bl	8002748 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fe fde0 	bl	8002748 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1d4      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b96:	4b41      	ldr	r3, [pc, #260]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <HAL_RCC_OscConfig+0x3ec>
 8003ba4:	e01b      	b.n	8003bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bac:	4a3b      	ldr	r2, [pc, #236]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fdc7 	bl	8002748 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fe fdc3 	bl	8002748 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e1b7      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd0:	4b32      	ldr	r3, [pc, #200]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ef      	bne.n	8003bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a6 	beq.w	8003d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bec:	2300      	movs	r3, #0
 8003bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b27      	ldr	r3, [pc, #156]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c00:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c08:	4b24      	ldr	r3, [pc, #144]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c18:	4b21      	ldr	r3, [pc, #132]	@ (8003ca0 <HAL_RCC_OscConfig+0x508>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d118      	bne.n	8003c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca0 <HAL_RCC_OscConfig+0x508>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca0 <HAL_RCC_OscConfig+0x508>)
 8003c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c30:	f7fe fd8a 	bl	8002748 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c38:	f7fe fd86 	bl	8002748 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e17a      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ca0 <HAL_RCC_OscConfig+0x508>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d108      	bne.n	8003c70 <HAL_RCC_OscConfig+0x4d8>
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	4a0d      	ldr	r2, [pc, #52]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c6e:	e029      	b.n	8003cc4 <HAL_RCC_OscConfig+0x52c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d115      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x50c>
 8003c78:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	4a07      	ldr	r2, [pc, #28]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c80:	f043 0304 	orr.w	r3, r3, #4
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c88:	4b04      	ldr	r3, [pc, #16]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8e:	4a03      	ldr	r2, [pc, #12]	@ (8003c9c <HAL_RCC_OscConfig+0x504>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c98:	e014      	b.n	8003cc4 <HAL_RCC_OscConfig+0x52c>
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	4a9b      	ldr	r2, [pc, #620]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cb4:	4b98      	ldr	r3, [pc, #608]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cba:	4a97      	ldr	r2, [pc, #604]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fe fd3c 	bl	8002748 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fd38 	bl	8002748 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e12a      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cea:	4b8b      	ldr	r3, [pc, #556]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ed      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x53c>
 8003cf8:	e015      	b.n	8003d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fd25 	bl	8002748 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe fd21 	bl	8002748 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e113      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d18:	4b7f      	ldr	r3, [pc, #508]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1ed      	bne.n	8003d02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d26:	7ffb      	ldrb	r3, [r7, #31]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d105      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d30:	4a79      	ldr	r2, [pc, #484]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80fe 	beq.w	8003f3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	f040 80d0 	bne.w	8003eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d4c:	4b72      	ldr	r3, [pc, #456]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d130      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d127      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d11f      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d8c:	2a07      	cmp	r2, #7
 8003d8e:	bf14      	ite	ne
 8003d90:	2201      	movne	r2, #1
 8003d92:	2200      	moveq	r2, #0
 8003d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d113      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	3b01      	subs	r3, #1
 8003da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d109      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d06e      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d069      	beq.n	8003e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dc8:	4b53      	ldr	r3, [pc, #332]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dd4:	4b50      	ldr	r3, [pc, #320]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0ad      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003de4:	4b4c      	ldr	r3, [pc, #304]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df0:	f7fe fcaa 	bl	8002748 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7fe fca6 	bl	8002748 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e09a      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0a:	4b43      	ldr	r3, [pc, #268]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e16:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	4b40      	ldr	r3, [pc, #256]	@ (8003f1c <HAL_RCC_OscConfig+0x784>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e26:	3a01      	subs	r2, #1
 8003e28:	0112      	lsls	r2, r2, #4
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e30:	0212      	lsls	r2, r2, #8
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0552      	lsls	r2, r2, #21
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003e44:	0852      	lsrs	r2, r2, #1
 8003e46:	3a01      	subs	r2, #1
 8003e48:	0652      	lsls	r2, r2, #25
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e50:	0912      	lsrs	r2, r2, #4
 8003e52:	0452      	lsls	r2, r2, #17
 8003e54:	430a      	orrs	r2, r1
 8003e56:	4930      	ldr	r1, [pc, #192]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2d      	ldr	r2, [pc, #180]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e68:	4b2b      	ldr	r3, [pc, #172]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e74:	f7fe fc68 	bl	8002748 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fe fc64 	bl	8002748 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e058      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8e:	4b22      	ldr	r3, [pc, #136]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e9a:	e050      	b.n	8003f3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e04f      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d148      	bne.n	8003f3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003eac:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eb8:	4b17      	ldr	r3, [pc, #92]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ec4:	f7fe fc40 	bl	8002748 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fe fc3c 	bl	8002748 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e030      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ede:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x734>
 8003eea:	e028      	b.n	8003f3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d023      	beq.n	8003f3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a08      	ldr	r2, [pc, #32]	@ (8003f18 <HAL_RCC_OscConfig+0x780>)
 8003ef8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fe fc23 	bl	8002748 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f04:	e00c      	b.n	8003f20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fe fc1f 	bl	8002748 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d905      	bls.n	8003f20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e013      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCC_OscConfig+0x7b0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ec      	bne.n	8003f06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_RCC_OscConfig+0x7b0>)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4905      	ldr	r1, [pc, #20]	@ (8003f48 <HAL_RCC_OscConfig+0x7b0>)
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_RCC_OscConfig+0x7b4>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	60cb      	str	r3, [r1, #12]
 8003f38:	e001      	b.n	8003f3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	feeefffc 	.word	0xfeeefffc

08003f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0e7      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b75      	ldr	r3, [pc, #468]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d910      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b72      	ldr	r3, [pc, #456]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 0207 	bic.w	r2, r3, #7
 8003f7a:	4970      	ldr	r1, [pc, #448]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b6e      	ldr	r3, [pc, #440]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0cf      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	4b66      	ldr	r3, [pc, #408]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d908      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b63      	ldr	r3, [pc, #396]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4960      	ldr	r1, [pc, #384]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04c      	beq.n	8004068 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	4b5a      	ldr	r3, [pc, #360]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d121      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0a6      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	4b54      	ldr	r3, [pc, #336]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d115      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e09a      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004006:	4b4e      	ldr	r3, [pc, #312]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e08e      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004016:	4b4a      	ldr	r3, [pc, #296]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e086      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b46      	ldr	r3, [pc, #280]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4943      	ldr	r1, [pc, #268]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fe fb86 	bl	8002748 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fe fb82 	bl	8002748 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e06e      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b3a      	ldr	r3, [pc, #232]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b31      	ldr	r3, [pc, #196]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004080:	429a      	cmp	r2, r3
 8004082:	d208      	bcs.n	8004096 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b2e      	ldr	r3, [pc, #184]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	492b      	ldr	r1, [pc, #172]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004096:	4b29      	ldr	r3, [pc, #164]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d210      	bcs.n	80040c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a4:	4b25      	ldr	r3, [pc, #148]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 0207 	bic.w	r2, r3, #7
 80040ac:	4923      	ldr	r1, [pc, #140]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b4:	4b21      	ldr	r3, [pc, #132]	@ (800413c <HAL_RCC_ClockConfig+0x1ec>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e036      	b.n	8004134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4918      	ldr	r1, [pc, #96]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f0:	4b13      	ldr	r3, [pc, #76]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4910      	ldr	r1, [pc, #64]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004104:	f000 f824 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8004108:	4602      	mov	r2, r0
 800410a:	4b0d      	ldr	r3, [pc, #52]	@ (8004140 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	490b      	ldr	r1, [pc, #44]	@ (8004144 <HAL_RCC_ClockConfig+0x1f4>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	4a09      	ldr	r2, [pc, #36]	@ (8004148 <HAL_RCC_ClockConfig+0x1f8>)
 8004122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004124:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x1fc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fabd 	bl	80026a8 <HAL_InitTick>
 800412e:	4603      	mov	r3, r0
 8004130:	72fb      	strb	r3, [r7, #11]

  return status;
 8004132:	7afb      	ldrb	r3, [r7, #11]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40022000 	.word	0x40022000
 8004140:	40021000 	.word	0x40021000
 8004144:	0800c654 	.word	0x0800c654
 8004148:	20000000 	.word	0x20000000
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	@ 0x24
 8004154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415e:	4b3e      	ldr	r3, [pc, #248]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004168:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x34>
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0c      	cmp	r3, #12
 800417c:	d121      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11e      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004184:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004190:	4b31      	ldr	r3, [pc, #196]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e005      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041ac:	4a2b      	ldr	r2, [pc, #172]	@ (800425c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d102      	bne.n	80041ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c8:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	e004      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d4:	4b23      	ldr	r3, [pc, #140]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x114>)
 80041d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d134      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041de:	4b1e      	ldr	r3, [pc, #120]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d003      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0xac>
 80041f4:	e005      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004260 <HAL_RCC_GetSysClockFreq+0x110>)
 80041f8:	617b      	str	r3, [r7, #20]
      break;
 80041fa:	e005      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041fc:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <HAL_RCC_GetSysClockFreq+0x114>)
 80041fe:	617b      	str	r3, [r7, #20]
      break;
 8004200:	e002      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	617b      	str	r3, [r7, #20]
      break;
 8004206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004208:	4b13      	ldr	r3, [pc, #76]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	3301      	adds	r3, #1
 8004214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004216:	4b10      	ldr	r3, [pc, #64]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	fb03 f202 	mul.w	r2, r3, r2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800422e:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x108>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	0e5b      	lsrs	r3, r3, #25
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	3301      	adds	r3, #1
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004248:	69bb      	ldr	r3, [r7, #24]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3724      	adds	r7, #36	@ 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	0800c66c 	.word	0x0800c66c
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <HAL_RCC_GetHCLKFreq+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004284:	f7ff fff0 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4904      	ldr	r1, [pc, #16]	@ (80042a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021000 	.word	0x40021000
 80042a8:	0800c664 	.word	0x0800c664

080042ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042b0:	f7ff ffda 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0adb      	lsrs	r3, r3, #11
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4904      	ldr	r1, [pc, #16]	@ (80042d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	0800c664 	.word	0x0800c664

080042d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042f0:	f7ff f922 	bl	8003538 <HAL_PWREx_GetVoltageRange>
 80042f4:	6178      	str	r0, [r7, #20]
 80042f6:	e014      	b.n	8004322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	4b25      	ldr	r3, [pc, #148]	@ (8004390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fc:	4a24      	ldr	r2, [pc, #144]	@ (8004390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004302:	6593      	str	r3, [r2, #88]	@ 0x58
 8004304:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004310:	f7ff f912 	bl	8003538 <HAL_PWREx_GetVoltageRange>
 8004314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004316:	4b1e      	ldr	r3, [pc, #120]	@ (8004390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431a:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004320:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004328:	d10b      	bne.n	8004342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b80      	cmp	r3, #128	@ 0x80
 800432e:	d919      	bls.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2ba0      	cmp	r3, #160	@ 0xa0
 8004334:	d902      	bls.n	800433c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004336:	2302      	movs	r3, #2
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	e013      	b.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800433c:	2301      	movs	r3, #1
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	e010      	b.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b80      	cmp	r3, #128	@ 0x80
 8004346:	d902      	bls.n	800434e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004348:	2303      	movs	r3, #3
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	e00a      	b.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b80      	cmp	r3, #128	@ 0x80
 8004352:	d102      	bne.n	800435a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004354:	2302      	movs	r3, #2
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	e004      	b.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b70      	cmp	r3, #112	@ 0x70
 800435e:	d101      	bne.n	8004364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004360:	2301      	movs	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 0207 	bic.w	r2, r3, #7
 800436c:	4909      	ldr	r1, [pc, #36]	@ (8004394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004374:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	429a      	cmp	r2, r3
 8004380:	d001      	beq.n	8004386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	40022000 	.word	0x40022000

08004398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a0:	2300      	movs	r3, #0
 80043a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a4:	2300      	movs	r3, #0
 80043a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d041      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043bc:	d02a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043c2:	d824      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043ce:	d81e      	bhi.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043d8:	d010      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043da:	e018      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043dc:	4b86      	ldr	r3, [pc, #536]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a85      	ldr	r2, [pc, #532]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043e8:	e015      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 facb 	bl	800498c <RCCEx_PLLSAI1_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043fa:	e00c      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3320      	adds	r3, #32
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fbb6 	bl	8004b74 <RCCEx_PLLSAI2_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800440c:	e003      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	74fb      	strb	r3, [r7, #19]
      break;
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800441c:	4b76      	ldr	r3, [pc, #472]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800442a:	4973      	ldr	r1, [pc, #460]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004432:	e001      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	7cfb      	ldrb	r3, [r7, #19]
 8004436:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d041      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004448:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800444c:	d02a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800444e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004452:	d824      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004458:	d008      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800445a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800445e:	d81e      	bhi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004468:	d010      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800446a:	e018      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800446c:	4b62      	ldr	r3, [pc, #392]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a61      	ldr	r2, [pc, #388]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004476:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004478:	e015      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3304      	adds	r3, #4
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fa83 	bl	800498c <RCCEx_PLLSAI1_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800448a:	e00c      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3320      	adds	r3, #32
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fb6e 	bl	8004b74 <RCCEx_PLLSAI2_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800449c:	e003      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	74fb      	strb	r3, [r7, #19]
      break;
 80044a2:	e000      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a6:	7cfb      	ldrb	r3, [r7, #19]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044ac:	4b52      	ldr	r3, [pc, #328]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044ba:	494f      	ldr	r1, [pc, #316]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044c2:	e001      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80a0 	beq.w	8004616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044d6:	2300      	movs	r3, #0
 80044d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044da:	4b47      	ldr	r3, [pc, #284]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f0:	4b41      	ldr	r3, [pc, #260]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	4a40      	ldr	r2, [pc, #256]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fc:	4b3e      	ldr	r3, [pc, #248]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004508:	2301      	movs	r3, #1
 800450a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800450c:	4b3b      	ldr	r3, [pc, #236]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a3a      	ldr	r2, [pc, #232]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004518:	f7fe f916 	bl	8002748 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800451e:	e009      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004520:	f7fe f912 	bl	8002748 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d902      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	74fb      	strb	r3, [r7, #19]
        break;
 8004532:	e005      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004534:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ef      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d15c      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004546:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01f      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	d019      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004564:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800456e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004570:	4b21      	ldr	r3, [pc, #132]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004576:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004580:	4b1d      	ldr	r3, [pc, #116]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004586:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004590:	4a19      	ldr	r2, [pc, #100]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fe f8d1 	bl	8002748 <HAL_GetTick>
 80045a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a8:	e00b      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fe f8cd 	bl	8002748 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d902      	bls.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	74fb      	strb	r3, [r7, #19]
            break;
 80045c0:	e006      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ec      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d6:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e6:	4904      	ldr	r1, [pc, #16]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045ee:	e009      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	74bb      	strb	r3, [r7, #18]
 80045f4:	e006      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	7cfb      	ldrb	r3, [r7, #19]
 8004602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004604:	7c7b      	ldrb	r3, [r7, #17]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460a:	4b9e      	ldr	r3, [pc, #632]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460e:	4a9d      	ldr	r2, [pc, #628]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004614:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004622:	4b98      	ldr	r3, [pc, #608]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004628:	f023 0203 	bic.w	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	4994      	ldr	r1, [pc, #592]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004644:	4b8f      	ldr	r3, [pc, #572]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464a:	f023 020c 	bic.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	498c      	ldr	r1, [pc, #560]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004666:	4b87      	ldr	r3, [pc, #540]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	4983      	ldr	r1, [pc, #524]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004688:	4b7e      	ldr	r3, [pc, #504]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	497b      	ldr	r1, [pc, #492]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046aa:	4b76      	ldr	r3, [pc, #472]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b8:	4972      	ldr	r1, [pc, #456]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046da:	496a      	ldr	r1, [pc, #424]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ee:	4b65      	ldr	r3, [pc, #404]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fc:	4961      	ldr	r1, [pc, #388]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004710:	4b5c      	ldr	r3, [pc, #368]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471e:	4959      	ldr	r1, [pc, #356]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004732:	4b54      	ldr	r3, [pc, #336]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004738:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004740:	4950      	ldr	r1, [pc, #320]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004754:	4b4b      	ldr	r3, [pc, #300]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004762:	4948      	ldr	r1, [pc, #288]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004776:	4b43      	ldr	r3, [pc, #268]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004784:	493f      	ldr	r1, [pc, #252]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d028      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004798:	4b3a      	ldr	r3, [pc, #232]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a6:	4937      	ldr	r1, [pc, #220]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047b6:	d106      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b8:	4b32      	ldr	r3, [pc, #200]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a31      	ldr	r2, [pc, #196]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c2:	60d3      	str	r3, [r2, #12]
 80047c4:	e011      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047ce:	d10c      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3304      	adds	r3, #4
 80047d4:	2101      	movs	r1, #1
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f8d8 	bl	800498c <RCCEx_PLLSAI1_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047e6:	7cfb      	ldrb	r3, [r7, #19]
 80047e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d028      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047f6:	4b23      	ldr	r3, [pc, #140]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	491f      	ldr	r1, [pc, #124]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004814:	d106      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004816:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	4a1a      	ldr	r2, [pc, #104]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004820:	60d3      	str	r3, [r2, #12]
 8004822:	e011      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800482c:	d10c      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2101      	movs	r1, #1
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f8a9 	bl	800498c <RCCEx_PLLSAI1_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02b      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004862:	4908      	ldr	r1, [pc, #32]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004872:	d109      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4a02      	ldr	r2, [pc, #8]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800487e:	60d3      	str	r3, [r2, #12]
 8004880:	e014      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800488c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004890:	d10c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3304      	adds	r3, #4
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f877 	bl	800498c <RCCEx_PLLSAI1_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02f      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048c6:	4928      	ldr	r1, [pc, #160]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048d6:	d10d      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	2102      	movs	r1, #2
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f854 	bl	800498c <RCCEx_PLLSAI1_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d014      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	74bb      	strb	r3, [r7, #18]
 80048f2:	e011      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048fc:	d10c      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3320      	adds	r3, #32
 8004902:	2102      	movs	r1, #2
 8004904:	4618      	mov	r0, r3
 8004906:	f000 f935 	bl	8004b74 <RCCEx_PLLSAI2_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004924:	4b10      	ldr	r3, [pc, #64]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004932:	490d      	ldr	r1, [pc, #52]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004946:	4b08      	ldr	r3, [pc, #32]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004956:	4904      	ldr	r1, [pc, #16]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800495e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40021000 	.word	0x40021000

0800496c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6013      	str	r3, [r2, #0]
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000

0800498c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800499a:	4b75      	ldr	r3, [pc, #468]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049a6:	4b72      	ldr	r3, [pc, #456]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0203 	and.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d10d      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049be:	4b6c      	ldr	r3, [pc, #432]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
       ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d047      	beq.n	8004a62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	e044      	b.n	8004a62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d018      	beq.n	8004a12 <RCCEx_PLLSAI1_Config+0x86>
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d825      	bhi.n	8004a30 <RCCEx_PLLSAI1_Config+0xa4>
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d002      	beq.n	80049ee <RCCEx_PLLSAI1_Config+0x62>
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d009      	beq.n	8004a00 <RCCEx_PLLSAI1_Config+0x74>
 80049ec:	e020      	b.n	8004a30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ee:	4b60      	ldr	r3, [pc, #384]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11d      	bne.n	8004a36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fe:	e01a      	b.n	8004a36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a00:	4b5b      	ldr	r3, [pc, #364]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d116      	bne.n	8004a3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a10:	e013      	b.n	8004a3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a12:	4b57      	ldr	r3, [pc, #348]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a1e:	4b54      	ldr	r3, [pc, #336]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a2e:	e006      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	e004      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a46:	4b4a      	ldr	r3, [pc, #296]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	430b      	orrs	r3, r1
 8004a5c:	4944      	ldr	r1, [pc, #272]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d17d      	bne.n	8004b64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a68:	4b41      	ldr	r3, [pc, #260]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a40      	ldr	r2, [pc, #256]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fd fe68 	bl	8002748 <HAL_GetTick>
 8004a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a7a:	e009      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a7c:	f7fd fe64 	bl	8002748 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d902      	bls.n	8004a90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a8e:	e005      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a90:	4b37      	ldr	r3, [pc, #220]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ef      	bne.n	8004a7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d160      	bne.n	8004b64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d111      	bne.n	8004acc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa8:	4b31      	ldr	r3, [pc, #196]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6892      	ldr	r2, [r2, #8]
 8004ab8:	0211      	lsls	r1, r2, #8
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68d2      	ldr	r2, [r2, #12]
 8004abe:	0912      	lsrs	r2, r2, #4
 8004ac0:	0452      	lsls	r2, r2, #17
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	492a      	ldr	r1, [pc, #168]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	610b      	str	r3, [r1, #16]
 8004aca:	e027      	b.n	8004b1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d112      	bne.n	8004af8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ad2:	4b27      	ldr	r3, [pc, #156]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ada:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
 8004ae2:	0211      	lsls	r1, r2, #8
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6912      	ldr	r2, [r2, #16]
 8004ae8:	0852      	lsrs	r2, r2, #1
 8004aea:	3a01      	subs	r2, #1
 8004aec:	0552      	lsls	r2, r2, #21
 8004aee:	430a      	orrs	r2, r1
 8004af0:	491f      	ldr	r1, [pc, #124]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	610b      	str	r3, [r1, #16]
 8004af6:	e011      	b.n	8004b1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004af8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6892      	ldr	r2, [r2, #8]
 8004b08:	0211      	lsls	r1, r2, #8
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6952      	ldr	r2, [r2, #20]
 8004b0e:	0852      	lsrs	r2, r2, #1
 8004b10:	3a01      	subs	r2, #1
 8004b12:	0652      	lsls	r2, r2, #25
 8004b14:	430a      	orrs	r2, r1
 8004b16:	4916      	ldr	r1, [pc, #88]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b1c:	4b14      	ldr	r3, [pc, #80]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a13      	ldr	r2, [pc, #76]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd fe0e 	bl	8002748 <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b2e:	e009      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b30:	f7fd fe0a 	bl	8002748 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d902      	bls.n	8004b44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	73fb      	strb	r3, [r7, #15]
          break;
 8004b42:	e005      	b.n	8004b50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ef      	beq.n	8004b30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b56:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	4904      	ldr	r1, [pc, #16]	@ (8004b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000

08004b74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b82:	4b6a      	ldr	r3, [pc, #424]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d018      	beq.n	8004bc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b8e:	4b67      	ldr	r3, [pc, #412]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0203 	and.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d10d      	bne.n	8004bba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ba6:	4b61      	ldr	r3, [pc, #388]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d047      	beq.n	8004c4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	e044      	b.n	8004c4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d018      	beq.n	8004bfa <RCCEx_PLLSAI2_Config+0x86>
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d825      	bhi.n	8004c18 <RCCEx_PLLSAI2_Config+0xa4>
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d002      	beq.n	8004bd6 <RCCEx_PLLSAI2_Config+0x62>
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d009      	beq.n	8004be8 <RCCEx_PLLSAI2_Config+0x74>
 8004bd4:	e020      	b.n	8004c18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bd6:	4b55      	ldr	r3, [pc, #340]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11d      	bne.n	8004c1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be6:	e01a      	b.n	8004c1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004be8:	4b50      	ldr	r3, [pc, #320]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf8:	e013      	b.n	8004c22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c06:	4b49      	ldr	r3, [pc, #292]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c16:	e006      	b.n	8004c26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1c:	e004      	b.n	8004c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c1e:	bf00      	nop
 8004c20:	e002      	b.n	8004c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10d      	bne.n	8004c4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	430b      	orrs	r3, r1
 8004c44:	4939      	ldr	r1, [pc, #228]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d167      	bne.n	8004d20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c50:	4b36      	ldr	r3, [pc, #216]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a35      	ldr	r2, [pc, #212]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fd fd74 	bl	8002748 <HAL_GetTick>
 8004c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c62:	e009      	b.n	8004c78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c64:	f7fd fd70 	bl	8002748 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d902      	bls.n	8004c78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	73fb      	strb	r3, [r7, #15]
        break;
 8004c76:	e005      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c78:	4b2c      	ldr	r3, [pc, #176]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ef      	bne.n	8004c64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d14a      	bne.n	8004d20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d111      	bne.n	8004cb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c90:	4b26      	ldr	r3, [pc, #152]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6892      	ldr	r2, [r2, #8]
 8004ca0:	0211      	lsls	r1, r2, #8
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	0912      	lsrs	r2, r2, #4
 8004ca8:	0452      	lsls	r2, r2, #17
 8004caa:	430a      	orrs	r2, r1
 8004cac:	491f      	ldr	r1, [pc, #124]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	614b      	str	r3, [r1, #20]
 8004cb2:	e011      	b.n	8004cd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6892      	ldr	r2, [r2, #8]
 8004cc4:	0211      	lsls	r1, r2, #8
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6912      	ldr	r2, [r2, #16]
 8004cca:	0852      	lsrs	r2, r2, #1
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	0652      	lsls	r2, r2, #25
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	4916      	ldr	r1, [pc, #88]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004cd8:	4b14      	ldr	r3, [pc, #80]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a13      	ldr	r2, [pc, #76]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fd fd30 	bl	8002748 <HAL_GetTick>
 8004ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cea:	e009      	b.n	8004d00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cec:	f7fd fd2c 	bl	8002748 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d902      	bls.n	8004d00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8004cfe:	e005      	b.n	8004d0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d00:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ef      	beq.n	8004cec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	4904      	ldr	r1, [pc, #16]	@ (8004d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40021000 	.word	0x40021000

08004d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e095      	b.n	8004e6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d52:	d009      	beq.n	8004d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	61da      	str	r2, [r3, #28]
 8004d5a:	e005      	b.n	8004d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc fe22 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004da8:	d902      	bls.n	8004db0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	e002      	b.n	8004db6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004dbe:	d007      	beq.n	8004dd0 <HAL_SPI_Init+0xa0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e12:	ea42 0103 	orr.w	r1, r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	f003 0204 	and.w	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e4c:	ea42 0103 	orr.w	r1, r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08a      	sub	sp, #40	@ 0x28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e84:	2301      	movs	r3, #1
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e88:	f7fd fc5e 	bl	8002748 <HAL_GetTick>
 8004e8c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e94:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e9c:	887b      	ldrh	r3, [r7, #2]
 8004e9e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004ea0:	887b      	ldrh	r3, [r7, #2]
 8004ea2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x4e>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eb0:	d106      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d102      	bne.n	8004ec0 <HAL_SPI_TransmitReceive+0x4a>
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d001      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e1f3      	b.n	80052ac <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d005      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x60>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x60>
 8004ed0:	887b      	ldrh	r3, [r7, #2]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e1e8      	b.n	80052ac <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x72>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e1e1      	b.n	80052ac <HAL_SPI_TransmitReceive+0x436>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d003      	beq.n	8004f04 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2205      	movs	r2, #5
 8004f00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	887a      	ldrh	r2, [r7, #2]
 8004f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	887a      	ldrh	r2, [r7, #2]
 8004f30:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f46:	d802      	bhi.n	8004f4e <HAL_SPI_TransmitReceive+0xd8>
 8004f48:	8abb      	ldrh	r3, [r7, #20]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d908      	bls.n	8004f60 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e007      	b.n	8004f70 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d007      	beq.n	8004f8e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f96:	f240 8083 	bls.w	80050a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x132>
 8004fa2:	8afb      	ldrh	r3, [r7, #22]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d16f      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	881a      	ldrh	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb8:	1c9a      	adds	r2, r3, #2
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fcc:	e05c      	b.n	8005088 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d11b      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x19e>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x19e>
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d113      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	881a      	ldrh	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	1c9a      	adds	r2, r3, #2
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11c      	bne.n	800505c <HAL_SPI_TransmitReceive+0x1e6>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	b292      	uxth	r2, r2
 800503a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	1c9a      	adds	r2, r3, #2
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005058:	2301      	movs	r3, #1
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800505c:	f7fd fb74 	bl	8002748 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005068:	429a      	cmp	r2, r3
 800506a:	d80d      	bhi.n	8005088 <HAL_SPI_TransmitReceive+0x212>
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d009      	beq.n	8005088 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e111      	b.n	80052ac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d19d      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x158>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d197      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x158>
 800509e:	e0e5      	b.n	800526c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x23a>
 80050a8:	8afb      	ldrh	r3, [r7, #22]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	f040 80d1 	bne.w	8005252 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d912      	bls.n	80050e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050be:	881a      	ldrh	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b02      	subs	r3, #2
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050de:	e0b8      	b.n	8005252 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	7812      	ldrb	r2, [r2, #0]
 80050ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005106:	e0a4      	b.n	8005252 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d134      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x30a>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02f      	beq.n	8005180 <HAL_SPI_TransmitReceive+0x30a>
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	2b01      	cmp	r3, #1
 8005124:	d12c      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d912      	bls.n	8005156 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	1c9a      	adds	r2, r3, #2
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b02      	subs	r3, #2
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005154:	e012      	b.n	800517c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b01      	cmp	r3, #1
 800518c:	d148      	bne.n	8005220 <HAL_SPI_TransmitReceive+0x3aa>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d042      	beq.n	8005220 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d923      	bls.n	80051ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	b292      	uxth	r2, r2
 80051b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	1c9a      	adds	r2, r3, #2
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b02      	subs	r3, #2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d81f      	bhi.n	800521c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80051ea:	605a      	str	r2, [r3, #4]
 80051ec:	e016      	b.n	800521c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f103 020c 	add.w	r2, r3, #12
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	7812      	ldrb	r2, [r2, #0]
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800521c:	2301      	movs	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005220:	f7fd fa92 	bl	8002748 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522c:	429a      	cmp	r2, r3
 800522e:	d803      	bhi.n	8005238 <HAL_SPI_TransmitReceive+0x3c2>
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d102      	bne.n	800523e <HAL_SPI_TransmitReceive+0x3c8>
 8005238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e02c      	b.n	80052ac <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	f47f af55 	bne.w	8005108 <HAL_SPI_TransmitReceive+0x292>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	f47f af4e 	bne.w	8005108 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fa51 	bl	8005718 <SPI_EndRxTxTransaction>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e00e      	b.n	80052ac <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	@ 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10e      	bne.n	80052f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
    return;
 80052f2:	e0ce      	b.n	8005492 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_SPI_IRQHandler+0x5e>
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
    return;
 8005310:	e0bf      	b.n	8005492 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <HAL_SPI_IRQHandler+0x7e>
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d105      	bne.n	8005332 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80b0 	beq.w	8005492 <HAL_SPI_IRQHandler+0x1de>
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80aa 	beq.w	8005492 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d023      	beq.n	8005390 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b03      	cmp	r3, #3
 8005352:	d011      	beq.n	8005378 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005358:	f043 0204 	orr.w	r2, r3, #4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	e00b      	b.n	8005390 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	693b      	ldr	r3, [r7, #16]
        return;
 800538e:	e080      	b.n	8005492 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d014      	beq.n	80053c4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d2:	f043 0208 	orr.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d04f      	beq.n	8005490 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <HAL_SPI_IRQHandler+0x168>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d034      	beq.n	8005486 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0203 	bic.w	r2, r2, #3
 800542a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005430:	2b00      	cmp	r3, #0
 8005432:	d011      	beq.n	8005458 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005438:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <HAL_SPI_IRQHandler+0x1e4>)
 800543a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	4618      	mov	r0, r3
 8005442:	f7fd fbcf 	bl	8002be4 <HAL_DMA_Abort_IT>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005450:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545c:	2b00      	cmp	r3, #0
 800545e:	d016      	beq.n	800548e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005464:	4a0c      	ldr	r2, [pc, #48]	@ (8005498 <HAL_SPI_IRQHandler+0x1e4>)
 8005466:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546c:	4618      	mov	r0, r3
 800546e:	f7fd fbb9 	bl	8002be4 <HAL_DMA_Abort_IT>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800547c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005484:	e003      	b.n	800548e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f808 	bl	800549c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800548c:	e000      	b.n	8005490 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800548e:	bf00      	nop
    return;
 8005490:	bf00      	nop
  }
}
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	080054b1 	.word	0x080054b1

0800549c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff ffe5 	bl	800549c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	4613      	mov	r3, r2
 80054ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054ec:	f7fd f92c 	bl	8002748 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	4413      	add	r3, r2
 80054fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054fc:	f7fd f924 	bl	8002748 <HAL_GetTick>
 8005500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005502:	4b39      	ldr	r3, [pc, #228]	@ (80055e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	015b      	lsls	r3, r3, #5
 8005508:	0d1b      	lsrs	r3, r3, #20
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005512:	e054      	b.n	80055be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d050      	beq.n	80055be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800551c:	f7fd f914 	bl	8002748 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	429a      	cmp	r2, r3
 800552a:	d902      	bls.n	8005532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d13d      	bne.n	80055ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800554a:	d111      	bne.n	8005570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	d004      	beq.n	8005560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555e:	d107      	bne.n	8005570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800556e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005578:	d10f      	bne.n	800559a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e017      	b.n	80055de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4013      	ands	r3, r2
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	bf0c      	ite	eq
 80055ce:	2301      	moveq	r3, #1
 80055d0:	2300      	movne	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d19b      	bne.n	8005514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000000 	.word	0x20000000

080055ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055fe:	f7fd f8a3 	bl	8002748 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	4413      	add	r3, r2
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800560e:	f7fd f89b 	bl	8002748 <HAL_GetTick>
 8005612:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800561c:	4b3d      	ldr	r3, [pc, #244]	@ (8005714 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	00da      	lsls	r2, r3, #3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	0d1b      	lsrs	r3, r3, #20
 800562c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005634:	e060      	b.n	80056f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800563c:	d107      	bne.n	800564e <SPI_WaitFifoStateUntilTimeout+0x62>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800564c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d050      	beq.n	80056f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005656:	f7fd f877 	bl	8002748 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005662:	429a      	cmp	r2, r3
 8005664:	d902      	bls.n	800566c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d13d      	bne.n	80056e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800567a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005684:	d111      	bne.n	80056aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568e:	d004      	beq.n	800569a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005698:	d107      	bne.n	80056aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b2:	d10f      	bne.n	80056d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e010      	b.n	800570a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	d196      	bne.n	8005636 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	@ 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000000 	.word	0x20000000

08005718 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ff5b 	bl	80055ec <SPI_WaitFifoStateUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e027      	b.n	800579c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2200      	movs	r2, #0
 8005754:	2180      	movs	r1, #128	@ 0x80
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fec0 	bl	80054dc <SPI_WaitFlagStateUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e014      	b.n	800579c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff ff34 	bl	80055ec <SPI_WaitFifoStateUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e000      	b.n	800579c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e040      	b.n	8005838 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fc f976 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	@ 0x24
 80057d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0201 	bic.w	r2, r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fb6a 	bl	8005ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8af 	bl	8005954 <UART_SetConfig>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e01b      	b.n	8005838 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800580e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800581e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fbe9 	bl	8006008 <UART_CheckIdleState>
 8005836:	4603      	mov	r3, r0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	@ 0x28
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005854:	2b20      	cmp	r3, #32
 8005856:	d177      	bne.n	8005948 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Transmit+0x24>
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e070      	b.n	800594a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2221      	movs	r2, #33	@ 0x21
 8005874:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005876:	f7fc ff67 	bl	8002748 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005894:	d108      	bne.n	80058a8 <HAL_UART_Transmit+0x68>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e003      	b.n	80058b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058b0:	e02f      	b.n	8005912 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2200      	movs	r2, #0
 80058ba:	2180      	movs	r1, #128	@ 0x80
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 fc4b 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e03b      	b.n	800594a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058e4:	b292      	uxth	r2, r2
 80058e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	3302      	adds	r3, #2
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	e007      	b.n	8005900 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3301      	adds	r3, #1
 80058fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1c9      	bne.n	80058b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2140      	movs	r1, #64	@ 0x40
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fc15 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e005      	b.n	800594a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	e000      	b.n	800594a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005948:	2302      	movs	r3, #2
  }
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b08a      	sub	sp, #40	@ 0x28
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	4313      	orrs	r3, r2
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4ba4      	ldr	r3, [pc, #656]	@ (8005c14 <UART_SetConfig+0x2c0>)
 8005984:	4013      	ands	r3, r2
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800598c:	430b      	orrs	r3, r1
 800598e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a99      	ldr	r2, [pc, #612]	@ (8005c18 <UART_SetConfig+0x2c4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d004      	beq.n	80059c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059bc:	4313      	orrs	r3, r2
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a90      	ldr	r2, [pc, #576]	@ (8005c1c <UART_SetConfig+0x2c8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d126      	bne.n	8005a2c <UART_SetConfig+0xd8>
 80059de:	4b90      	ldr	r3, [pc, #576]	@ (8005c20 <UART_SetConfig+0x2cc>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d81b      	bhi.n	8005a24 <UART_SetConfig+0xd0>
 80059ec:	a201      	add	r2, pc, #4	@ (adr r2, 80059f4 <UART_SetConfig+0xa0>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a05 	.word	0x08005a05
 80059f8:	08005a15 	.word	0x08005a15
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a1d 	.word	0x08005a1d
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0a:	e116      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a12:	e112      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1a:	e10e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a22:	e10a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2a:	e106      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a7c      	ldr	r2, [pc, #496]	@ (8005c24 <UART_SetConfig+0x2d0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d138      	bne.n	8005aa8 <UART_SetConfig+0x154>
 8005a36:	4b7a      	ldr	r3, [pc, #488]	@ (8005c20 <UART_SetConfig+0x2cc>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	d82d      	bhi.n	8005aa0 <UART_SetConfig+0x14c>
 8005a44:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <UART_SetConfig+0xf8>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a81 	.word	0x08005a81
 8005a50:	08005aa1 	.word	0x08005aa1
 8005a54:	08005aa1 	.word	0x08005aa1
 8005a58:	08005aa1 	.word	0x08005aa1
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005aa1 	.word	0x08005aa1
 8005a64:	08005aa1 	.word	0x08005aa1
 8005a68:	08005aa1 	.word	0x08005aa1
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005aa1 	.word	0x08005aa1
 8005a74:	08005aa1 	.word	0x08005aa1
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a86:	e0d8      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a8e:	e0d4      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a96:	e0d0      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a9e:	e0cc      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aa6:	e0c8      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a5e      	ldr	r2, [pc, #376]	@ (8005c28 <UART_SetConfig+0x2d4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d125      	bne.n	8005afe <UART_SetConfig+0x1aa>
 8005ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c20 <UART_SetConfig+0x2cc>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005abc:	2b30      	cmp	r3, #48	@ 0x30
 8005abe:	d016      	beq.n	8005aee <UART_SetConfig+0x19a>
 8005ac0:	2b30      	cmp	r3, #48	@ 0x30
 8005ac2:	d818      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d00a      	beq.n	8005ade <UART_SetConfig+0x18a>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d814      	bhi.n	8005af6 <UART_SetConfig+0x1a2>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <UART_SetConfig+0x182>
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d008      	beq.n	8005ae6 <UART_SetConfig+0x192>
 8005ad4:	e00f      	b.n	8005af6 <UART_SetConfig+0x1a2>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005adc:	e0ad      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae4:	e0a9      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aec:	e0a5      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005aee:	2308      	movs	r3, #8
 8005af0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005af4:	e0a1      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005af6:	2310      	movs	r3, #16
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005afc:	e09d      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4a      	ldr	r2, [pc, #296]	@ (8005c2c <UART_SetConfig+0x2d8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d125      	bne.n	8005b54 <UART_SetConfig+0x200>
 8005b08:	4b45      	ldr	r3, [pc, #276]	@ (8005c20 <UART_SetConfig+0x2cc>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b14:	d016      	beq.n	8005b44 <UART_SetConfig+0x1f0>
 8005b16:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b18:	d818      	bhi.n	8005b4c <UART_SetConfig+0x1f8>
 8005b1a:	2b80      	cmp	r3, #128	@ 0x80
 8005b1c:	d00a      	beq.n	8005b34 <UART_SetConfig+0x1e0>
 8005b1e:	2b80      	cmp	r3, #128	@ 0x80
 8005b20:	d814      	bhi.n	8005b4c <UART_SetConfig+0x1f8>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <UART_SetConfig+0x1d8>
 8005b26:	2b40      	cmp	r3, #64	@ 0x40
 8005b28:	d008      	beq.n	8005b3c <UART_SetConfig+0x1e8>
 8005b2a:	e00f      	b.n	8005b4c <UART_SetConfig+0x1f8>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b32:	e082      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b34:	2302      	movs	r3, #2
 8005b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b3a:	e07e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b42:	e07a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b44:	2308      	movs	r3, #8
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b4a:	e076      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b52:	e072      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a35      	ldr	r2, [pc, #212]	@ (8005c30 <UART_SetConfig+0x2dc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d12a      	bne.n	8005bb4 <UART_SetConfig+0x260>
 8005b5e:	4b30      	ldr	r3, [pc, #192]	@ (8005c20 <UART_SetConfig+0x2cc>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b6c:	d01a      	beq.n	8005ba4 <UART_SetConfig+0x250>
 8005b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b72:	d81b      	bhi.n	8005bac <UART_SetConfig+0x258>
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b78:	d00c      	beq.n	8005b94 <UART_SetConfig+0x240>
 8005b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b7e:	d815      	bhi.n	8005bac <UART_SetConfig+0x258>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <UART_SetConfig+0x238>
 8005b84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b88:	d008      	beq.n	8005b9c <UART_SetConfig+0x248>
 8005b8a:	e00f      	b.n	8005bac <UART_SetConfig+0x258>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b92:	e052      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b94:	2302      	movs	r3, #2
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b9a:	e04e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ba2:	e04a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005ba4:	2308      	movs	r3, #8
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005baa:	e046      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bac:	2310      	movs	r3, #16
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb2:	e042      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	@ (8005c18 <UART_SetConfig+0x2c4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d13a      	bne.n	8005c34 <UART_SetConfig+0x2e0>
 8005bbe:	4b18      	ldr	r3, [pc, #96]	@ (8005c20 <UART_SetConfig+0x2cc>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bcc:	d01a      	beq.n	8005c04 <UART_SetConfig+0x2b0>
 8005bce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bd2:	d81b      	bhi.n	8005c0c <UART_SetConfig+0x2b8>
 8005bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd8:	d00c      	beq.n	8005bf4 <UART_SetConfig+0x2a0>
 8005bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bde:	d815      	bhi.n	8005c0c <UART_SetConfig+0x2b8>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <UART_SetConfig+0x298>
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be8:	d008      	beq.n	8005bfc <UART_SetConfig+0x2a8>
 8005bea:	e00f      	b.n	8005c0c <UART_SetConfig+0x2b8>
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bf2:	e022      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfa:	e01e      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c02:	e01a      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c0a:	e016      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c12:	e012      	b.n	8005c3a <UART_SetConfig+0x2e6>
 8005c14:	efff69f3 	.word	0xefff69f3
 8005c18:	40008000 	.word	0x40008000
 8005c1c:	40013800 	.word	0x40013800
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40004400 	.word	0x40004400
 8005c28:	40004800 	.word	0x40004800
 8005c2c:	40004c00 	.word	0x40004c00
 8005c30:	40005000 	.word	0x40005000
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a9f      	ldr	r2, [pc, #636]	@ (8005ebc <UART_SetConfig+0x568>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d17a      	bne.n	8005d3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d824      	bhi.n	8005c96 <UART_SetConfig+0x342>
 8005c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c54 <UART_SetConfig+0x300>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c87 	.word	0x08005c87
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c97 	.word	0x08005c97
 8005c70:	08005c97 	.word	0x08005c97
 8005c74:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c78:	f7fe fb02 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8005c7c:	61f8      	str	r0, [r7, #28]
        break;
 8005c7e:	e010      	b.n	8005ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b8f      	ldr	r3, [pc, #572]	@ (8005ec0 <UART_SetConfig+0x56c>)
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e00d      	b.n	8005ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fe fa63 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005c8a:	61f8      	str	r0, [r7, #28]
        break;
 8005c8c:	e009      	b.n	8005ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c92:	61fb      	str	r3, [r7, #28]
        break;
 8005c94:	e005      	b.n	8005ca2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80fb 	beq.w	8005ea0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d305      	bcc.n	8005cc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d903      	bls.n	8005cce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ccc:	e0e8      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	461c      	mov	r4, r3
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	022b      	lsls	r3, r5, #8
 8005ce0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ce4:	0222      	lsls	r2, r4, #8
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	6849      	ldr	r1, [r1, #4]
 8005cea:	0849      	lsrs	r1, r1, #1
 8005cec:	2000      	movs	r0, #0
 8005cee:	4688      	mov	r8, r1
 8005cf0:	4681      	mov	r9, r0
 8005cf2:	eb12 0a08 	adds.w	sl, r2, r8
 8005cf6:	eb43 0b09 	adc.w	fp, r3, r9
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d08:	4650      	mov	r0, sl
 8005d0a:	4659      	mov	r1, fp
 8005d0c:	f7fa fab8 	bl	8000280 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d1e:	d308      	bcc.n	8005d32 <UART_SetConfig+0x3de>
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d26:	d204      	bcs.n	8005d32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	e0b6      	b.n	8005ea0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d38:	e0b2      	b.n	8005ea0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d42:	d15e      	bne.n	8005e02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d828      	bhi.n	8005d9e <UART_SetConfig+0x44a>
 8005d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <UART_SetConfig+0x400>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	08005d9f 	.word	0x08005d9f
 8005d64:	08005d8f 	.word	0x08005d8f
 8005d68:	08005d9f 	.word	0x08005d9f
 8005d6c:	08005d9f 	.word	0x08005d9f
 8005d70:	08005d9f 	.word	0x08005d9f
 8005d74:	08005d97 	.word	0x08005d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d78:	f7fe fa82 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8005d7c:	61f8      	str	r0, [r7, #28]
        break;
 8005d7e:	e014      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fe fa94 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8005d84:	61f8      	str	r0, [r7, #28]
        break;
 8005d86:	e010      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d88:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec0 <UART_SetConfig+0x56c>)
 8005d8a:	61fb      	str	r3, [r7, #28]
        break;
 8005d8c:	e00d      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8e:	f7fe f9df 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005d92:	61f8      	str	r0, [r7, #28]
        break;
 8005d94:	e009      	b.n	8005daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d9a:	61fb      	str	r3, [r7, #28]
        break;
 8005d9c:	e005      	b.n	8005daa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d077      	beq.n	8005ea0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	005a      	lsls	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	441a      	add	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	2b0f      	cmp	r3, #15
 8005dca:	d916      	bls.n	8005dfa <UART_SetConfig+0x4a6>
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd2:	d212      	bcs.n	8005dfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f023 030f 	bic.w	r3, r3, #15
 8005ddc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	8afb      	ldrh	r3, [r7, #22]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	8afa      	ldrh	r2, [r7, #22]
 8005df6:	60da      	str	r2, [r3, #12]
 8005df8:	e052      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e00:	e04e      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d827      	bhi.n	8005e5a <UART_SetConfig+0x506>
 8005e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <UART_SetConfig+0x4bc>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	08005e5b 	.word	0x08005e5b
 8005e20:	08005e4b 	.word	0x08005e4b
 8005e24:	08005e5b 	.word	0x08005e5b
 8005e28:	08005e5b 	.word	0x08005e5b
 8005e2c:	08005e5b 	.word	0x08005e5b
 8005e30:	08005e53 	.word	0x08005e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e34:	f7fe fa24 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8005e38:	61f8      	str	r0, [r7, #28]
        break;
 8005e3a:	e014      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fe fa36 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
 8005e40:	61f8      	str	r0, [r7, #28]
        break;
 8005e42:	e010      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec0 <UART_SetConfig+0x56c>)
 8005e46:	61fb      	str	r3, [r7, #28]
        break;
 8005e48:	e00d      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7fe f981 	bl	8004150 <HAL_RCC_GetSysClockFreq>
 8005e4e:	61f8      	str	r0, [r7, #28]
        break;
 8005e50:	e009      	b.n	8005e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e56:	61fb      	str	r3, [r7, #28]
        break;
 8005e58:	e005      	b.n	8005e66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e64:	bf00      	nop
    }

    if (pclk != 0U)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d019      	beq.n	8005ea0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	085a      	lsrs	r2, r3, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b0f      	cmp	r3, #15
 8005e84:	d909      	bls.n	8005e9a <UART_SetConfig+0x546>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8c:	d205      	bcs.n	8005e9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60da      	str	r2, [r3, #12]
 8005e98:	e002      	b.n	8005ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005eac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3728      	adds	r7, #40	@ 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eba:	bf00      	nop
 8005ebc:	40008000 	.word	0x40008000
 8005ec0:	00f42400 	.word	0x00f42400

08005ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01a      	beq.n	8005fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc2:	d10a      	bne.n	8005fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b098      	sub	sp, #96	@ 0x60
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006018:	f7fc fb96 	bl	8002748 <HAL_GetTick>
 800601c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d12e      	bne.n	800608a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006034:	2200      	movs	r2, #0
 8006036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f88c 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d021      	beq.n	800608a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	e853 3f00 	ldrex	r3, [r3]
 8006052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800605a:	653b      	str	r3, [r7, #80]	@ 0x50
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006064:	647b      	str	r3, [r7, #68]	@ 0x44
 8006066:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800606a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e6      	bne.n	8006046 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e062      	b.n	8006150 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b04      	cmp	r3, #4
 8006096:	d149      	bne.n	800612c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060a0:	2200      	movs	r2, #0
 80060a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f856 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d03c      	beq.n	800612c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	623b      	str	r3, [r7, #32]
   return(result);
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e6      	bne.n	80060b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3308      	adds	r3, #8
 80060ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0301 	bic.w	r3, r3, #1
 80060fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3308      	adds	r3, #8
 8006102:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006104:	61fa      	str	r2, [r7, #28]
 8006106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e5      	bne.n	80060e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e011      	b.n	8006150 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3758      	adds	r7, #88	@ 0x58
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006168:	e04f      	b.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d04b      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006172:	f7fc fae9 	bl	8002748 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <UART_WaitOnFlagUntilTimeout+0x30>
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e04e      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d037      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b80      	cmp	r3, #128	@ 0x80
 800619e:	d034      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b40      	cmp	r3, #64	@ 0x40
 80061a4:	d031      	beq.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d110      	bne.n	80061d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2208      	movs	r2, #8
 80061ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f838 	bl	8006232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2208      	movs	r2, #8
 80061c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e029      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e4:	d111      	bne.n	800620a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f81e 	bl	8006232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e00f      	b.n	800622a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4013      	ands	r3, r2
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	429a      	cmp	r2, r3
 8006218:	bf0c      	ite	eq
 800621a:	2301      	moveq	r3, #1
 800621c:	2300      	movne	r3, #0
 800621e:	b2db      	uxtb	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	429a      	cmp	r2, r3
 8006226:	d0a0      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006232:	b480      	push	{r7}
 8006234:	b095      	sub	sp, #84	@ 0x54
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800624e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006258:	643b      	str	r3, [r7, #64]	@ 0x40
 800625a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800625e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3308      	adds	r3, #8
 8006272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6a3b      	ldr	r3, [r7, #32]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	61fb      	str	r3, [r7, #28]
   return(result);
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800628c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800628e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e5      	bne.n	800626c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d118      	bne.n	80062da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f023 0310 	bic.w	r3, r3, #16
 80062bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	6979      	ldr	r1, [r7, #20]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	613b      	str	r3, [r7, #16]
   return(result);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062ee:	bf00      	nop
 80062f0:	3754      	adds	r7, #84	@ 0x54
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062fa:	b084      	sub	sp, #16
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	f107 001c 	add.w	r0, r7, #28
 8006308:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fa69 	bl	80067f0 <USB_CoreReset>
 800631e:	4603      	mov	r3, r0
 8006320:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006322:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	639a      	str	r2, [r3, #56]	@ 0x38
 8006336:	e005      	b.n	8006344 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006350:	b004      	add	sp, #16
 8006352:	4770      	bx	lr

08006354 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 0201 	bic.w	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d115      	bne.n	80063c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063a4:	200a      	movs	r0, #10
 80063a6:	f7fc f9db 	bl	8002760 <HAL_Delay>
      ms += 10U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	330a      	adds	r3, #10
 80063ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa0f 	bl	80067d4 <USB_GetMode>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d01e      	beq.n	80063fa <USB_SetCurrentMode+0x84>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2bc7      	cmp	r3, #199	@ 0xc7
 80063c0:	d9f0      	bls.n	80063a4 <USB_SetCurrentMode+0x2e>
 80063c2:	e01a      	b.n	80063fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d115      	bne.n	80063f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063d6:	200a      	movs	r0, #10
 80063d8:	f7fc f9c2 	bl	8002760 <HAL_Delay>
      ms += 10U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	330a      	adds	r3, #10
 80063e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f9f6 	bl	80067d4 <USB_GetMode>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <USB_SetCurrentMode+0x84>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80063f2:	d9f0      	bls.n	80063d6 <USB_SetCurrentMode+0x60>
 80063f4:	e001      	b.n	80063fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e005      	b.n	8006406 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2bc8      	cmp	r3, #200	@ 0xc8
 80063fe:	d101      	bne.n	8006404 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006410:	b084      	sub	sp, #16
 8006412:	b580      	push	{r7, lr}
 8006414:	b086      	sub	sp, #24
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800641e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	e009      	b.n	8006444 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3340      	adds	r3, #64	@ 0x40
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	2200      	movs	r2, #0
 800643c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	3301      	adds	r3, #1
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b0e      	cmp	r3, #14
 8006448:	d9f2      	bls.n	8006430 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800644a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800644e:	2b00      	cmp	r3, #0
 8006450:	d11c      	bne.n	800648c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006460:	f043 0302 	orr.w	r3, r3, #2
 8006464:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	e005      	b.n	8006498 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800649e:	461a      	mov	r2, r3
 80064a0:	2300      	movs	r3, #0
 80064a2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064a4:	2103      	movs	r1, #3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f95a 	bl	8006760 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064ac:	2110      	movs	r1, #16
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f8f6 	bl	80066a0 <USB_FlushTxFifo>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f920 	bl	8006704 <USB_FlushRxFifo>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d4:	461a      	mov	r2, r3
 80064d6:	2300      	movs	r3, #0
 80064d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ec:	461a      	mov	r2, r3
 80064ee:	2300      	movs	r3, #0
 80064f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	e043      	b.n	8006580 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800650a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800650e:	d118      	bne.n	8006542 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006522:	461a      	mov	r2, r3
 8006524:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e013      	b.n	8006554 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006538:	461a      	mov	r2, r3
 800653a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	e008      	b.n	8006554 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654e:	461a      	mov	r2, r3
 8006550:	2300      	movs	r3, #0
 8006552:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006560:	461a      	mov	r2, r3
 8006562:	2300      	movs	r3, #0
 8006564:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006572:	461a      	mov	r2, r3
 8006574:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006578:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3301      	adds	r3, #1
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006584:	461a      	mov	r2, r3
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4293      	cmp	r3, r2
 800658a:	d3b5      	bcc.n	80064f8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	e043      	b.n	800661a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065a8:	d118      	bne.n	80065dc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065bc:	461a      	mov	r2, r3
 80065be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	e013      	b.n	80065ee <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	461a      	mov	r2, r3
 80065d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e008      	b.n	80065ee <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e8:	461a      	mov	r2, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	461a      	mov	r2, r3
 80065fc:	2300      	movs	r3, #0
 80065fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	461a      	mov	r2, r3
 800660e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3301      	adds	r3, #1
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800661e:	461a      	mov	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4293      	cmp	r3, r2
 8006624:	d3b5      	bcc.n	8006592 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006638:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006646:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f043 0210 	orr.w	r2, r3, #16
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	4b10      	ldr	r3, [pc, #64]	@ (800669c <USB_DevInit+0x28c>)
 800665a:	4313      	orrs	r3, r2
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f043 0208 	orr.w	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006674:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006684:	f043 0304 	orr.w	r3, r3, #4
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006698:	b004      	add	sp, #16
 800669a:	4770      	bx	lr
 800669c:	803c3800 	.word	0x803c3800

080066a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066ba:	d901      	bls.n	80066c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e01b      	b.n	80066f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	daf2      	bge.n	80066ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	019b      	lsls	r3, r3, #6
 80066d0:	f043 0220 	orr.w	r2, r3, #32
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066e4:	d901      	bls.n	80066ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e006      	b.n	80066f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d0f0      	beq.n	80066d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800671c:	d901      	bls.n	8006722 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e018      	b.n	8006754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	daf2      	bge.n	8006710 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2210      	movs	r2, #16
 8006732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006740:	d901      	bls.n	8006746 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e006      	b.n	8006754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b10      	cmp	r3, #16
 8006750:	d0f0      	beq.n	8006734 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006780:	4313      	orrs	r3, r2
 8006782:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067ac:	f023 0303 	bic.w	r3, r3, #3
 80067b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067c0:	f043 0302 	orr.w	r3, r3, #2
 80067c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f003 0301 	and.w	r3, r3, #1
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006808:	d901      	bls.n	800680e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e01b      	b.n	8006846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	daf2      	bge.n	80067fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f043 0201 	orr.w	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3301      	adds	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006832:	d901      	bls.n	8006838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e006      	b.n	8006846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	d0f0      	beq.n	8006826 <USB_CoreReset+0x36>

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3714      	adds	r7, #20
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
	...

08006854 <__NVIC_SetPriority>:
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006864:	2b00      	cmp	r3, #0
 8006866:	db0a      	blt.n	800687e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	490c      	ldr	r1, [pc, #48]	@ (80068a0 <__NVIC_SetPriority+0x4c>)
 800686e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006872:	0112      	lsls	r2, r2, #4
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	440b      	add	r3, r1
 8006878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800687c:	e00a      	b.n	8006894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	4908      	ldr	r1, [pc, #32]	@ (80068a4 <__NVIC_SetPriority+0x50>)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	3b04      	subs	r3, #4
 800688c:	0112      	lsls	r2, r2, #4
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	440b      	add	r3, r1
 8006892:	761a      	strb	r2, [r3, #24]
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	e000e100 	.word	0xe000e100
 80068a4:	e000ed00 	.word	0xe000ed00

080068a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068ac:	2100      	movs	r1, #0
 80068ae:	f06f 0004 	mvn.w	r0, #4
 80068b2:	f7ff ffcf 	bl	8006854 <__NVIC_SetPriority>
#endif
}
 80068b6:	bf00      	nop
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c2:	f3ef 8305 	mrs	r3, IPSR
 80068c6:	603b      	str	r3, [r7, #0]
  return(result);
 80068c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068ce:	f06f 0305 	mvn.w	r3, #5
 80068d2:	607b      	str	r3, [r7, #4]
 80068d4:	e00c      	b.n	80068f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006900 <osKernelInitialize+0x44>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d105      	bne.n	80068ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068de:	4b08      	ldr	r3, [pc, #32]	@ (8006900 <osKernelInitialize+0x44>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	607b      	str	r3, [r7, #4]
 80068e8:	e002      	b.n	80068f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068ea:	f04f 33ff 	mov.w	r3, #4294967295
 80068ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068f0:	687b      	ldr	r3, [r7, #4]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	2000141c 	.word	0x2000141c

08006904 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800690a:	f3ef 8305 	mrs	r3, IPSR
 800690e:	603b      	str	r3, [r7, #0]
  return(result);
 8006910:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006916:	f06f 0305 	mvn.w	r3, #5
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	e010      	b.n	8006940 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <osKernelStart+0x48>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d109      	bne.n	800693a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006926:	f7ff ffbf 	bl	80068a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800692a:	4b08      	ldr	r3, [pc, #32]	@ (800694c <osKernelStart+0x48>)
 800692c:	2202      	movs	r2, #2
 800692e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006930:	f001 fe90 	bl	8008654 <vTaskStartScheduler>
      stat = osOK;
 8006934:	2300      	movs	r3, #0
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	e002      	b.n	8006940 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006940:	687b      	ldr	r3, [r7, #4]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	2000141c 	.word	0x2000141c

08006950 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	@ 0x38
 8006954:	af04      	add	r7, sp, #16
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006960:	f3ef 8305 	mrs	r3, IPSR
 8006964:	617b      	str	r3, [r7, #20]
  return(result);
 8006966:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006968:	2b00      	cmp	r3, #0
 800696a:	d17e      	bne.n	8006a6a <osThreadNew+0x11a>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d07b      	beq.n	8006a6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006972:	2380      	movs	r3, #128	@ 0x80
 8006974:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006976:	2318      	movs	r3, #24
 8006978:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d045      	beq.n	8006a16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <osThreadNew+0x48>
        name = attr->name;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <osThreadNew+0x6e>
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	2b38      	cmp	r3, #56	@ 0x38
 80069b0:	d805      	bhi.n	80069be <osThreadNew+0x6e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <osThreadNew+0x72>
        return (NULL);
 80069be:	2300      	movs	r3, #0
 80069c0:	e054      	b.n	8006a6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	089b      	lsrs	r3, r3, #2
 80069d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00e      	beq.n	80069f8 <osThreadNew+0xa8>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2b5b      	cmp	r3, #91	@ 0x5b
 80069e0:	d90a      	bls.n	80069f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d006      	beq.n	80069f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <osThreadNew+0xa8>
        mem = 1;
 80069f2:	2301      	movs	r3, #1
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e010      	b.n	8006a1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10c      	bne.n	8006a1a <osThreadNew+0xca>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d108      	bne.n	8006a1a <osThreadNew+0xca>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <osThreadNew+0xca>
          mem = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
 8006a14:	e001      	b.n	8006a1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d110      	bne.n	8006a42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a28:	9202      	str	r2, [sp, #8]
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f001 fc30 	bl	800829c <xTaskCreateStatic>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	613b      	str	r3, [r7, #16]
 8006a40:	e013      	b.n	8006a6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d110      	bne.n	8006a6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	f107 0310 	add.w	r3, r7, #16
 8006a50:	9301      	str	r3, [sp, #4]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 fc7e 	bl	800835c <xTaskCreate>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d001      	beq.n	8006a6a <osThreadNew+0x11a>
            hTask = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a6a:	693b      	ldr	r3, [r7, #16]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3728      	adds	r7, #40	@ 0x28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a7c:	f3ef 8305 	mrs	r3, IPSR
 8006a80:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <osDelay+0x1c>
    stat = osErrorISR;
 8006a88:	f06f 0305 	mvn.w	r3, #5
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	e007      	b.n	8006aa0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fda4 	bl	80085e8 <vTaskDelay>
    }
  }

  return (stat);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b088      	sub	sp, #32
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab6:	f3ef 8305 	mrs	r3, IPSR
 8006aba:	60bb      	str	r3, [r7, #8]
  return(result);
 8006abc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d174      	bne.n	8006bac <osMutexNew+0x102>
    if (attr != NULL) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	e001      	b.n	8006ad4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <osMutexNew+0x3a>
      rmtx = 1U;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e001      	b.n	8006ae8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d15c      	bne.n	8006bac <osMutexNew+0x102>
      mem = -1;
 8006af2:	f04f 33ff 	mov.w	r3, #4294967295
 8006af6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d015      	beq.n	8006b2a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d006      	beq.n	8006b14 <osMutexNew+0x6a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2b4f      	cmp	r3, #79	@ 0x4f
 8006b0c:	d902      	bls.n	8006b14 <osMutexNew+0x6a>
          mem = 1;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	e00c      	b.n	8006b2e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d108      	bne.n	8006b2e <osMutexNew+0x84>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <osMutexNew+0x84>
            mem = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	e001      	b.n	8006b2e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d112      	bne.n	8006b5a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	2004      	movs	r0, #4
 8006b42:	f000 fc3e 	bl	80073c2 <xQueueCreateMutexStatic>
 8006b46:	61f8      	str	r0, [r7, #28]
 8006b48:	e016      	b.n	8006b78 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	2001      	movs	r0, #1
 8006b52:	f000 fc36 	bl	80073c2 <xQueueCreateMutexStatic>
 8006b56:	61f8      	str	r0, [r7, #28]
 8006b58:	e00e      	b.n	8006b78 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d004      	beq.n	8006b70 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006b66:	2004      	movs	r0, #4
 8006b68:	f000 fc13 	bl	8007392 <xQueueCreateMutex>
 8006b6c:	61f8      	str	r0, [r7, #28]
 8006b6e:	e003      	b.n	8006b78 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006b70:	2001      	movs	r0, #1
 8006b72:	f000 fc0e 	bl	8007392 <xQueueCreateMutex>
 8006b76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <osMutexNew+0xee>
        if (attr != NULL) {
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <osMutexNew+0xe2>
          name = attr->name;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60fb      	str	r3, [r7, #12]
 8006b8a:	e001      	b.n	8006b90 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006b90:	68f9      	ldr	r1, [r7, #12]
 8006b92:	69f8      	ldr	r0, [r7, #28]
 8006b94:	f001 fafa 	bl	800818c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d006      	beq.n	8006bac <osMutexNew+0x102>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006bac:	69fb      	ldr	r3, [r7, #28]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3720      	adds	r7, #32
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd4:	f3ef 8305 	mrs	r3, IPSR
 8006bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bda:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006be0:	f06f 0305 	mvn.w	r3, #5
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e02c      	b.n	8006c42 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006bee:	f06f 0303 	mvn.w	r3, #3
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e025      	b.n	8006c42 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d011      	beq.n	8006c20 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6938      	ldr	r0, [r7, #16]
 8006c00:	f000 fc2f 	bl	8007462 <xQueueTakeMutexRecursive>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d01b      	beq.n	8006c42 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006c10:	f06f 0301 	mvn.w	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	e014      	b.n	8006c42 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006c18:	f06f 0302 	mvn.w	r3, #2
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e010      	b.n	8006c42 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6938      	ldr	r0, [r7, #16]
 8006c24:	f000 ffd4 	bl	8007bd0 <xQueueSemaphoreTake>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d009      	beq.n	8006c42 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006c34:	f06f 0301 	mvn.w	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e002      	b.n	8006c42 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006c3c:	f06f 0302 	mvn.w	r3, #2
 8006c40:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006c42:	697b      	ldr	r3, [r7, #20]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c68:	f3ef 8305 	mrs	r3, IPSR
 8006c6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c6e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006c74:	f06f 0305 	mvn.w	r3, #5
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e01f      	b.n	8006cbc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006c82:	f06f 0303 	mvn.w	r3, #3
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e018      	b.n	8006cbc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006c90:	6938      	ldr	r0, [r7, #16]
 8006c92:	f000 fbb1 	bl	80073f8 <xQueueGiveMutexRecursive>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d00f      	beq.n	8006cbc <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c9c:	f06f 0302 	mvn.w	r3, #2
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e00b      	b.n	8006cbc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2100      	movs	r1, #0
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f000 fc7e 	bl	80075ac <xQueueGenericSend>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d002      	beq.n	8006cbc <osMutexRelease+0x70>
        stat = osErrorResource;
 8006cb6:	f06f 0302 	mvn.w	r3, #2
 8006cba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006cbc:	697b      	ldr	r3, [r7, #20]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b08a      	sub	sp, #40	@ 0x28
 8006cca:	af02      	add	r7, sp, #8
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cd6:	f3ef 8305 	mrs	r3, IPSR
 8006cda:	613b      	str	r3, [r7, #16]
  return(result);
 8006cdc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d175      	bne.n	8006dce <osSemaphoreNew+0x108>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d072      	beq.n	8006dce <osSemaphoreNew+0x108>
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d86e      	bhi.n	8006dce <osSemaphoreNew+0x108>
    mem = -1;
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d015      	beq.n	8006d28 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <osSemaphoreNew+0x4c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b4f      	cmp	r3, #79	@ 0x4f
 8006d0a:	d902      	bls.n	8006d12 <osSemaphoreNew+0x4c>
        mem = 1;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e00c      	b.n	8006d2c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d108      	bne.n	8006d2c <osSemaphoreNew+0x66>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <osSemaphoreNew+0x66>
          mem = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e001      	b.n	8006d2c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d04c      	beq.n	8006dce <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d128      	bne.n	8006d8c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d10a      	bne.n	8006d56 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2203      	movs	r2, #3
 8006d46:	9200      	str	r2, [sp, #0]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	f000 fa2b 	bl	80071a8 <xQueueGenericCreateStatic>
 8006d52:	61f8      	str	r0, [r7, #28]
 8006d54:	e005      	b.n	8006d62 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006d56:	2203      	movs	r2, #3
 8006d58:	2100      	movs	r1, #0
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	f000 faa1 	bl	80072a2 <xQueueGenericCreate>
 8006d60:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d022      	beq.n	8006dae <osSemaphoreNew+0xe8>
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01f      	beq.n	8006dae <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	2100      	movs	r1, #0
 8006d74:	69f8      	ldr	r0, [r7, #28]
 8006d76:	f000 fc19 	bl	80075ac <xQueueGenericSend>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d016      	beq.n	8006dae <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006d80:	69f8      	ldr	r0, [r7, #28]
 8006d82:	f001 f8b7 	bl	8007ef4 <vQueueDelete>
            hSemaphore = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	e010      	b.n	8006dae <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d108      	bne.n	8006da4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	461a      	mov	r2, r3
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 fb98 	bl	80074d0 <xQueueCreateCountingSemaphoreStatic>
 8006da0:	61f8      	str	r0, [r7, #28]
 8006da2:	e004      	b.n	8006dae <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fbcb 	bl	8007542 <xQueueCreateCountingSemaphore>
 8006dac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00c      	beq.n	8006dce <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	e001      	b.n	8006dc6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006dc6:	6979      	ldr	r1, [r7, #20]
 8006dc8:	69f8      	ldr	r0, [r7, #28]
 8006dca:	f001 f9df 	bl	800818c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006dce:	69fb      	ldr	r3, [r7, #28]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006df0:	f06f 0303 	mvn.w	r3, #3
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e039      	b.n	8006e6c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df8:	f3ef 8305 	mrs	r3, IPSR
 8006dfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d022      	beq.n	8006e4a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006e0a:	f06f 0303 	mvn.w	r3, #3
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e02c      	b.n	8006e6c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006e16:	f107 0308 	add.w	r3, r7, #8
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	6938      	ldr	r0, [r7, #16]
 8006e20:	f000 ffe6 	bl	8007df0 <xQueueReceiveFromISR>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d003      	beq.n	8006e32 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006e2a:	f06f 0302 	mvn.w	r3, #2
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e01c      	b.n	8006e6c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d019      	beq.n	8006e6c <osSemaphoreAcquire+0x94>
 8006e38:	4b0f      	ldr	r3, [pc, #60]	@ (8006e78 <osSemaphoreAcquire+0xa0>)
 8006e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	e010      	b.n	8006e6c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6938      	ldr	r0, [r7, #16]
 8006e4e:	f000 febf 	bl	8007bd0 <xQueueSemaphoreTake>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d009      	beq.n	8006e6c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006e5e:	f06f 0301 	mvn.w	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e002      	b.n	8006e6c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006e66:	f06f 0302 	mvn.w	r3, #2
 8006e6a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006e6c:	697b      	ldr	r3, [r7, #20]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	e000ed04 	.word	0xe000ed04

08006e7c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d103      	bne.n	8006e9a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006e92:	f06f 0303 	mvn.w	r3, #3
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	e02c      	b.n	8006ef4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e9a:	f3ef 8305 	mrs	r3, IPSR
 8006e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01a      	beq.n	8006edc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6938      	ldr	r0, [r7, #16]
 8006eb2:	f000 fd1b 	bl	80078ec <xQueueGiveFromISR>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d003      	beq.n	8006ec4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006ebc:	f06f 0302 	mvn.w	r3, #2
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	e017      	b.n	8006ef4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d014      	beq.n	8006ef4 <osSemaphoreRelease+0x78>
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <osSemaphoreRelease+0x84>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	e00b      	b.n	8006ef4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006edc:	2300      	movs	r3, #0
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	6938      	ldr	r0, [r7, #16]
 8006ee4:	f000 fb62 	bl	80075ac <xQueueGenericSend>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d002      	beq.n	8006ef4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006eee:	f06f 0302 	mvn.w	r3, #2
 8006ef2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006ef4:	697b      	ldr	r3, [r7, #20]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4a07      	ldr	r2, [pc, #28]	@ (8006f30 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4a06      	ldr	r2, [pc, #24]	@ (8006f34 <vApplicationGetIdleTaskMemory+0x30>)
 8006f1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2280      	movs	r2, #128	@ 0x80
 8006f20:	601a      	str	r2, [r3, #0]
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20001420 	.word	0x20001420
 8006f34:	2000147c 	.word	0x2000147c

08006f38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a07      	ldr	r2, [pc, #28]	@ (8006f64 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4a06      	ldr	r2, [pc, #24]	@ (8006f68 <vApplicationGetTimerTaskMemory+0x30>)
 8006f4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f56:	601a      	str	r2, [r3, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	2000167c 	.word	0x2000167c
 8006f68:	200016d8 	.word	0x200016d8

08006f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f103 0208 	add.w	r2, r3, #8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f103 0208 	add.w	r2, r3, #8
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f103 0208 	add.w	r2, r3, #8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d103      	bne.n	800702e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e00c      	b.n	8007048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3308      	adds	r3, #8
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e002      	b.n	800703c <vListInsert+0x2e>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	d2f6      	bcs.n	8007036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6892      	ldr	r2, [r2, #8]
 8007096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6852      	ldr	r2, [r2, #4]
 80070a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d103      	bne.n	80070b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	1e5a      	subs	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070fa:	bf00      	nop
 80070fc:	bf00      	nop
 80070fe:	e7fd      	b.n	80070fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007100:	f002 fd72 	bl	8009be8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007130:	3b01      	subs	r3, #1
 8007132:	68f9      	ldr	r1, [r7, #12]
 8007134:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	441a      	add	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	22ff      	movs	r2, #255	@ 0xff
 8007144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	22ff      	movs	r2, #255	@ 0xff
 800714c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d114      	bne.n	8007180 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01a      	beq.n	8007194 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3310      	adds	r3, #16
 8007162:	4618      	mov	r0, r3
 8007164:	f001 fd04 	bl	8008b70 <xTaskRemoveFromEventList>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d012      	beq.n	8007194 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800716e:	4b0d      	ldr	r3, [pc, #52]	@ (80071a4 <xQueueGenericReset+0xd0>)
 8007170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	e009      	b.n	8007194 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3310      	adds	r3, #16
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fef1 	bl	8006f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3324      	adds	r3, #36	@ 0x24
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff feec 	bl	8006f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007194:	f002 fd5a 	bl	8009c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007198:	2301      	movs	r3, #1
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	e000ed04 	.word	0xe000ed04

080071a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08e      	sub	sp, #56	@ 0x38
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10b      	bne.n	80071d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	e7fd      	b.n	80071d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	e7fd      	b.n	80071ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <xQueueGenericCreateStatic+0x56>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <xQueueGenericCreateStatic+0x5a>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <xQueueGenericCreateStatic+0x5c>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10b      	bne.n	8007220 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	623b      	str	r3, [r7, #32]
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	e7fd      	b.n	800721c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <xQueueGenericCreateStatic+0x84>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <xQueueGenericCreateStatic+0x88>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <xQueueGenericCreateStatic+0x8a>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10b      	bne.n	800724e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	61fb      	str	r3, [r7, #28]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800724e:	2350      	movs	r3, #80	@ 0x50
 8007250:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b50      	cmp	r3, #80	@ 0x50
 8007256:	d00b      	beq.n	8007270 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	61bb      	str	r3, [r7, #24]
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	e7fd      	b.n	800726c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007270:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00d      	beq.n	8007298 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007284:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f840 	bl	8007318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800729a:	4618      	mov	r0, r3
 800729c:	3730      	adds	r7, #48	@ 0x30
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b08a      	sub	sp, #40	@ 0x28
 80072a6:	af02      	add	r7, sp, #8
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	4613      	mov	r3, r2
 80072ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	613b      	str	r3, [r7, #16]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3350      	adds	r3, #80	@ 0x50
 80072dc:	4618      	mov	r0, r3
 80072de:	f002 fda5 	bl	8009e2c <pvPortMalloc>
 80072e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d011      	beq.n	800730e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	3350      	adds	r3, #80	@ 0x50
 80072f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072fc:	79fa      	ldrb	r2, [r7, #7]
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	4613      	mov	r3, r2
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f805 	bl	8007318 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800730e:	69bb      	ldr	r3, [r7, #24]
	}
 8007310:	4618      	mov	r0, r3
 8007312:	3720      	adds	r7, #32
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d103      	bne.n	8007334 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e002      	b.n	800733a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007346:	2101      	movs	r1, #1
 8007348:	69b8      	ldr	r0, [r7, #24]
 800734a:	f7ff fec3 	bl	80070d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	78fa      	ldrb	r2, [r7, #3]
 8007352:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800737e:	2300      	movs	r3, #0
 8007380:	2200      	movs	r2, #0
 8007382:	2100      	movs	r1, #0
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f911 	bl	80075ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	4603      	mov	r3, r0
 800739a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800739c:	2301      	movs	r3, #1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6939      	ldr	r1, [r7, #16]
 80073aa:	6978      	ldr	r0, [r7, #20]
 80073ac:	f7ff ff79 	bl	80072a2 <xQueueGenericCreate>
 80073b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff ffd3 	bl	800735e <prvInitialiseMutex>

		return xNewQueue;
 80073b8:	68fb      	ldr	r3, [r7, #12]
	}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af02      	add	r7, sp, #8
 80073c8:	4603      	mov	r3, r0
 80073ca:	6039      	str	r1, [r7, #0]
 80073cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073ce:	2301      	movs	r3, #1
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2200      	movs	r2, #0
 80073de:	6939      	ldr	r1, [r7, #16]
 80073e0:	6978      	ldr	r0, [r7, #20]
 80073e2:	f7ff fee1 	bl	80071a8 <xQueueGenericCreateStatic>
 80073e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7ff ffb8 	bl	800735e <prvInitialiseMutex>

		return xNewQueue;
 80073ee:	68fb      	ldr	r3, [r7, #12]
	}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	60fb      	str	r3, [r7, #12]
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	689c      	ldr	r4, [r3, #8]
 8007426:	f001 fd63 	bl	8008ef0 <xTaskGetCurrentTaskHandle>
 800742a:	4603      	mov	r3, r0
 800742c:	429c      	cmp	r4, r3
 800742e:	d111      	bne.n	8007454 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	1e5a      	subs	r2, r3, #1
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d105      	bne.n	800744e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007442:	2300      	movs	r3, #0
 8007444:	2200      	movs	r2, #0
 8007446:	2100      	movs	r1, #0
 8007448:	6938      	ldr	r0, [r7, #16]
 800744a:	f000 f8af 	bl	80075ac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800744e:	2301      	movs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e001      	b.n	8007458 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007454:	2300      	movs	r3, #0
 8007456:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007458:	697b      	ldr	r3, [r7, #20]
	}
 800745a:	4618      	mov	r0, r3
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	bd90      	pop	{r4, r7, pc}

08007462 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007462:	b590      	push	{r4, r7, lr}
 8007464:	b087      	sub	sp, #28
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60fb      	str	r3, [r7, #12]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	689c      	ldr	r4, [r3, #8]
 8007492:	f001 fd2d 	bl	8008ef0 <xTaskGetCurrentTaskHandle>
 8007496:	4603      	mov	r3, r0
 8007498:	429c      	cmp	r4, r3
 800749a:	d107      	bne.n	80074ac <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80074a6:	2301      	movs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
 80074aa:	e00c      	b.n	80074c6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6938      	ldr	r0, [r7, #16]
 80074b0:	f000 fb8e 	bl	8007bd0 <xQueueSemaphoreTake>
 80074b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80074c6:	697b      	ldr	r3, [r7, #20]
	}
 80074c8:	4618      	mov	r0, r3
 80074ca:	371c      	adds	r7, #28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd90      	pop	{r4, r7, pc}

080074d0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	@ 0x28
 80074d4:	af02      	add	r7, sp, #8
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	61bb      	str	r3, [r7, #24]
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
 80074f8:	e7fd      	b.n	80074f6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d90b      	bls.n	800751a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	617b      	str	r3, [r7, #20]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800751a:	2302      	movs	r3, #2
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	2100      	movs	r1, #0
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fe3f 	bl	80071a8 <xQueueGenericCreateStatic>
 800752a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007538:	69fb      	ldr	r3, [r7, #28]
	}
 800753a:	4618      	mov	r0, r3
 800753c:	3720      	adds	r7, #32
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	613b      	str	r3, [r7, #16]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	d90b      	bls.n	800758a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60fb      	str	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800758a:	2202      	movs	r2, #2
 800758c:	2100      	movs	r1, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fe87 	bl	80072a2 <xQueueGenericCreate>
 8007594:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80075a2:	697b      	ldr	r3, [r7, #20]
	}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08e      	sub	sp, #56	@ 0x38
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075ba:	2300      	movs	r3, #0
 80075bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xQueueGenericSend+0x34>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d103      	bne.n	80075ee <xQueueGenericSend+0x42>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <xQueueGenericSend+0x46>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <xQueueGenericSend+0x48>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <xQueueGenericSend+0x64>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d103      	bne.n	800761e <xQueueGenericSend+0x72>
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <xQueueGenericSend+0x76>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <xQueueGenericSend+0x78>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10b      	bne.n	8007640 <xQueueGenericSend+0x94>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	623b      	str	r3, [r7, #32]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007640:	f001 fc66 	bl	8008f10 <xTaskGetSchedulerState>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d102      	bne.n	8007650 <xQueueGenericSend+0xa4>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <xQueueGenericSend+0xa8>
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <xQueueGenericSend+0xaa>
 8007654:	2300      	movs	r3, #0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10b      	bne.n	8007672 <xQueueGenericSend+0xc6>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	61fb      	str	r3, [r7, #28]
}
 800766c:	bf00      	nop
 800766e:	bf00      	nop
 8007670:	e7fd      	b.n	800766e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007672:	f002 fab9 	bl	8009be8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800767e:	429a      	cmp	r2, r3
 8007680:	d302      	bcc.n	8007688 <xQueueGenericSend+0xdc>
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b02      	cmp	r3, #2
 8007686:	d129      	bne.n	80076dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800768e:	f000 fc6d 	bl	8007f6c <prvCopyDataToQueue>
 8007692:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	3324      	adds	r3, #36	@ 0x24
 80076a0:	4618      	mov	r0, r3
 80076a2:	f001 fa65 	bl	8008b70 <xTaskRemoveFromEventList>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d013      	beq.n	80076d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076ac:	4b3f      	ldr	r3, [pc, #252]	@ (80077ac <xQueueGenericSend+0x200>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	e00a      	b.n	80076d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d007      	beq.n	80076d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076c4:	4b39      	ldr	r3, [pc, #228]	@ (80077ac <xQueueGenericSend+0x200>)
 80076c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076d4:	f002 faba 	bl	8009c4c <vPortExitCritical>
				return pdPASS;
 80076d8:	2301      	movs	r3, #1
 80076da:	e063      	b.n	80077a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076e2:	f002 fab3 	bl	8009c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	e05c      	b.n	80077a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d106      	bne.n	80076fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076f0:	f107 0314 	add.w	r3, r7, #20
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 fa9f 	bl	8008c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076fa:	2301      	movs	r3, #1
 80076fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076fe:	f002 faa5 	bl	8009c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007702:	f001 f80f 	bl	8008724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007706:	f002 fa6f 	bl	8009be8 <vPortEnterCritical>
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007710:	b25b      	sxtb	r3, r3
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d103      	bne.n	8007720 <xQueueGenericSend+0x174>
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007722:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007726:	b25b      	sxtb	r3, r3
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d103      	bne.n	8007736 <xQueueGenericSend+0x18a>
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007736:	f002 fa89 	bl	8009c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800773a:	1d3a      	adds	r2, r7, #4
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	4611      	mov	r1, r2
 8007742:	4618      	mov	r0, r3
 8007744:	f001 fa8e 	bl	8008c64 <xTaskCheckForTimeOut>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d124      	bne.n	8007798 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800774e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007750:	f000 fd04 	bl	800815c <prvIsQueueFull>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	3310      	adds	r3, #16
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	4611      	mov	r1, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f001 f9b2 	bl	8008acc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800776a:	f000 fc8f 	bl	800808c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800776e:	f000 ffe7 	bl	8008740 <xTaskResumeAll>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	f47f af7c 	bne.w	8007672 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800777a:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <xQueueGenericSend+0x200>)
 800777c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	e772      	b.n	8007672 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800778c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800778e:	f000 fc7d 	bl	800808c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007792:	f000 ffd5 	bl	8008740 <xTaskResumeAll>
 8007796:	e76c      	b.n	8007672 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800779a:	f000 fc77 	bl	800808c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800779e:	f000 ffcf 	bl	8008740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3738      	adds	r7, #56	@ 0x38
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b090      	sub	sp, #64	@ 0x40
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80077c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10b      	bne.n	80077e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	e7fd      	b.n	80077dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <xQueueGenericSendFromISR+0x3e>
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <xQueueGenericSendFromISR+0x42>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <xQueueGenericSendFromISR+0x44>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	e7fd      	b.n	800780c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d103      	bne.n	800781e <xQueueGenericSendFromISR+0x6e>
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <xQueueGenericSendFromISR+0x72>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueGenericSendFromISR+0x74>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	623b      	str	r3, [r7, #32]
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	e7fd      	b.n	800783c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007840:	f002 fab2 	bl	8009da8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007844:	f3ef 8211 	mrs	r2, BASEPRI
 8007848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	61fa      	str	r2, [r7, #28]
 800785a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800785c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007868:	429a      	cmp	r2, r3
 800786a:	d302      	bcc.n	8007872 <xQueueGenericSendFromISR+0xc2>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d12f      	bne.n	80078d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007874:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007878:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007880:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007888:	f000 fb70 	bl	8007f6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800788c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007894:	d112      	bne.n	80078bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d016      	beq.n	80078cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	3324      	adds	r3, #36	@ 0x24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f964 	bl	8008b70 <xTaskRemoveFromEventList>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00e      	beq.n	80078cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e007      	b.n	80078cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80078c0:	3301      	adds	r3, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	b25a      	sxtb	r2, r3
 80078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80078cc:	2301      	movs	r3, #1
 80078ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80078d0:	e001      	b.n	80078d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3740      	adds	r7, #64	@ 0x40
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08e      	sub	sp, #56	@ 0x38
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	623b      	str	r3, [r7, #32]
}
 8007912:	bf00      	nop
 8007914:	bf00      	nop
 8007916:	e7fd      	b.n	8007914 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00b      	beq.n	8007938 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	61fb      	str	r3, [r7, #28]
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <xQueueGiveFromISR+0x5c>
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <xQueueGiveFromISR+0x60>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <xQueueGiveFromISR+0x62>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10b      	bne.n	800796a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	61bb      	str	r3, [r7, #24]
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800796a:	f002 fa1d 	bl	8009da8 <vPortValidateInterruptPriority>
	__asm volatile
 800796e:	f3ef 8211 	mrs	r2, BASEPRI
 8007972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	617a      	str	r2, [r7, #20]
 8007984:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007986:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007988:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007996:	429a      	cmp	r2, r3
 8007998:	d22b      	bcs.n	80079f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b4:	d112      	bne.n	80079dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d016      	beq.n	80079ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	3324      	adds	r3, #36	@ 0x24
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 f8d4 	bl	8008b70 <xTaskRemoveFromEventList>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00e      	beq.n	80079ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2201      	movs	r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	e007      	b.n	80079ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079e0:	3301      	adds	r3, #1
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	b25a      	sxtb	r2, r3
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079ec:	2301      	movs	r3, #1
 80079ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f0:	e001      	b.n	80079f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f383 8811 	msr	BASEPRI, r3
}
 8007a00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3738      	adds	r7, #56	@ 0x38
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08c      	sub	sp, #48	@ 0x30
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <xQueueReceive+0x32>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	623b      	str	r3, [r7, #32]
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	e7fd      	b.n	8007a3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <xQueueReceive+0x40>
 8007a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <xQueueReceive+0x44>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <xQueueReceive+0x46>
 8007a50:	2300      	movs	r3, #0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10b      	bne.n	8007a6e <xQueueReceive+0x62>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	61fb      	str	r3, [r7, #28]
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	e7fd      	b.n	8007a6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a6e:	f001 fa4f 	bl	8008f10 <xTaskGetSchedulerState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <xQueueReceive+0x72>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <xQueueReceive+0x76>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <xQueueReceive+0x78>
 8007a82:	2300      	movs	r3, #0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10b      	bne.n	8007aa0 <xQueueReceive+0x94>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	61bb      	str	r3, [r7, #24]
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	e7fd      	b.n	8007a9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aa0:	f002 f8a2 	bl	8009be8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01f      	beq.n	8007af0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ab4:	f000 fac4 	bl	8008040 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aba:	1e5a      	subs	r2, r3, #1
 8007abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00f      	beq.n	8007ae8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aca:	3310      	adds	r3, #16
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 f84f 	bl	8008b70 <xTaskRemoveFromEventList>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8007bcc <xQueueReceive+0x1c0>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ae8:	f002 f8b0 	bl	8009c4c <vPortExitCritical>
				return pdPASS;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e069      	b.n	8007bc4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007af6:	f002 f8a9 	bl	8009c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e062      	b.n	8007bc4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d106      	bne.n	8007b12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b04:	f107 0310 	add.w	r3, r7, #16
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 f895 	bl	8008c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b12:	f002 f89b 	bl	8009c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b16:	f000 fe05 	bl	8008724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b1a:	f002 f865 	bl	8009be8 <vPortEnterCritical>
 8007b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2a:	d103      	bne.n	8007b34 <xQueueReceive+0x128>
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b3a:	b25b      	sxtb	r3, r3
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b40:	d103      	bne.n	8007b4a <xQueueReceive+0x13e>
 8007b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b4a:	f002 f87f 	bl	8009c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b4e:	1d3a      	adds	r2, r7, #4
 8007b50:	f107 0310 	add.w	r3, r7, #16
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 f884 	bl	8008c64 <xTaskCheckForTimeOut>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d123      	bne.n	8007baa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b64:	f000 fae4 	bl	8008130 <prvIsQueueEmpty>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d017      	beq.n	8007b9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b70:	3324      	adds	r3, #36	@ 0x24
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 ffa8 	bl	8008acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b7e:	f000 fa85 	bl	800808c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b82:	f000 fddd 	bl	8008740 <xTaskResumeAll>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d189      	bne.n	8007aa0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bcc <xQueueReceive+0x1c0>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	e780      	b.n	8007aa0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ba0:	f000 fa74 	bl	800808c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ba4:	f000 fdcc 	bl	8008740 <xTaskResumeAll>
 8007ba8:	e77a      	b.n	8007aa0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bac:	f000 fa6e 	bl	800808c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bb0:	f000 fdc6 	bl	8008740 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb6:	f000 fabb 	bl	8008130 <prvIsQueueEmpty>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f43f af6f 	beq.w	8007aa0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3730      	adds	r7, #48	@ 0x30
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	e000ed04 	.word	0xe000ed04

08007bd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08e      	sub	sp, #56	@ 0x38
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10b      	bne.n	8007c04 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	623b      	str	r3, [r7, #32]
}
 8007bfe:	bf00      	nop
 8007c00:	bf00      	nop
 8007c02:	e7fd      	b.n	8007c00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00b      	beq.n	8007c24 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	61fb      	str	r3, [r7, #28]
}
 8007c1e:	bf00      	nop
 8007c20:	bf00      	nop
 8007c22:	e7fd      	b.n	8007c20 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c24:	f001 f974 	bl	8008f10 <xTaskGetSchedulerState>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <xQueueSemaphoreTake+0x64>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <xQueueSemaphoreTake+0x68>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e000      	b.n	8007c3a <xQueueSemaphoreTake+0x6a>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10b      	bne.n	8007c56 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	61bb      	str	r3, [r7, #24]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c56:	f001 ffc7 	bl	8009be8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d024      	beq.n	8007cb0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	1e5a      	subs	r2, r3, #1
 8007c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c76:	f001 fac5 	bl	8009204 <pvTaskIncrementMutexHeldCount>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00f      	beq.n	8007ca8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8a:	3310      	adds	r3, #16
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 ff6f 	bl	8008b70 <xTaskRemoveFromEventList>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c98:	4b54      	ldr	r3, [pc, #336]	@ (8007dec <xQueueSemaphoreTake+0x21c>)
 8007c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ca8:	f001 ffd0 	bl	8009c4c <vPortExitCritical>
				return pdPASS;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e098      	b.n	8007de2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d112      	bne.n	8007cdc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	617b      	str	r3, [r7, #20]
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007cd4:	f001 ffba 	bl	8009c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e082      	b.n	8007de2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 ffa6 	bl	8008c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cf0:	f001 ffac 	bl	8009c4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cf4:	f000 fd16 	bl	8008724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cf8:	f001 ff76 	bl	8009be8 <vPortEnterCritical>
 8007cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d02:	b25b      	sxtb	r3, r3
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d103      	bne.n	8007d12 <xQueueSemaphoreTake+0x142>
 8007d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1e:	d103      	bne.n	8007d28 <xQueueSemaphoreTake+0x158>
 8007d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d28:	f001 ff90 	bl	8009c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	f107 030c 	add.w	r3, r7, #12
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 ff95 	bl	8008c64 <xTaskCheckForTimeOut>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d132      	bne.n	8007da6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d42:	f000 f9f5 	bl	8008130 <prvIsQueueEmpty>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d026      	beq.n	8007d9a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007d54:	f001 ff48 	bl	8009be8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 f8f5 	bl	8008f4c <xTaskPriorityInherit>
 8007d62:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007d64:	f001 ff72 	bl	8009c4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6a:	3324      	adds	r3, #36	@ 0x24
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 feab 	bl	8008acc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d78:	f000 f988 	bl	800808c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d7c:	f000 fce0 	bl	8008740 <xTaskResumeAll>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f47f af67 	bne.w	8007c56 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007d88:	4b18      	ldr	r3, [pc, #96]	@ (8007dec <xQueueSemaphoreTake+0x21c>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	e75d      	b.n	8007c56 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d9c:	f000 f976 	bl	800808c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007da0:	f000 fcce 	bl	8008740 <xTaskResumeAll>
 8007da4:	e757      	b.n	8007c56 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007da6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007da8:	f000 f970 	bl	800808c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dac:	f000 fcc8 	bl	8008740 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007db2:	f000 f9bd 	bl	8008130 <prvIsQueueEmpty>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f43f af4c 	beq.w	8007c56 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00d      	beq.n	8007de0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007dc4:	f001 ff10 	bl	8009be8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007dc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dca:	f000 f8b7 	bl	8007f3c <prvGetDisinheritPriorityAfterTimeout>
 8007dce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f990 	bl	80090fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ddc:	f001 ff36 	bl	8009c4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007de0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3738      	adds	r7, #56	@ 0x38
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08e      	sub	sp, #56	@ 0x38
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	623b      	str	r3, [r7, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d103      	bne.n	8007e2c <xQueueReceiveFromISR+0x3c>
 8007e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <xQueueReceiveFromISR+0x40>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e000      	b.n	8007e32 <xQueueReceiveFromISR+0x42>
 8007e30:	2300      	movs	r3, #0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	61fb      	str	r3, [r7, #28]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e4e:	f001 ffab 	bl	8009da8 <vPortValidateInterruptPriority>
	__asm volatile
 8007e52:	f3ef 8211 	mrs	r2, BASEPRI
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	61ba      	str	r2, [r7, #24]
 8007e68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02f      	beq.n	8007eda <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e88:	f000 f8da 	bl	8008040 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d112      	bne.n	8007ec4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d016      	beq.n	8007ed4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	3310      	adds	r3, #16
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fe60 	bl	8008b70 <xTaskRemoveFromEventList>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00e      	beq.n	8007ed4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e007      	b.n	8007ed4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	b25a      	sxtb	r2, r3
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed8:	e001      	b.n	8007ede <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f383 8811 	msr	BASEPRI, r3
}
 8007ee8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3738      	adds	r7, #56	@ 0x38
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <vQueueDelete+0x2a>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60bb      	str	r3, [r7, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f95e 	bl	80081e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d102      	bne.n	8007f34 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f002 f84a 	bl	8009fc8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007f34:	bf00      	nop
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d006      	beq.n	8007f5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	e001      	b.n	8007f5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
	}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10d      	bne.n	8007fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d14d      	bne.n	800802e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 f840 	bl	800901c <xTaskPriorityDisinherit>
 8007f9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	609a      	str	r2, [r3, #8]
 8007fa4:	e043      	b.n	800802e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d119      	bne.n	8007fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6858      	ldr	r0, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	f002 fc1d 	bl	800a7f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	441a      	add	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d32b      	bcc.n	800802e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	605a      	str	r2, [r3, #4]
 8007fde:	e026      	b.n	800802e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	68d8      	ldr	r0, [r3, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	f002 fc03 	bl	800a7f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff8:	425b      	negs	r3, r3
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d207      	bcs.n	800801c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008014:	425b      	negs	r3, r3
 8008016:	441a      	add	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d105      	bne.n	800802e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	3b01      	subs	r3, #1
 800802c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008036:	697b      	ldr	r3, [r7, #20]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d018      	beq.n	8008084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805a:	441a      	add	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	d303      	bcc.n	8008074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68d9      	ldr	r1, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807c:	461a      	mov	r2, r3
 800807e:	6838      	ldr	r0, [r7, #0]
 8008080:	f002 fbb9 	bl	800a7f6 <memcpy>
	}
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008094:	f001 fda8 	bl	8009be8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800809e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080a0:	e011      	b.n	80080c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d012      	beq.n	80080d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3324      	adds	r3, #36	@ 0x24
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 fd5e 	bl	8008b70 <xTaskRemoveFromEventList>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080ba:	f000 fe37 	bl	8008d2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dce9      	bgt.n	80080a2 <prvUnlockQueue+0x16>
 80080ce:	e000      	b.n	80080d2 <prvUnlockQueue+0x46>
					break;
 80080d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	22ff      	movs	r2, #255	@ 0xff
 80080d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080da:	f001 fdb7 	bl	8009c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080de:	f001 fd83 	bl	8009be8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ea:	e011      	b.n	8008110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d012      	beq.n	800811a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3310      	adds	r3, #16
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 fd39 	bl	8008b70 <xTaskRemoveFromEventList>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008104:	f000 fe12 	bl	8008d2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	3b01      	subs	r3, #1
 800810c:	b2db      	uxtb	r3, r3
 800810e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dce9      	bgt.n	80080ec <prvUnlockQueue+0x60>
 8008118:	e000      	b.n	800811c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800811a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	22ff      	movs	r2, #255	@ 0xff
 8008120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008124:	f001 fd92 	bl	8009c4c <vPortExitCritical>
}
 8008128:	bf00      	nop
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008138:	f001 fd56 	bl	8009be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e001      	b.n	800814e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800814e:	f001 fd7d 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 8008152:	68fb      	ldr	r3, [r7, #12]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008164:	f001 fd40 	bl	8009be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008170:	429a      	cmp	r2, r3
 8008172:	d102      	bne.n	800817a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008174:	2301      	movs	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	e001      	b.n	800817e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800817e:	f001 fd65 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 8008182:	68fb      	ldr	r3, [r7, #12]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	e014      	b.n	80081c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800819c:	4a0f      	ldr	r2, [pc, #60]	@ (80081dc <vQueueAddToRegistry+0x50>)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10b      	bne.n	80081c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081a8:	490c      	ldr	r1, [pc, #48]	@ (80081dc <vQueueAddToRegistry+0x50>)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081b2:	4a0a      	ldr	r2, [pc, #40]	@ (80081dc <vQueueAddToRegistry+0x50>)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	4413      	add	r3, r2
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081be:	e006      	b.n	80081ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b07      	cmp	r3, #7
 80081ca:	d9e7      	bls.n	800819c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20001ad8 	.word	0x20001ad8

080081e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	e016      	b.n	800821c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081ee:	4a10      	ldr	r2, [pc, #64]	@ (8008230 <vQueueUnregisterQueue+0x50>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4413      	add	r3, r2
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d10b      	bne.n	8008216 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80081fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008230 <vQueueUnregisterQueue+0x50>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2100      	movs	r1, #0
 8008204:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008208:	4a09      	ldr	r2, [pc, #36]	@ (8008230 <vQueueUnregisterQueue+0x50>)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	4413      	add	r3, r2
 8008210:	2200      	movs	r2, #0
 8008212:	605a      	str	r2, [r3, #4]
				break;
 8008214:	e006      	b.n	8008224 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b07      	cmp	r3, #7
 8008220:	d9e5      	bls.n	80081ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	20001ad8 	.word	0x20001ad8

08008234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008244:	f001 fcd0 	bl	8009be8 <vPortEnterCritical>
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800824e:	b25b      	sxtb	r3, r3
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d103      	bne.n	800825e <vQueueWaitForMessageRestricted+0x2a>
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008264:	b25b      	sxtb	r3, r3
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d103      	bne.n	8008274 <vQueueWaitForMessageRestricted+0x40>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008274:	f001 fcea 	bl	8009c4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	3324      	adds	r3, #36	@ 0x24
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fc45 	bl	8008b18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800828e:	6978      	ldr	r0, [r7, #20]
 8008290:	f7ff fefc 	bl	800808c <prvUnlockQueue>
	}
 8008294:	bf00      	nop
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08e      	sub	sp, #56	@ 0x38
 80082a0:	af04      	add	r7, sp, #16
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10b      	bne.n	80082c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	623b      	str	r3, [r7, #32]
}
 80082c2:	bf00      	nop
 80082c4:	bf00      	nop
 80082c6:	e7fd      	b.n	80082c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10b      	bne.n	80082e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	61fb      	str	r3, [r7, #28]
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	e7fd      	b.n	80082e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082e6:	235c      	movs	r3, #92	@ 0x5c
 80082e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80082ee:	d00b      	beq.n	8008308 <xTaskCreateStatic+0x6c>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	61bb      	str	r3, [r7, #24]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008308:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800830a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01e      	beq.n	800834e <xTaskCreateStatic+0xb2>
 8008310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01b      	beq.n	800834e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800831e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008328:	2300      	movs	r3, #0
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 f850 	bl	80083e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008348:	f000 f8de 	bl	8008508 <prvAddNewTaskToReadyList>
 800834c:	e001      	b.n	8008352 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008352:	697b      	ldr	r3, [r7, #20]
	}
 8008354:	4618      	mov	r0, r3
 8008356:	3728      	adds	r7, #40	@ 0x28
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08c      	sub	sp, #48	@ 0x30
 8008360:	af04      	add	r7, sp, #16
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4618      	mov	r0, r3
 8008372:	f001 fd5b 	bl	8009e2c <pvPortMalloc>
 8008376:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00e      	beq.n	800839c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800837e:	205c      	movs	r0, #92	@ 0x5c
 8008380:	f001 fd54 	bl	8009e2c <pvPortMalloc>
 8008384:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	631a      	str	r2, [r3, #48]	@ 0x30
 8008392:	e005      	b.n	80083a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008394:	6978      	ldr	r0, [r7, #20]
 8008396:	f001 fe17 	bl	8009fc8 <vPortFree>
 800839a:	e001      	b.n	80083a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d017      	beq.n	80083d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083ae:	88fa      	ldrh	r2, [r7, #6]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 f80e 	bl	80083e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083ca:	69f8      	ldr	r0, [r7, #28]
 80083cc:	f000 f89c 	bl	8008508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083d0:	2301      	movs	r3, #1
 80083d2:	61bb      	str	r3, [r7, #24]
 80083d4:	e002      	b.n	80083dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
 80083da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083dc:	69bb      	ldr	r3, [r7, #24]
	}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b088      	sub	sp, #32
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	607a      	str	r2, [r7, #4]
 80083f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	461a      	mov	r2, r3
 80083fe:	21a5      	movs	r1, #165	@ 0xa5
 8008400:	f002 f968 	bl	800a6d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800840e:	3b01      	subs	r3, #1
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f023 0307 	bic.w	r3, r3, #7
 800841c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	f003 0307 	and.w	r3, r3, #7
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	617b      	str	r3, [r7, #20]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d01f      	beq.n	8008486 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
 800844a:	e012      	b.n	8008472 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	4413      	add	r3, r2
 8008452:	7819      	ldrb	r1, [r3, #0]
 8008454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	4413      	add	r3, r2
 800845a:	3334      	adds	r3, #52	@ 0x34
 800845c:	460a      	mov	r2, r1
 800845e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	3301      	adds	r3, #1
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	2b0f      	cmp	r3, #15
 8008476:	d9e9      	bls.n	800844c <prvInitialiseNewTask+0x66>
 8008478:	e000      	b.n	800847c <prvInitialiseNewTask+0x96>
			{
				break;
 800847a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008484:	e003      	b.n	800848e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	2b37      	cmp	r3, #55	@ 0x37
 8008492:	d901      	bls.n	8008498 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008494:	2337      	movs	r3, #55	@ 0x37
 8008496:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800849c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	2200      	movs	r2, #0
 80084a8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	3304      	adds	r3, #4
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fd7c 	bl	8006fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b6:	3318      	adds	r3, #24
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe fd77 	bl	8006fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	2200      	movs	r2, #0
 80084d8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	68f9      	ldr	r1, [r7, #12]
 80084e6:	69b8      	ldr	r0, [r7, #24]
 80084e8:	f001 fa4e 	bl	8009988 <pxPortInitialiseStack>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084fe:	bf00      	nop
 8008500:	3720      	adds	r7, #32
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008510:	f001 fb6a 	bl	8009be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008514:	4b2d      	ldr	r3, [pc, #180]	@ (80085cc <prvAddNewTaskToReadyList+0xc4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	4a2c      	ldr	r2, [pc, #176]	@ (80085cc <prvAddNewTaskToReadyList+0xc4>)
 800851c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800851e:	4b2c      	ldr	r3, [pc, #176]	@ (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008526:	4a2a      	ldr	r2, [pc, #168]	@ (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800852c:	4b27      	ldr	r3, [pc, #156]	@ (80085cc <prvAddNewTaskToReadyList+0xc4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d110      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008534:	f000 fc1e 	bl	8008d74 <prvInitialiseTaskLists>
 8008538:	e00d      	b.n	8008556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800853a:	4b26      	ldr	r3, [pc, #152]	@ (80085d4 <prvAddNewTaskToReadyList+0xcc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008542:	4b23      	ldr	r3, [pc, #140]	@ (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d802      	bhi.n	8008556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008550:	4a1f      	ldr	r2, [pc, #124]	@ (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008556:	4b20      	ldr	r3, [pc, #128]	@ (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	4a1e      	ldr	r2, [pc, #120]	@ (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 800855e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008560:	4b1d      	ldr	r3, [pc, #116]	@ (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800856c:	4b1b      	ldr	r3, [pc, #108]	@ (80085dc <prvAddNewTaskToReadyList+0xd4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <prvAddNewTaskToReadyList+0x74>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	4a18      	ldr	r2, [pc, #96]	@ (80085dc <prvAddNewTaskToReadyList+0xd4>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a15      	ldr	r2, [pc, #84]	@ (80085e0 <prvAddNewTaskToReadyList+0xd8>)
 800858a:	441a      	add	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fd17 	bl	8006fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008598:	f001 fb58 	bl	8009c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800859c:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <prvAddNewTaskToReadyList+0xcc>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00e      	beq.n	80085c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085a4:	4b0a      	ldr	r3, [pc, #40]	@ (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d207      	bcs.n	80085c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085b2:	4b0c      	ldr	r3, [pc, #48]	@ (80085e4 <prvAddNewTaskToReadyList+0xdc>)
 80085b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20001fec 	.word	0x20001fec
 80085d0:	20001b18 	.word	0x20001b18
 80085d4:	20001ff8 	.word	0x20001ff8
 80085d8:	20002008 	.word	0x20002008
 80085dc:	20001ff4 	.word	0x20001ff4
 80085e0:	20001b1c 	.word	0x20001b1c
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d018      	beq.n	800862c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085fa:	4b14      	ldr	r3, [pc, #80]	@ (800864c <vTaskDelay+0x64>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <vTaskDelay+0x32>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800861a:	f000 f883 	bl	8008724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fe03 	bl	800922c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008626:	f000 f88b 	bl	8008740 <xTaskResumeAll>
 800862a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d107      	bne.n	8008642 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008632:	4b07      	ldr	r3, [pc, #28]	@ (8008650 <vTaskDelay+0x68>)
 8008634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008642:	bf00      	nop
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20002014 	.word	0x20002014
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	@ 0x28
 8008658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008662:	463a      	mov	r2, r7
 8008664:	1d39      	adds	r1, r7, #4
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fc4a 	bl	8006f04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	9202      	str	r2, [sp, #8]
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	2300      	movs	r3, #0
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2300      	movs	r3, #0
 8008680:	460a      	mov	r2, r1
 8008682:	4922      	ldr	r1, [pc, #136]	@ (800870c <vTaskStartScheduler+0xb8>)
 8008684:	4822      	ldr	r0, [pc, #136]	@ (8008710 <vTaskStartScheduler+0xbc>)
 8008686:	f7ff fe09 	bl	800829c <xTaskCreateStatic>
 800868a:	4603      	mov	r3, r0
 800868c:	4a21      	ldr	r2, [pc, #132]	@ (8008714 <vTaskStartScheduler+0xc0>)
 800868e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008690:	4b20      	ldr	r3, [pc, #128]	@ (8008714 <vTaskStartScheduler+0xc0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008698:	2301      	movs	r3, #1
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	e001      	b.n	80086a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d102      	bne.n	80086ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086a8:	f000 fe14 	bl	80092d4 <xTimerCreateTimerTask>
 80086ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d116      	bne.n	80086e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	613b      	str	r3, [r7, #16]
}
 80086c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086c8:	4b13      	ldr	r3, [pc, #76]	@ (8008718 <vTaskStartScheduler+0xc4>)
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086d0:	4b12      	ldr	r3, [pc, #72]	@ (800871c <vTaskStartScheduler+0xc8>)
 80086d2:	2201      	movs	r2, #1
 80086d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086d6:	4b12      	ldr	r3, [pc, #72]	@ (8008720 <vTaskStartScheduler+0xcc>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086dc:	f001 f9e0 	bl	8009aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086e0:	e00f      	b.n	8008702 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e8:	d10b      	bne.n	8008702 <vTaskStartScheduler+0xae>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60fb      	str	r3, [r7, #12]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <vTaskStartScheduler+0xaa>
}
 8008702:	bf00      	nop
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	0800c550 	.word	0x0800c550
 8008710:	08008d45 	.word	0x08008d45
 8008714:	20002010 	.word	0x20002010
 8008718:	2000200c 	.word	0x2000200c
 800871c:	20001ff8 	.word	0x20001ff8
 8008720:	20001ff0 	.word	0x20001ff0

08008724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008728:	4b04      	ldr	r3, [pc, #16]	@ (800873c <vTaskSuspendAll+0x18>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	4a03      	ldr	r2, [pc, #12]	@ (800873c <vTaskSuspendAll+0x18>)
 8008730:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008732:	bf00      	nop
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	20002014 	.word	0x20002014

08008740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800874a:	2300      	movs	r3, #0
 800874c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800874e:	4b42      	ldr	r3, [pc, #264]	@ (8008858 <xTaskResumeAll+0x118>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10b      	bne.n	800876e <xTaskResumeAll+0x2e>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	603b      	str	r3, [r7, #0]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800876e:	f001 fa3b 	bl	8009be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008772:	4b39      	ldr	r3, [pc, #228]	@ (8008858 <xTaskResumeAll+0x118>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3b01      	subs	r3, #1
 8008778:	4a37      	ldr	r2, [pc, #220]	@ (8008858 <xTaskResumeAll+0x118>)
 800877a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800877c:	4b36      	ldr	r3, [pc, #216]	@ (8008858 <xTaskResumeAll+0x118>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d162      	bne.n	800884a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008784:	4b35      	ldr	r3, [pc, #212]	@ (800885c <xTaskResumeAll+0x11c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05e      	beq.n	800884a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800878c:	e02f      	b.n	80087ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878e:	4b34      	ldr	r3, [pc, #208]	@ (8008860 <xTaskResumeAll+0x120>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3318      	adds	r3, #24
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fc70 	bl	8007080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3304      	adds	r3, #4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fc6b 	bl	8007080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008864 <xTaskResumeAll+0x124>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d903      	bls.n	80087be <xTaskResumeAll+0x7e>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008864 <xTaskResumeAll+0x124>)
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c2:	4613      	mov	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4a27      	ldr	r2, [pc, #156]	@ (8008868 <xTaskResumeAll+0x128>)
 80087cc:	441a      	add	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3304      	adds	r3, #4
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f7fe fbf6 	bl	8006fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087de:	4b23      	ldr	r3, [pc, #140]	@ (800886c <xTaskResumeAll+0x12c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d302      	bcc.n	80087ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80087e8:	4b21      	ldr	r3, [pc, #132]	@ (8008870 <xTaskResumeAll+0x130>)
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008860 <xTaskResumeAll+0x120>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1cb      	bne.n	800878e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087fc:	f000 fb58 	bl	8008eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008800:	4b1c      	ldr	r3, [pc, #112]	@ (8008874 <xTaskResumeAll+0x134>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d010      	beq.n	800882e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800880c:	f000 f846 	bl	800889c <xTaskIncrementTick>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008816:	4b16      	ldr	r3, [pc, #88]	@ (8008870 <xTaskResumeAll+0x130>)
 8008818:	2201      	movs	r2, #1
 800881a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3b01      	subs	r3, #1
 8008820:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1f1      	bne.n	800880c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008828:	4b12      	ldr	r3, [pc, #72]	@ (8008874 <xTaskResumeAll+0x134>)
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800882e:	4b10      	ldr	r3, [pc, #64]	@ (8008870 <xTaskResumeAll+0x130>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008836:	2301      	movs	r3, #1
 8008838:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800883a:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <xTaskResumeAll+0x138>)
 800883c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800884a:	f001 f9ff 	bl	8009c4c <vPortExitCritical>

	return xAlreadyYielded;
 800884e:	68bb      	ldr	r3, [r7, #8]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20002014 	.word	0x20002014
 800885c:	20001fec 	.word	0x20001fec
 8008860:	20001fac 	.word	0x20001fac
 8008864:	20001ff4 	.word	0x20001ff4
 8008868:	20001b1c 	.word	0x20001b1c
 800886c:	20001b18 	.word	0x20001b18
 8008870:	20002000 	.word	0x20002000
 8008874:	20001ffc 	.word	0x20001ffc
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008882:	4b05      	ldr	r3, [pc, #20]	@ (8008898 <xTaskGetTickCount+0x1c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008888:	687b      	ldr	r3, [r7, #4]
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	20001ff0 	.word	0x20001ff0

0800889c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088a6:	4b4f      	ldr	r3, [pc, #316]	@ (80089e4 <xTaskIncrementTick+0x148>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 8090 	bne.w	80089d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088b0:	4b4d      	ldr	r3, [pc, #308]	@ (80089e8 <xTaskIncrementTick+0x14c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3301      	adds	r3, #1
 80088b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088b8:	4a4b      	ldr	r2, [pc, #300]	@ (80089e8 <xTaskIncrementTick+0x14c>)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d121      	bne.n	8008908 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80088c4:	4b49      	ldr	r3, [pc, #292]	@ (80089ec <xTaskIncrementTick+0x150>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00b      	beq.n	80088e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	603b      	str	r3, [r7, #0]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <xTaskIncrementTick+0x46>
 80088e6:	4b41      	ldr	r3, [pc, #260]	@ (80089ec <xTaskIncrementTick+0x150>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	4b40      	ldr	r3, [pc, #256]	@ (80089f0 <xTaskIncrementTick+0x154>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a3e      	ldr	r2, [pc, #248]	@ (80089ec <xTaskIncrementTick+0x150>)
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	4a3e      	ldr	r2, [pc, #248]	@ (80089f0 <xTaskIncrementTick+0x154>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	4b3e      	ldr	r3, [pc, #248]	@ (80089f4 <xTaskIncrementTick+0x158>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3301      	adds	r3, #1
 8008900:	4a3c      	ldr	r2, [pc, #240]	@ (80089f4 <xTaskIncrementTick+0x158>)
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	f000 fad4 	bl	8008eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008908:	4b3b      	ldr	r3, [pc, #236]	@ (80089f8 <xTaskIncrementTick+0x15c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	429a      	cmp	r2, r3
 8008910:	d349      	bcc.n	80089a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008912:	4b36      	ldr	r3, [pc, #216]	@ (80089ec <xTaskIncrementTick+0x150>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d104      	bne.n	8008926 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800891c:	4b36      	ldr	r3, [pc, #216]	@ (80089f8 <xTaskIncrementTick+0x15c>)
 800891e:	f04f 32ff 	mov.w	r2, #4294967295
 8008922:	601a      	str	r2, [r3, #0]
					break;
 8008924:	e03f      	b.n	80089a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008926:	4b31      	ldr	r3, [pc, #196]	@ (80089ec <xTaskIncrementTick+0x150>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d203      	bcs.n	8008946 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800893e:	4a2e      	ldr	r2, [pc, #184]	@ (80089f8 <xTaskIncrementTick+0x15c>)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008944:	e02f      	b.n	80089a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	3304      	adds	r3, #4
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fb98 	bl	8007080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008954:	2b00      	cmp	r3, #0
 8008956:	d004      	beq.n	8008962 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	3318      	adds	r3, #24
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe fb8f 	bl	8007080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008966:	4b25      	ldr	r3, [pc, #148]	@ (80089fc <xTaskIncrementTick+0x160>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d903      	bls.n	8008976 <xTaskIncrementTick+0xda>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008972:	4a22      	ldr	r2, [pc, #136]	@ (80089fc <xTaskIncrementTick+0x160>)
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4a1f      	ldr	r2, [pc, #124]	@ (8008a00 <xTaskIncrementTick+0x164>)
 8008984:	441a      	add	r2, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	3304      	adds	r3, #4
 800898a:	4619      	mov	r1, r3
 800898c:	4610      	mov	r0, r2
 800898e:	f7fe fb1a 	bl	8006fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008996:	4b1b      	ldr	r3, [pc, #108]	@ (8008a04 <xTaskIncrementTick+0x168>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d3b8      	bcc.n	8008912 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a4:	e7b5      	b.n	8008912 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089a6:	4b17      	ldr	r3, [pc, #92]	@ (8008a04 <xTaskIncrementTick+0x168>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ac:	4914      	ldr	r1, [pc, #80]	@ (8008a00 <xTaskIncrementTick+0x164>)
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d901      	bls.n	80089c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80089be:	2301      	movs	r3, #1
 80089c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089c2:	4b11      	ldr	r3, [pc, #68]	@ (8008a08 <xTaskIncrementTick+0x16c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d007      	beq.n	80089da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80089ca:	2301      	movs	r3, #1
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	e004      	b.n	80089da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089d0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a0c <xTaskIncrementTick+0x170>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3301      	adds	r3, #1
 80089d6:	4a0d      	ldr	r2, [pc, #52]	@ (8008a0c <xTaskIncrementTick+0x170>)
 80089d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089da:	697b      	ldr	r3, [r7, #20]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20002014 	.word	0x20002014
 80089e8:	20001ff0 	.word	0x20001ff0
 80089ec:	20001fa4 	.word	0x20001fa4
 80089f0:	20001fa8 	.word	0x20001fa8
 80089f4:	20002004 	.word	0x20002004
 80089f8:	2000200c 	.word	0x2000200c
 80089fc:	20001ff4 	.word	0x20001ff4
 8008a00:	20001b1c 	.word	0x20001b1c
 8008a04:	20001b18 	.word	0x20001b18
 8008a08:	20002000 	.word	0x20002000
 8008a0c:	20001ffc 	.word	0x20001ffc

08008a10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a16:	4b28      	ldr	r3, [pc, #160]	@ (8008ab8 <vTaskSwitchContext+0xa8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a1e:	4b27      	ldr	r3, [pc, #156]	@ (8008abc <vTaskSwitchContext+0xac>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a24:	e042      	b.n	8008aac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008a26:	4b25      	ldr	r3, [pc, #148]	@ (8008abc <vTaskSwitchContext+0xac>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a2c:	4b24      	ldr	r3, [pc, #144]	@ (8008ac0 <vTaskSwitchContext+0xb0>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	e011      	b.n	8008a58 <vTaskSwitchContext+0x48>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10b      	bne.n	8008a52 <vTaskSwitchContext+0x42>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	607b      	str	r3, [r7, #4]
}
 8008a4c:	bf00      	nop
 8008a4e:	bf00      	nop
 8008a50:	e7fd      	b.n	8008a4e <vTaskSwitchContext+0x3e>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	491a      	ldr	r1, [pc, #104]	@ (8008ac4 <vTaskSwitchContext+0xb4>)
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d0e3      	beq.n	8008a34 <vTaskSwitchContext+0x24>
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4a13      	ldr	r2, [pc, #76]	@ (8008ac4 <vTaskSwitchContext+0xb4>)
 8008a78:	4413      	add	r3, r2
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	605a      	str	r2, [r3, #4]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d104      	bne.n	8008a9c <vTaskSwitchContext+0x8c>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	605a      	str	r2, [r3, #4]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	4a09      	ldr	r2, [pc, #36]	@ (8008ac8 <vTaskSwitchContext+0xb8>)
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	4a06      	ldr	r2, [pc, #24]	@ (8008ac0 <vTaskSwitchContext+0xb0>)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6013      	str	r3, [r2, #0]
}
 8008aac:	bf00      	nop
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	20002014 	.word	0x20002014
 8008abc:	20002000 	.word	0x20002000
 8008ac0:	20001ff4 	.word	0x20001ff4
 8008ac4:	20001b1c 	.word	0x20001b1c
 8008ac8:	20001b18 	.word	0x20001b18

08008acc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10b      	bne.n	8008af4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	60fb      	str	r3, [r7, #12]
}
 8008aee:	bf00      	nop
 8008af0:	bf00      	nop
 8008af2:	e7fd      	b.n	8008af0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008af4:	4b07      	ldr	r3, [pc, #28]	@ (8008b14 <vTaskPlaceOnEventList+0x48>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3318      	adds	r3, #24
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7fe fa86 	bl	800700e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b02:	2101      	movs	r1, #1
 8008b04:	6838      	ldr	r0, [r7, #0]
 8008b06:	f000 fb91 	bl	800922c <prvAddCurrentTaskToDelayedList>
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20001b18 	.word	0x20001b18

08008b18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10b      	bne.n	8008b42 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	617b      	str	r3, [r7, #20]
}
 8008b3c:	bf00      	nop
 8008b3e:	bf00      	nop
 8008b40:	e7fd      	b.n	8008b3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b42:	4b0a      	ldr	r3, [pc, #40]	@ (8008b6c <vTaskPlaceOnEventListRestricted+0x54>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3318      	adds	r3, #24
 8008b48:	4619      	mov	r1, r3
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7fe fa3b 	bl	8006fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b56:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	68b8      	ldr	r0, [r7, #8]
 8008b60:	f000 fb64 	bl	800922c <prvAddCurrentTaskToDelayedList>
	}
 8008b64:	bf00      	nop
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20001b18 	.word	0x20001b18

08008b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10b      	bne.n	8008b9e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60fb      	str	r3, [r7, #12]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	3318      	adds	r3, #24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe fa6c 	bl	8007080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c20 <xTaskRemoveFromEventList+0xb0>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d11d      	bne.n	8008bec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fa63 	bl	8007080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bbe:	4b19      	ldr	r3, [pc, #100]	@ (8008c24 <xTaskRemoveFromEventList+0xb4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d903      	bls.n	8008bce <xTaskRemoveFromEventList+0x5e>
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bca:	4a16      	ldr	r2, [pc, #88]	@ (8008c24 <xTaskRemoveFromEventList+0xb4>)
 8008bcc:	6013      	str	r3, [r2, #0]
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4a13      	ldr	r2, [pc, #76]	@ (8008c28 <xTaskRemoveFromEventList+0xb8>)
 8008bdc:	441a      	add	r2, r3
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	3304      	adds	r3, #4
 8008be2:	4619      	mov	r1, r3
 8008be4:	4610      	mov	r0, r2
 8008be6:	f7fe f9ee 	bl	8006fc6 <vListInsertEnd>
 8008bea:	e005      	b.n	8008bf8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	3318      	adds	r3, #24
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	480e      	ldr	r0, [pc, #56]	@ (8008c2c <xTaskRemoveFromEventList+0xbc>)
 8008bf4:	f7fe f9e7 	bl	8006fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <xTaskRemoveFromEventList+0xc0>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d905      	bls.n	8008c12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c06:	2301      	movs	r3, #1
 8008c08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c34 <xTaskRemoveFromEventList+0xc4>)
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]
 8008c10:	e001      	b.n	8008c16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c16:	697b      	ldr	r3, [r7, #20]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	20002014 	.word	0x20002014
 8008c24:	20001ff4 	.word	0x20001ff4
 8008c28:	20001b1c 	.word	0x20001b1c
 8008c2c:	20001fac 	.word	0x20001fac
 8008c30:	20001b18 	.word	0x20001b18
 8008c34:	20002000 	.word	0x20002000

08008c38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c40:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <vTaskInternalSetTimeOutState+0x24>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <vTaskInternalSetTimeOutState+0x28>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	605a      	str	r2, [r3, #4]
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	20002004 	.word	0x20002004
 8008c60:	20001ff0 	.word	0x20001ff0

08008c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	613b      	str	r3, [r7, #16]
}
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	e7fd      	b.n	8008c88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10b      	bne.n	8008caa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60fb      	str	r3, [r7, #12]
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	e7fd      	b.n	8008ca6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008caa:	f000 ff9d 	bl	8009be8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cae:	4b1d      	ldr	r3, [pc, #116]	@ (8008d24 <xTaskCheckForTimeOut+0xc0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc6:	d102      	bne.n	8008cce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e023      	b.n	8008d16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b15      	ldr	r3, [pc, #84]	@ (8008d28 <xTaskCheckForTimeOut+0xc4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d007      	beq.n	8008cea <xTaskCheckForTimeOut+0x86>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d302      	bcc.n	8008cea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	e015      	b.n	8008d16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d20b      	bcs.n	8008d0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	1ad2      	subs	r2, r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff99 	bl	8008c38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	e004      	b.n	8008d16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d12:	2301      	movs	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d16:	f000 ff99 	bl	8009c4c <vPortExitCritical>

	return xReturn;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20001ff0 	.word	0x20001ff0
 8008d28:	20002004 	.word	0x20002004

08008d2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d30:	4b03      	ldr	r3, [pc, #12]	@ (8008d40 <vTaskMissedYield+0x14>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
}
 8008d36:	bf00      	nop
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	20002000 	.word	0x20002000

08008d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d4c:	f000 f852 	bl	8008df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d50:	4b06      	ldr	r3, [pc, #24]	@ (8008d6c <prvIdleTask+0x28>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d9f9      	bls.n	8008d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d58:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <prvIdleTask+0x2c>)
 8008d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d68:	e7f0      	b.n	8008d4c <prvIdleTask+0x8>
 8008d6a:	bf00      	nop
 8008d6c:	20001b1c 	.word	0x20001b1c
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	607b      	str	r3, [r7, #4]
 8008d7e:	e00c      	b.n	8008d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4a12      	ldr	r2, [pc, #72]	@ (8008dd4 <prvInitialiseTaskLists+0x60>)
 8008d8c:	4413      	add	r3, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe f8ec 	bl	8006f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3301      	adds	r3, #1
 8008d98:	607b      	str	r3, [r7, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b37      	cmp	r3, #55	@ 0x37
 8008d9e:	d9ef      	bls.n	8008d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008da0:	480d      	ldr	r0, [pc, #52]	@ (8008dd8 <prvInitialiseTaskLists+0x64>)
 8008da2:	f7fe f8e3 	bl	8006f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008da6:	480d      	ldr	r0, [pc, #52]	@ (8008ddc <prvInitialiseTaskLists+0x68>)
 8008da8:	f7fe f8e0 	bl	8006f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dac:	480c      	ldr	r0, [pc, #48]	@ (8008de0 <prvInitialiseTaskLists+0x6c>)
 8008dae:	f7fe f8dd 	bl	8006f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008db2:	480c      	ldr	r0, [pc, #48]	@ (8008de4 <prvInitialiseTaskLists+0x70>)
 8008db4:	f7fe f8da 	bl	8006f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008db8:	480b      	ldr	r0, [pc, #44]	@ (8008de8 <prvInitialiseTaskLists+0x74>)
 8008dba:	f7fe f8d7 	bl	8006f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008dec <prvInitialiseTaskLists+0x78>)
 8008dc0:	4a05      	ldr	r2, [pc, #20]	@ (8008dd8 <prvInitialiseTaskLists+0x64>)
 8008dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008df0 <prvInitialiseTaskLists+0x7c>)
 8008dc6:	4a05      	ldr	r2, [pc, #20]	@ (8008ddc <prvInitialiseTaskLists+0x68>)
 8008dc8:	601a      	str	r2, [r3, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20001b1c 	.word	0x20001b1c
 8008dd8:	20001f7c 	.word	0x20001f7c
 8008ddc:	20001f90 	.word	0x20001f90
 8008de0:	20001fac 	.word	0x20001fac
 8008de4:	20001fc0 	.word	0x20001fc0
 8008de8:	20001fd8 	.word	0x20001fd8
 8008dec:	20001fa4 	.word	0x20001fa4
 8008df0:	20001fa8 	.word	0x20001fa8

08008df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dfa:	e019      	b.n	8008e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dfc:	f000 fef4 	bl	8009be8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e00:	4b10      	ldr	r3, [pc, #64]	@ (8008e44 <prvCheckTasksWaitingTermination+0x50>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe f937 	bl	8007080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <prvCheckTasksWaitingTermination+0x54>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	4a0b      	ldr	r2, [pc, #44]	@ (8008e48 <prvCheckTasksWaitingTermination+0x54>)
 8008e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <prvCheckTasksWaitingTermination+0x58>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	4a0a      	ldr	r2, [pc, #40]	@ (8008e4c <prvCheckTasksWaitingTermination+0x58>)
 8008e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e26:	f000 ff11 	bl	8009c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f810 	bl	8008e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e30:	4b06      	ldr	r3, [pc, #24]	@ (8008e4c <prvCheckTasksWaitingTermination+0x58>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e1      	bne.n	8008dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20001fc0 	.word	0x20001fc0
 8008e48:	20001fec 	.word	0x20001fec
 8008e4c:	20001fd4 	.word	0x20001fd4

08008e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d108      	bne.n	8008e74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 f8ae 	bl	8009fc8 <vPortFree>
				vPortFree( pxTCB );
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 f8ab 	bl	8009fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e72:	e019      	b.n	8008ea8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d103      	bne.n	8008e86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 f8a2 	bl	8009fc8 <vPortFree>
	}
 8008e84:	e010      	b.n	8008ea8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d00b      	beq.n	8008ea8 <prvDeleteTCB+0x58>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	60fb      	str	r3, [r7, #12]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <prvDeleteTCB+0x54>
	}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee8 <prvResetNextTaskUnblockTime+0x38>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8008eec <prvResetNextTaskUnblockTime+0x3c>)
 8008ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ec8:	e008      	b.n	8008edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eca:	4b07      	ldr	r3, [pc, #28]	@ (8008ee8 <prvResetNextTaskUnblockTime+0x38>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4a04      	ldr	r2, [pc, #16]	@ (8008eec <prvResetNextTaskUnblockTime+0x3c>)
 8008eda:	6013      	str	r3, [r2, #0]
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	20001fa4 	.word	0x20001fa4
 8008eec:	2000200c 	.word	0x2000200c

08008ef0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008ef6:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <xTaskGetCurrentTaskHandle+0x1c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008efc:	687b      	ldr	r3, [r7, #4]
	}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20001b18 	.word	0x20001b18

08008f10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <xTaskGetSchedulerState+0x34>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	607b      	str	r3, [r7, #4]
 8008f22:	e008      	b.n	8008f36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f24:	4b08      	ldr	r3, [pc, #32]	@ (8008f48 <xTaskGetSchedulerState+0x38>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	e001      	b.n	8008f36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f32:	2300      	movs	r3, #0
 8008f34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f36:	687b      	ldr	r3, [r7, #4]
	}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	20001ff8 	.word	0x20001ff8
 8008f48:	20002014 	.word	0x20002014

08008f4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d051      	beq.n	8009006 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f66:	4b2a      	ldr	r3, [pc, #168]	@ (8009010 <xTaskPriorityInherit+0xc4>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d241      	bcs.n	8008ff4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	db06      	blt.n	8008f86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f78:	4b25      	ldr	r3, [pc, #148]	@ (8009010 <xTaskPriorityInherit+0xc4>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	6959      	ldr	r1, [r3, #20]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f8e:	4613      	mov	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4a1f      	ldr	r2, [pc, #124]	@ (8009014 <xTaskPriorityInherit+0xc8>)
 8008f98:	4413      	add	r3, r2
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	d122      	bne.n	8008fe4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe f86c 	bl	8007080 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fa8:	4b19      	ldr	r3, [pc, #100]	@ (8009010 <xTaskPriorityInherit+0xc4>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb6:	4b18      	ldr	r3, [pc, #96]	@ (8009018 <xTaskPriorityInherit+0xcc>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d903      	bls.n	8008fc6 <xTaskPriorityInherit+0x7a>
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc2:	4a15      	ldr	r2, [pc, #84]	@ (8009018 <xTaskPriorityInherit+0xcc>)
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4a10      	ldr	r2, [pc, #64]	@ (8009014 <xTaskPriorityInherit+0xc8>)
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4610      	mov	r0, r2
 8008fde:	f7fd fff2 	bl	8006fc6 <vListInsertEnd>
 8008fe2:	e004      	b.n	8008fee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8009010 <xTaskPriorityInherit+0xc4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	e008      	b.n	8009006 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008ff8:	4b05      	ldr	r3, [pc, #20]	@ (8009010 <xTaskPriorityInherit+0xc4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d201      	bcs.n	8009006 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009002:	2301      	movs	r3, #1
 8009004:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009006:	68fb      	ldr	r3, [r7, #12]
	}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20001b18 	.word	0x20001b18
 8009014:	20001b1c 	.word	0x20001b1c
 8009018:	20001ff4 	.word	0x20001ff4

0800901c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d058      	beq.n	80090e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009032:	4b2f      	ldr	r3, [pc, #188]	@ (80090f0 <xTaskPriorityDisinherit+0xd4>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d00b      	beq.n	8009054 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	60fb      	str	r3, [r7, #12]
}
 800904e:	bf00      	nop
 8009050:	bf00      	nop
 8009052:	e7fd      	b.n	8009050 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10b      	bne.n	8009074 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	60bb      	str	r3, [r7, #8]
}
 800906e:	bf00      	nop
 8009070:	bf00      	nop
 8009072:	e7fd      	b.n	8009070 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009078:	1e5a      	subs	r2, r3, #1
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009086:	429a      	cmp	r2, r3
 8009088:	d02c      	beq.n	80090e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800908e:	2b00      	cmp	r3, #0
 8009090:	d128      	bne.n	80090e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3304      	adds	r3, #4
 8009096:	4618      	mov	r0, r3
 8009098:	f7fd fff2 	bl	8007080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090b4:	4b0f      	ldr	r3, [pc, #60]	@ (80090f4 <xTaskPriorityDisinherit+0xd8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d903      	bls.n	80090c4 <xTaskPriorityDisinherit+0xa8>
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	4a0c      	ldr	r2, [pc, #48]	@ (80090f4 <xTaskPriorityDisinherit+0xd8>)
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4a09      	ldr	r2, [pc, #36]	@ (80090f8 <xTaskPriorityDisinherit+0xdc>)
 80090d2:	441a      	add	r2, r3
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fd ff73 	bl	8006fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090e4:	697b      	ldr	r3, [r7, #20]
	}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20001b18 	.word	0x20001b18
 80090f4:	20001ff4 	.word	0x20001ff4
 80090f8:	20001b1c 	.word	0x20001b1c

080090fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800910a:	2301      	movs	r3, #1
 800910c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d06c      	beq.n	80091ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10b      	bne.n	8009134 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	bf00      	nop
 8009132:	e7fd      	b.n	8009130 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d902      	bls.n	8009144 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	e002      	b.n	800914a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009148:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	429a      	cmp	r2, r3
 8009152:	d04c      	beq.n	80091ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	429a      	cmp	r2, r3
 800915c:	d147      	bne.n	80091ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800915e:	4b26      	ldr	r3, [pc, #152]	@ (80091f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	429a      	cmp	r2, r3
 8009166:	d10b      	bne.n	8009180 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	60bb      	str	r3, [r7, #8]
}
 800917a:	bf00      	nop
 800917c:	bf00      	nop
 800917e:	e7fd      	b.n	800917c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009184:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	69fa      	ldr	r2, [r7, #28]
 800918a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	db04      	blt.n	800919e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	6959      	ldr	r1, [r3, #20]
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4a13      	ldr	r2, [pc, #76]	@ (80091fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80091ae:	4413      	add	r3, r2
 80091b0:	4299      	cmp	r1, r3
 80091b2:	d11c      	bne.n	80091ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	3304      	adds	r3, #4
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fd ff61 	bl	8007080 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009200 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d903      	bls.n	80091d2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009200 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4a07      	ldr	r2, [pc, #28]	@ (80091fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80091e0:	441a      	add	r2, r3
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd feec 	bl	8006fc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091ee:	bf00      	nop
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20001b18 	.word	0x20001b18
 80091fc:	20001b1c 	.word	0x20001b1c
 8009200:	20001ff4 	.word	0x20001ff4

08009204 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009204:	b480      	push	{r7}
 8009206:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009208:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <pvTaskIncrementMutexHeldCount+0x24>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d004      	beq.n	800921a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009210:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <pvTaskIncrementMutexHeldCount+0x24>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009216:	3201      	adds	r2, #1
 8009218:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800921a:	4b03      	ldr	r3, [pc, #12]	@ (8009228 <pvTaskIncrementMutexHeldCount+0x24>)
 800921c:	681b      	ldr	r3, [r3, #0]
	}
 800921e:	4618      	mov	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20001b18 	.word	0x20001b18

0800922c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009236:	4b21      	ldr	r3, [pc, #132]	@ (80092bc <prvAddCurrentTaskToDelayedList+0x90>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800923c:	4b20      	ldr	r3, [pc, #128]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3304      	adds	r3, #4
 8009242:	4618      	mov	r0, r3
 8009244:	f7fd ff1c 	bl	8007080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924e:	d10a      	bne.n	8009266 <prvAddCurrentTaskToDelayedList+0x3a>
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009256:	4b1a      	ldr	r3, [pc, #104]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4819      	ldr	r0, [pc, #100]	@ (80092c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009260:	f7fd feb1 	bl	8006fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009264:	e026      	b.n	80092b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4413      	add	r3, r2
 800926c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800926e:	4b14      	ldr	r3, [pc, #80]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	429a      	cmp	r2, r3
 800927c:	d209      	bcs.n	8009292 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800927e:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	4b0f      	ldr	r3, [pc, #60]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3304      	adds	r3, #4
 8009288:	4619      	mov	r1, r3
 800928a:	4610      	mov	r0, r2
 800928c:	f7fd febf 	bl	800700e <vListInsert>
}
 8009290:	e010      	b.n	80092b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009292:	4b0e      	ldr	r3, [pc, #56]	@ (80092cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4b0a      	ldr	r3, [pc, #40]	@ (80092c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fd feb5 	bl	800700e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092a4:	4b0a      	ldr	r3, [pc, #40]	@ (80092d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d202      	bcs.n	80092b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092ae:	4a08      	ldr	r2, [pc, #32]	@ (80092d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6013      	str	r3, [r2, #0]
}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20001ff0 	.word	0x20001ff0
 80092c0:	20001b18 	.word	0x20001b18
 80092c4:	20001fd8 	.word	0x20001fd8
 80092c8:	20001fa8 	.word	0x20001fa8
 80092cc:	20001fa4 	.word	0x20001fa4
 80092d0:	2000200c 	.word	0x2000200c

080092d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	@ 0x28
 80092d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092da:	2300      	movs	r3, #0
 80092dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092de:	f000 fb13 	bl	8009908 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009358 <xTimerCreateTimerTask+0x84>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d021      	beq.n	800932e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80092f2:	1d3a      	adds	r2, r7, #4
 80092f4:	f107 0108 	add.w	r1, r7, #8
 80092f8:	f107 030c 	add.w	r3, r7, #12
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fd fe1b 	bl	8006f38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	9202      	str	r2, [sp, #8]
 800930a:	9301      	str	r3, [sp, #4]
 800930c:	2302      	movs	r3, #2
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	2300      	movs	r3, #0
 8009312:	460a      	mov	r2, r1
 8009314:	4911      	ldr	r1, [pc, #68]	@ (800935c <xTimerCreateTimerTask+0x88>)
 8009316:	4812      	ldr	r0, [pc, #72]	@ (8009360 <xTimerCreateTimerTask+0x8c>)
 8009318:	f7fe ffc0 	bl	800829c <xTaskCreateStatic>
 800931c:	4603      	mov	r3, r0
 800931e:	4a11      	ldr	r2, [pc, #68]	@ (8009364 <xTimerCreateTimerTask+0x90>)
 8009320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009322:	4b10      	ldr	r3, [pc, #64]	@ (8009364 <xTimerCreateTimerTask+0x90>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800932a:	2301      	movs	r3, #1
 800932c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10b      	bne.n	800934c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	613b      	str	r3, [r7, #16]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800934c:	697b      	ldr	r3, [r7, #20]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20002048 	.word	0x20002048
 800935c:	0800c558 	.word	0x0800c558
 8009360:	080094a1 	.word	0x080094a1
 8009364:	2000204c 	.word	0x2000204c

08009368 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08a      	sub	sp, #40	@ 0x28
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009376:	2300      	movs	r3, #0
 8009378:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10b      	bne.n	8009398 <xTimerGenericCommand+0x30>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	623b      	str	r3, [r7, #32]
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	e7fd      	b.n	8009394 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009398:	4b19      	ldr	r3, [pc, #100]	@ (8009400 <xTimerGenericCommand+0x98>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d02a      	beq.n	80093f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b05      	cmp	r3, #5
 80093b0:	dc18      	bgt.n	80093e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093b2:	f7ff fdad 	bl	8008f10 <xTaskGetSchedulerState>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d109      	bne.n	80093d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093bc:	4b10      	ldr	r3, [pc, #64]	@ (8009400 <xTimerGenericCommand+0x98>)
 80093be:	6818      	ldr	r0, [r3, #0]
 80093c0:	f107 0110 	add.w	r1, r7, #16
 80093c4:	2300      	movs	r3, #0
 80093c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c8:	f7fe f8f0 	bl	80075ac <xQueueGenericSend>
 80093cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80093ce:	e012      	b.n	80093f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009400 <xTimerGenericCommand+0x98>)
 80093d2:	6818      	ldr	r0, [r3, #0]
 80093d4:	f107 0110 	add.w	r1, r7, #16
 80093d8:	2300      	movs	r3, #0
 80093da:	2200      	movs	r2, #0
 80093dc:	f7fe f8e6 	bl	80075ac <xQueueGenericSend>
 80093e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80093e2:	e008      	b.n	80093f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093e4:	4b06      	ldr	r3, [pc, #24]	@ (8009400 <xTimerGenericCommand+0x98>)
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	f107 0110 	add.w	r1, r7, #16
 80093ec:	2300      	movs	r3, #0
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	f7fe f9de 	bl	80077b0 <xQueueGenericSendFromISR>
 80093f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3728      	adds	r7, #40	@ 0x28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20002048 	.word	0x20002048

08009404 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af02      	add	r7, sp, #8
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800940e:	4b23      	ldr	r3, [pc, #140]	@ (800949c <prvProcessExpiredTimer+0x98>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	3304      	adds	r3, #4
 800941c:	4618      	mov	r0, r3
 800941e:	f7fd fe2f 	bl	8007080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009428:	f003 0304 	and.w	r3, r3, #4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d023      	beq.n	8009478 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	699a      	ldr	r2, [r3, #24]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	18d1      	adds	r1, r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	6978      	ldr	r0, [r7, #20]
 800943e:	f000 f8d5 	bl	80095ec <prvInsertTimerInActiveList>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d020      	beq.n	800948a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009448:	2300      	movs	r3, #0
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	2300      	movs	r3, #0
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	2100      	movs	r1, #0
 8009452:	6978      	ldr	r0, [r7, #20]
 8009454:	f7ff ff88 	bl	8009368 <xTimerGenericCommand>
 8009458:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d114      	bne.n	800948a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	60fb      	str	r3, [r7, #12]
}
 8009472:	bf00      	nop
 8009474:	bf00      	nop
 8009476:	e7fd      	b.n	8009474 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800947e:	f023 0301 	bic.w	r3, r3, #1
 8009482:	b2da      	uxtb	r2, r3
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	6978      	ldr	r0, [r7, #20]
 8009490:	4798      	blx	r3
}
 8009492:	bf00      	nop
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20002040 	.word	0x20002040

080094a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094a8:	f107 0308 	add.w	r3, r7, #8
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 f859 	bl	8009564 <prvGetNextExpireTime>
 80094b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4619      	mov	r1, r3
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f805 	bl	80094c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094be:	f000 f8d7 	bl	8009670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094c2:	bf00      	nop
 80094c4:	e7f0      	b.n	80094a8 <prvTimerTask+0x8>
	...

080094c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094d2:	f7ff f927 	bl	8008724 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f866 	bl	80095ac <prvSampleTimeNow>
 80094e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d130      	bne.n	800954a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <prvProcessTimerOrBlockTask+0x3c>
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d806      	bhi.n	8009504 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80094f6:	f7ff f923 	bl	8008740 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094fa:	68f9      	ldr	r1, [r7, #12]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7ff ff81 	bl	8009404 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009502:	e024      	b.n	800954e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d008      	beq.n	800951c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800950a:	4b13      	ldr	r3, [pc, #76]	@ (8009558 <prvProcessTimerOrBlockTask+0x90>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <prvProcessTimerOrBlockTask+0x50>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <prvProcessTimerOrBlockTask+0x52>
 8009518:	2300      	movs	r3, #0
 800951a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800951c:	4b0f      	ldr	r3, [pc, #60]	@ (800955c <prvProcessTimerOrBlockTask+0x94>)
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	4619      	mov	r1, r3
 800952a:	f7fe fe83 	bl	8008234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800952e:	f7ff f907 	bl	8008740 <xTaskResumeAll>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10a      	bne.n	800954e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009538:	4b09      	ldr	r3, [pc, #36]	@ (8009560 <prvProcessTimerOrBlockTask+0x98>)
 800953a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	f3bf 8f6f 	isb	sy
}
 8009548:	e001      	b.n	800954e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800954a:	f7ff f8f9 	bl	8008740 <xTaskResumeAll>
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20002044 	.word	0x20002044
 800955c:	20002048 	.word	0x20002048
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800956c:	4b0e      	ldr	r3, [pc, #56]	@ (80095a8 <prvGetNextExpireTime+0x44>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <prvGetNextExpireTime+0x16>
 8009576:	2201      	movs	r2, #1
 8009578:	e000      	b.n	800957c <prvGetNextExpireTime+0x18>
 800957a:	2200      	movs	r2, #0
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d105      	bne.n	8009594 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009588:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <prvGetNextExpireTime+0x44>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	e001      	b.n	8009598 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009598:	68fb      	ldr	r3, [r7, #12]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	20002040 	.word	0x20002040

080095ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095b4:	f7ff f962 	bl	800887c <xTaskGetTickCount>
 80095b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095ba:	4b0b      	ldr	r3, [pc, #44]	@ (80095e8 <prvSampleTimeNow+0x3c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d205      	bcs.n	80095d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095c4:	f000 f93a 	bl	800983c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	601a      	str	r2, [r3, #0]
 80095ce:	e002      	b.n	80095d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095d6:	4a04      	ldr	r2, [pc, #16]	@ (80095e8 <prvSampleTimeNow+0x3c>)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095dc:	68fb      	ldr	r3, [r7, #12]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20002050 	.word	0x20002050

080095ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	429a      	cmp	r2, r3
 8009610:	d812      	bhi.n	8009638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	1ad2      	subs	r2, r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	429a      	cmp	r2, r3
 800961e:	d302      	bcc.n	8009626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009620:	2301      	movs	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	e01b      	b.n	800965e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009626:	4b10      	ldr	r3, [pc, #64]	@ (8009668 <prvInsertTimerInActiveList+0x7c>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3304      	adds	r3, #4
 800962e:	4619      	mov	r1, r3
 8009630:	4610      	mov	r0, r2
 8009632:	f7fd fcec 	bl	800700e <vListInsert>
 8009636:	e012      	b.n	800965e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d206      	bcs.n	800964e <prvInsertTimerInActiveList+0x62>
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	429a      	cmp	r2, r3
 8009646:	d302      	bcc.n	800964e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009648:	2301      	movs	r3, #1
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	e007      	b.n	800965e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800964e:	4b07      	ldr	r3, [pc, #28]	@ (800966c <prvInsertTimerInActiveList+0x80>)
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3304      	adds	r3, #4
 8009656:	4619      	mov	r1, r3
 8009658:	4610      	mov	r0, r2
 800965a:	f7fd fcd8 	bl	800700e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800965e:	697b      	ldr	r3, [r7, #20]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20002044 	.word	0x20002044
 800966c:	20002040 	.word	0x20002040

08009670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08e      	sub	sp, #56	@ 0x38
 8009674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009676:	e0ce      	b.n	8009816 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	da19      	bge.n	80096b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800967e:	1d3b      	adds	r3, r7, #4
 8009680:	3304      	adds	r3, #4
 8009682:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10b      	bne.n	80096a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	61fb      	str	r3, [r7, #28]
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	e7fd      	b.n	800969e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096a8:	6850      	ldr	r0, [r2, #4]
 80096aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096ac:	6892      	ldr	r2, [r2, #8]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f2c0 80ae 	blt.w	8009816 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d004      	beq.n	80096d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c8:	3304      	adds	r3, #4
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fd fcd8 	bl	8007080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d0:	463b      	mov	r3, r7
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff ff6a 	bl	80095ac <prvSampleTimeNow>
 80096d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b09      	cmp	r3, #9
 80096de:	f200 8097 	bhi.w	8009810 <prvProcessReceivedCommands+0x1a0>
 80096e2:	a201      	add	r2, pc, #4	@ (adr r2, 80096e8 <prvProcessReceivedCommands+0x78>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	08009711 	.word	0x08009711
 80096ec:	08009711 	.word	0x08009711
 80096f0:	08009711 	.word	0x08009711
 80096f4:	08009787 	.word	0x08009787
 80096f8:	0800979b 	.word	0x0800979b
 80096fc:	080097e7 	.word	0x080097e7
 8009700:	08009711 	.word	0x08009711
 8009704:	08009711 	.word	0x08009711
 8009708:	08009787 	.word	0x08009787
 800970c:	0800979b 	.word	0x0800979b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009712:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009716:	f043 0301 	orr.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	18d1      	adds	r1, r2, r3
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800972e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009730:	f7ff ff5c 	bl	80095ec <prvInsertTimerInActiveList>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d06c      	beq.n	8009814 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800973a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009740:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d061      	beq.n	8009814 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	441a      	add	r2, r3
 8009758:	2300      	movs	r3, #0
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	2300      	movs	r3, #0
 800975e:	2100      	movs	r1, #0
 8009760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009762:	f7ff fe01 	bl	8009368 <xTimerGenericCommand>
 8009766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d152      	bne.n	8009814 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	61bb      	str	r3, [r7, #24]
}
 8009780:	bf00      	nop
 8009782:	bf00      	nop
 8009784:	e7fd      	b.n	8009782 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800978c:	f023 0301 	bic.w	r3, r3, #1
 8009790:	b2da      	uxtb	r2, r3
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009798:	e03d      	b.n	8009816 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800979a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	617b      	str	r3, [r7, #20]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d8:	18d1      	adds	r1, r2, r3
 80097da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097e0:	f7ff ff04 	bl	80095ec <prvInsertTimerInActiveList>
					break;
 80097e4:	e017      	b.n	8009816 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80097e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d103      	bne.n	80097fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80097f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f6:	f000 fbe7 	bl	8009fc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097fa:	e00c      	b.n	8009816 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009802:	f023 0301 	bic.w	r3, r3, #1
 8009806:	b2da      	uxtb	r2, r3
 8009808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800980e:	e002      	b.n	8009816 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009810:	bf00      	nop
 8009812:	e000      	b.n	8009816 <prvProcessReceivedCommands+0x1a6>
					break;
 8009814:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009816:	4b08      	ldr	r3, [pc, #32]	@ (8009838 <prvProcessReceivedCommands+0x1c8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	1d39      	adds	r1, r7, #4
 800981c:	2200      	movs	r2, #0
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe f8f4 	bl	8007a0c <xQueueReceive>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	f47f af26 	bne.w	8009678 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	3730      	adds	r7, #48	@ 0x30
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20002048 	.word	0x20002048

0800983c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009842:	e049      	b.n	80098d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009844:	4b2e      	ldr	r3, [pc, #184]	@ (8009900 <prvSwitchTimerLists+0xc4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800984e:	4b2c      	ldr	r3, [pc, #176]	@ (8009900 <prvSwitchTimerLists+0xc4>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3304      	adds	r3, #4
 800985c:	4618      	mov	r0, r3
 800985e:	f7fd fc0f 	bl	8007080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d02f      	beq.n	80098d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	4413      	add	r3, r2
 8009880:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	429a      	cmp	r2, r3
 8009888:	d90e      	bls.n	80098a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009896:	4b1a      	ldr	r3, [pc, #104]	@ (8009900 <prvSwitchTimerLists+0xc4>)
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3304      	adds	r3, #4
 800989e:	4619      	mov	r1, r3
 80098a0:	4610      	mov	r0, r2
 80098a2:	f7fd fbb4 	bl	800700e <vListInsert>
 80098a6:	e017      	b.n	80098d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098a8:	2300      	movs	r3, #0
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	2300      	movs	r3, #0
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	2100      	movs	r1, #0
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7ff fd58 	bl	8009368 <xTimerGenericCommand>
 80098b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10b      	bne.n	80098d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	603b      	str	r3, [r7, #0]
}
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
 80098d6:	e7fd      	b.n	80098d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098d8:	4b09      	ldr	r3, [pc, #36]	@ (8009900 <prvSwitchTimerLists+0xc4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1b0      	bne.n	8009844 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098e2:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <prvSwitchTimerLists+0xc4>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80098e8:	4b06      	ldr	r3, [pc, #24]	@ (8009904 <prvSwitchTimerLists+0xc8>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a04      	ldr	r2, [pc, #16]	@ (8009900 <prvSwitchTimerLists+0xc4>)
 80098ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098f0:	4a04      	ldr	r2, [pc, #16]	@ (8009904 <prvSwitchTimerLists+0xc8>)
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	6013      	str	r3, [r2, #0]
}
 80098f6:	bf00      	nop
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20002040 	.word	0x20002040
 8009904:	20002044 	.word	0x20002044

08009908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800990e:	f000 f96b 	bl	8009be8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009912:	4b15      	ldr	r3, [pc, #84]	@ (8009968 <prvCheckForValidListAndQueue+0x60>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d120      	bne.n	800995c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800991a:	4814      	ldr	r0, [pc, #80]	@ (800996c <prvCheckForValidListAndQueue+0x64>)
 800991c:	f7fd fb26 	bl	8006f6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009920:	4813      	ldr	r0, [pc, #76]	@ (8009970 <prvCheckForValidListAndQueue+0x68>)
 8009922:	f7fd fb23 	bl	8006f6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009926:	4b13      	ldr	r3, [pc, #76]	@ (8009974 <prvCheckForValidListAndQueue+0x6c>)
 8009928:	4a10      	ldr	r2, [pc, #64]	@ (800996c <prvCheckForValidListAndQueue+0x64>)
 800992a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800992c:	4b12      	ldr	r3, [pc, #72]	@ (8009978 <prvCheckForValidListAndQueue+0x70>)
 800992e:	4a10      	ldr	r2, [pc, #64]	@ (8009970 <prvCheckForValidListAndQueue+0x68>)
 8009930:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009932:	2300      	movs	r3, #0
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	4b11      	ldr	r3, [pc, #68]	@ (800997c <prvCheckForValidListAndQueue+0x74>)
 8009938:	4a11      	ldr	r2, [pc, #68]	@ (8009980 <prvCheckForValidListAndQueue+0x78>)
 800993a:	2110      	movs	r1, #16
 800993c:	200a      	movs	r0, #10
 800993e:	f7fd fc33 	bl	80071a8 <xQueueGenericCreateStatic>
 8009942:	4603      	mov	r3, r0
 8009944:	4a08      	ldr	r2, [pc, #32]	@ (8009968 <prvCheckForValidListAndQueue+0x60>)
 8009946:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009948:	4b07      	ldr	r3, [pc, #28]	@ (8009968 <prvCheckForValidListAndQueue+0x60>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d005      	beq.n	800995c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009950:	4b05      	ldr	r3, [pc, #20]	@ (8009968 <prvCheckForValidListAndQueue+0x60>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	490b      	ldr	r1, [pc, #44]	@ (8009984 <prvCheckForValidListAndQueue+0x7c>)
 8009956:	4618      	mov	r0, r3
 8009958:	f7fe fc18 	bl	800818c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800995c:	f000 f976 	bl	8009c4c <vPortExitCritical>
}
 8009960:	bf00      	nop
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20002048 	.word	0x20002048
 800996c:	20002018 	.word	0x20002018
 8009970:	2000202c 	.word	0x2000202c
 8009974:	20002040 	.word	0x20002040
 8009978:	20002044 	.word	0x20002044
 800997c:	200020f4 	.word	0x200020f4
 8009980:	20002054 	.word	0x20002054
 8009984:	0800c560 	.word	0x0800c560

08009988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3b04      	subs	r3, #4
 8009998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80099a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3b04      	subs	r3, #4
 80099a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f023 0201 	bic.w	r2, r3, #1
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3b04      	subs	r3, #4
 80099b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099b8:	4a0c      	ldr	r2, [pc, #48]	@ (80099ec <pxPortInitialiseStack+0x64>)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3b14      	subs	r3, #20
 80099c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f06f 0202 	mvn.w	r2, #2
 80099d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3b20      	subs	r3, #32
 80099dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099de:	68fb      	ldr	r3, [r7, #12]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	080099f1 	.word	0x080099f1

080099f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099fa:	4b13      	ldr	r3, [pc, #76]	@ (8009a48 <prvTaskExitError+0x58>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a02:	d00b      	beq.n	8009a1c <prvTaskExitError+0x2c>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	60fb      	str	r3, [r7, #12]
}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	e7fd      	b.n	8009a18 <prvTaskExitError+0x28>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60bb      	str	r3, [r7, #8]
}
 8009a2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a30:	bf00      	nop
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0fc      	beq.n	8009a32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	2000000c 	.word	0x2000000c
 8009a4c:	00000000 	.word	0x00000000

08009a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a50:	4b07      	ldr	r3, [pc, #28]	@ (8009a70 <pxCurrentTCBConst2>)
 8009a52:	6819      	ldr	r1, [r3, #0]
 8009a54:	6808      	ldr	r0, [r1, #0]
 8009a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5a:	f380 8809 	msr	PSP, r0
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f04f 0000 	mov.w	r0, #0
 8009a66:	f380 8811 	msr	BASEPRI, r0
 8009a6a:	4770      	bx	lr
 8009a6c:	f3af 8000 	nop.w

08009a70 <pxCurrentTCBConst2>:
 8009a70:	20001b18 	.word	0x20001b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop

08009a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a78:	4808      	ldr	r0, [pc, #32]	@ (8009a9c <prvPortStartFirstTask+0x24>)
 8009a7a:	6800      	ldr	r0, [r0, #0]
 8009a7c:	6800      	ldr	r0, [r0, #0]
 8009a7e:	f380 8808 	msr	MSP, r0
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	f380 8814 	msr	CONTROL, r0
 8009a8a:	b662      	cpsie	i
 8009a8c:	b661      	cpsie	f
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	df00      	svc	0
 8009a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a9a:	bf00      	nop
 8009a9c:	e000ed08 	.word	0xe000ed08

08009aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009aa6:	4b47      	ldr	r3, [pc, #284]	@ (8009bc4 <xPortStartScheduler+0x124>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a47      	ldr	r2, [pc, #284]	@ (8009bc8 <xPortStartScheduler+0x128>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d10b      	bne.n	8009ac8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	613b      	str	r3, [r7, #16]
}
 8009ac2:	bf00      	nop
 8009ac4:	bf00      	nop
 8009ac6:	e7fd      	b.n	8009ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8009bc4 <xPortStartScheduler+0x124>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a3f      	ldr	r2, [pc, #252]	@ (8009bcc <xPortStartScheduler+0x12c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d10b      	bne.n	8009aea <xPortStartScheduler+0x4a>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	60fb      	str	r3, [r7, #12]
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	e7fd      	b.n	8009ae6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009aea:	4b39      	ldr	r3, [pc, #228]	@ (8009bd0 <xPortStartScheduler+0x130>)
 8009aec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	22ff      	movs	r2, #255	@ 0xff
 8009afa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	4b31      	ldr	r3, [pc, #196]	@ (8009bd4 <xPortStartScheduler+0x134>)
 8009b10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b12:	4b31      	ldr	r3, [pc, #196]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b14:	2207      	movs	r2, #7
 8009b16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b18:	e009      	b.n	8009b2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	4a2d      	ldr	r2, [pc, #180]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b2e:	78fb      	ldrb	r3, [r7, #3]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b36:	2b80      	cmp	r3, #128	@ 0x80
 8009b38:	d0ef      	beq.n	8009b1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b3a:	4b27      	ldr	r3, [pc, #156]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f1c3 0307 	rsb	r3, r3, #7
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d00b      	beq.n	8009b5e <xPortStartScheduler+0xbe>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	60bb      	str	r3, [r7, #8]
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	e7fd      	b.n	8009b5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	4a1c      	ldr	r2, [pc, #112]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b68:	4b1b      	ldr	r3, [pc, #108]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b70:	4a19      	ldr	r2, [pc, #100]	@ (8009bd8 <xPortStartScheduler+0x138>)
 8009b72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b7c:	4b17      	ldr	r3, [pc, #92]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a16      	ldr	r2, [pc, #88]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b88:	4b14      	ldr	r3, [pc, #80]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a13      	ldr	r2, [pc, #76]	@ (8009bdc <xPortStartScheduler+0x13c>)
 8009b8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009b92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b94:	f000 f8da 	bl	8009d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b98:	4b11      	ldr	r3, [pc, #68]	@ (8009be0 <xPortStartScheduler+0x140>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b9e:	f000 f8f9 	bl	8009d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ba2:	4b10      	ldr	r3, [pc, #64]	@ (8009be4 <xPortStartScheduler+0x144>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8009be4 <xPortStartScheduler+0x144>)
 8009ba8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009bac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bae:	f7ff ff63 	bl	8009a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bb2:	f7fe ff2d 	bl	8008a10 <vTaskSwitchContext>
	prvTaskExitError();
 8009bb6:	f7ff ff1b 	bl	80099f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	e000ed00 	.word	0xe000ed00
 8009bc8:	410fc271 	.word	0x410fc271
 8009bcc:	410fc270 	.word	0x410fc270
 8009bd0:	e000e400 	.word	0xe000e400
 8009bd4:	20002144 	.word	0x20002144
 8009bd8:	20002148 	.word	0x20002148
 8009bdc:	e000ed20 	.word	0xe000ed20
 8009be0:	2000000c 	.word	0x2000000c
 8009be4:	e000ef34 	.word	0xe000ef34

08009be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	607b      	str	r3, [r7, #4]
}
 8009c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c02:	4b10      	ldr	r3, [pc, #64]	@ (8009c44 <vPortEnterCritical+0x5c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	4a0e      	ldr	r2, [pc, #56]	@ (8009c44 <vPortEnterCritical+0x5c>)
 8009c0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c44 <vPortEnterCritical+0x5c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d110      	bne.n	8009c36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c14:	4b0c      	ldr	r3, [pc, #48]	@ (8009c48 <vPortEnterCritical+0x60>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00b      	beq.n	8009c36 <vPortEnterCritical+0x4e>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	603b      	str	r3, [r7, #0]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <vPortEnterCritical+0x4a>
	}
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	2000000c 	.word	0x2000000c
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c52:	4b12      	ldr	r3, [pc, #72]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10b      	bne.n	8009c72 <vPortExitCritical+0x26>
	__asm volatile
 8009c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	607b      	str	r3, [r7, #4]
}
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	e7fd      	b.n	8009c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009c72:	4b0a      	ldr	r3, [pc, #40]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	4a08      	ldr	r2, [pc, #32]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c7c:	4b07      	ldr	r3, [pc, #28]	@ (8009c9c <vPortExitCritical+0x50>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d105      	bne.n	8009c90 <vPortExitCritical+0x44>
 8009c84:	2300      	movs	r3, #0
 8009c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	f383 8811 	msr	BASEPRI, r3
}
 8009c8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	2000000c 	.word	0x2000000c

08009ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ca0:	f3ef 8009 	mrs	r0, PSP
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	4b15      	ldr	r3, [pc, #84]	@ (8009d00 <pxCurrentTCBConst>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	f01e 0f10 	tst.w	lr, #16
 8009cb0:	bf08      	it	eq
 8009cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	6010      	str	r0, [r2, #0]
 8009cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009cc4:	f380 8811 	msr	BASEPRI, r0
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f7fe fe9e 	bl	8008a10 <vTaskSwitchContext>
 8009cd4:	f04f 0000 	mov.w	r0, #0
 8009cd8:	f380 8811 	msr	BASEPRI, r0
 8009cdc:	bc09      	pop	{r0, r3}
 8009cde:	6819      	ldr	r1, [r3, #0]
 8009ce0:	6808      	ldr	r0, [r1, #0]
 8009ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce6:	f01e 0f10 	tst.w	lr, #16
 8009cea:	bf08      	it	eq
 8009cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cf0:	f380 8809 	msr	PSP, r0
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	f3af 8000 	nop.w

08009d00 <pxCurrentTCBConst>:
 8009d00:	20001b18 	.word	0x20001b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	607b      	str	r3, [r7, #4]
}
 8009d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d22:	f7fe fdbb 	bl	800889c <xTaskIncrementTick>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d2c:	4b06      	ldr	r3, [pc, #24]	@ (8009d48 <xPortSysTickHandler+0x40>)
 8009d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	f383 8811 	msr	BASEPRI, r3
}
 8009d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d50:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <vPortSetupTimerInterrupt+0x34>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d56:	4b0b      	ldr	r3, [pc, #44]	@ (8009d84 <vPortSetupTimerInterrupt+0x38>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d88 <vPortSetupTimerInterrupt+0x3c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a0a      	ldr	r2, [pc, #40]	@ (8009d8c <vPortSetupTimerInterrupt+0x40>)
 8009d62:	fba2 2303 	umull	r2, r3, r2, r3
 8009d66:	099b      	lsrs	r3, r3, #6
 8009d68:	4a09      	ldr	r2, [pc, #36]	@ (8009d90 <vPortSetupTimerInterrupt+0x44>)
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d6e:	4b04      	ldr	r3, [pc, #16]	@ (8009d80 <vPortSetupTimerInterrupt+0x34>)
 8009d70:	2207      	movs	r2, #7
 8009d72:	601a      	str	r2, [r3, #0]
}
 8009d74:	bf00      	nop
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	e000e010 	.word	0xe000e010
 8009d84:	e000e018 	.word	0xe000e018
 8009d88:	20000000 	.word	0x20000000
 8009d8c:	10624dd3 	.word	0x10624dd3
 8009d90:	e000e014 	.word	0xe000e014

08009d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009da4 <vPortEnableVFP+0x10>
 8009d98:	6801      	ldr	r1, [r0, #0]
 8009d9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d9e:	6001      	str	r1, [r0, #0]
 8009da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009da2:	bf00      	nop
 8009da4:	e000ed88 	.word	0xe000ed88

08009da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009dae:	f3ef 8305 	mrs	r3, IPSR
 8009db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b0f      	cmp	r3, #15
 8009db8:	d915      	bls.n	8009de6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dba:	4a18      	ldr	r2, [pc, #96]	@ (8009e1c <vPortValidateInterruptPriority+0x74>)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009dc4:	4b16      	ldr	r3, [pc, #88]	@ (8009e20 <vPortValidateInterruptPriority+0x78>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	7afa      	ldrb	r2, [r7, #11]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d20b      	bcs.n	8009de6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
 8009de4:	e7fd      	b.n	8009de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009de6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e24 <vPortValidateInterruptPriority+0x7c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009dee:	4b0e      	ldr	r3, [pc, #56]	@ (8009e28 <vPortValidateInterruptPriority+0x80>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d90b      	bls.n	8009e0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dfa:	f383 8811 	msr	BASEPRI, r3
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f3bf 8f4f 	dsb	sy
 8009e06:	603b      	str	r3, [r7, #0]
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	e7fd      	b.n	8009e0a <vPortValidateInterruptPriority+0x62>
	}
 8009e0e:	bf00      	nop
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	e000e3f0 	.word	0xe000e3f0
 8009e20:	20002144 	.word	0x20002144
 8009e24:	e000ed0c 	.word	0xe000ed0c
 8009e28:	20002148 	.word	0x20002148

08009e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08a      	sub	sp, #40	@ 0x28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e38:	f7fe fc74 	bl	8008724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8009fb0 <pvPortMalloc+0x184>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e44:	f000 f924 	bl	800a090 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e48:	4b5a      	ldr	r3, [pc, #360]	@ (8009fb4 <pvPortMalloc+0x188>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4013      	ands	r3, r2
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f040 8095 	bne.w	8009f80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d01e      	beq.n	8009e9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009e5c:	2208      	movs	r2, #8
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d015      	beq.n	8009e9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f023 0307 	bic.w	r3, r3, #7
 8009e74:	3308      	adds	r3, #8
 8009e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00b      	beq.n	8009e9a <pvPortMalloc+0x6e>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	617b      	str	r3, [r7, #20]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d06f      	beq.n	8009f80 <pvPortMalloc+0x154>
 8009ea0:	4b45      	ldr	r3, [pc, #276]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d86a      	bhi.n	8009f80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009eaa:	4b44      	ldr	r3, [pc, #272]	@ (8009fbc <pvPortMalloc+0x190>)
 8009eac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009eae:	4b43      	ldr	r3, [pc, #268]	@ (8009fbc <pvPortMalloc+0x190>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eb4:	e004      	b.n	8009ec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d903      	bls.n	8009ed2 <pvPortMalloc+0xa6>
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f1      	bne.n	8009eb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ed2:	4b37      	ldr	r3, [pc, #220]	@ (8009fb0 <pvPortMalloc+0x184>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d051      	beq.n	8009f80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2208      	movs	r2, #8
 8009ee2:	4413      	add	r3, r2
 8009ee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	1ad2      	subs	r2, r2, r3
 8009ef6:	2308      	movs	r3, #8
 8009ef8:	005b      	lsls	r3, r3, #1
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d920      	bls.n	8009f40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4413      	add	r3, r2
 8009f04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	f003 0307 	and.w	r3, r3, #7
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <pvPortMalloc+0xfc>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	613b      	str	r3, [r7, #16]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	1ad2      	subs	r2, r2, r3
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f3a:	69b8      	ldr	r0, [r7, #24]
 8009f3c:	f000 f90a 	bl	800a154 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f40:	4b1d      	ldr	r3, [pc, #116]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	4b1b      	ldr	r3, [pc, #108]	@ (8009fc0 <pvPortMalloc+0x194>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d203      	bcs.n	8009f62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f5a:	4b17      	ldr	r3, [pc, #92]	@ (8009fb8 <pvPortMalloc+0x18c>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a18      	ldr	r2, [pc, #96]	@ (8009fc0 <pvPortMalloc+0x194>)
 8009f60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4b13      	ldr	r3, [pc, #76]	@ (8009fb4 <pvPortMalloc+0x188>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f72:	2200      	movs	r2, #0
 8009f74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009f76:	4b13      	ldr	r3, [pc, #76]	@ (8009fc4 <pvPortMalloc+0x198>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	4a11      	ldr	r2, [pc, #68]	@ (8009fc4 <pvPortMalloc+0x198>)
 8009f7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f80:	f7fe fbde 	bl	8008740 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00b      	beq.n	8009fa6 <pvPortMalloc+0x17a>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	60fb      	str	r3, [r7, #12]
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <pvPortMalloc+0x176>
	return pvReturn;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3728      	adds	r7, #40	@ 0x28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20002d0c 	.word	0x20002d0c
 8009fb4:	20002d20 	.word	0x20002d20
 8009fb8:	20002d10 	.word	0x20002d10
 8009fbc:	20002d04 	.word	0x20002d04
 8009fc0:	20002d14 	.word	0x20002d14
 8009fc4:	20002d18 	.word	0x20002d18

08009fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d04f      	beq.n	800a07a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fda:	2308      	movs	r3, #8
 8009fdc:	425b      	negs	r3, r3
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	4b25      	ldr	r3, [pc, #148]	@ (800a084 <vPortFree+0xbc>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10b      	bne.n	800a00e <vPortFree+0x46>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60fb      	str	r3, [r7, #12]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00b      	beq.n	800a02e <vPortFree+0x66>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	60bb      	str	r3, [r7, #8]
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	e7fd      	b.n	800a02a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	4b14      	ldr	r3, [pc, #80]	@ (800a084 <vPortFree+0xbc>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4013      	ands	r3, r2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01e      	beq.n	800a07a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d11a      	bne.n	800a07a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <vPortFree+0xbc>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	43db      	mvns	r3, r3
 800a04e:	401a      	ands	r2, r3
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a054:	f7fe fb66 	bl	8008724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	4b0a      	ldr	r3, [pc, #40]	@ (800a088 <vPortFree+0xc0>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4413      	add	r3, r2
 800a062:	4a09      	ldr	r2, [pc, #36]	@ (800a088 <vPortFree+0xc0>)
 800a064:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a066:	6938      	ldr	r0, [r7, #16]
 800a068:	f000 f874 	bl	800a154 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a06c:	4b07      	ldr	r3, [pc, #28]	@ (800a08c <vPortFree+0xc4>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3301      	adds	r3, #1
 800a072:	4a06      	ldr	r2, [pc, #24]	@ (800a08c <vPortFree+0xc4>)
 800a074:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a076:	f7fe fb63 	bl	8008740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a07a:	bf00      	nop
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20002d20 	.word	0x20002d20
 800a088:	20002d10 	.word	0x20002d10
 800a08c:	20002d1c 	.word	0x20002d1c

0800a090 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a096:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a09a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a09c:	4b27      	ldr	r3, [pc, #156]	@ (800a13c <prvHeapInit+0xac>)
 800a09e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f003 0307 	and.w	r3, r3, #7
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00c      	beq.n	800a0c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3307      	adds	r3, #7
 800a0ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 0307 	bic.w	r3, r3, #7
 800a0b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	4a1f      	ldr	r2, [pc, #124]	@ (800a13c <prvHeapInit+0xac>)
 800a0c0:	4413      	add	r3, r2
 800a0c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a140 <prvHeapInit+0xb0>)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a140 <prvHeapInit+0xb0>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	4413      	add	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0dc:	2208      	movs	r2, #8
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f023 0307 	bic.w	r3, r3, #7
 800a0ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	4a15      	ldr	r2, [pc, #84]	@ (800a144 <prvHeapInit+0xb4>)
 800a0f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0f2:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <prvHeapInit+0xb4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0fa:	4b12      	ldr	r3, [pc, #72]	@ (800a144 <prvHeapInit+0xb4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	1ad2      	subs	r2, r2, r3
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a110:	4b0c      	ldr	r3, [pc, #48]	@ (800a144 <prvHeapInit+0xb4>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	4a0a      	ldr	r2, [pc, #40]	@ (800a148 <prvHeapInit+0xb8>)
 800a11e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	4a09      	ldr	r2, [pc, #36]	@ (800a14c <prvHeapInit+0xbc>)
 800a126:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a128:	4b09      	ldr	r3, [pc, #36]	@ (800a150 <prvHeapInit+0xc0>)
 800a12a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a12e:	601a      	str	r2, [r3, #0]
}
 800a130:	bf00      	nop
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	2000214c 	.word	0x2000214c
 800a140:	20002d04 	.word	0x20002d04
 800a144:	20002d0c 	.word	0x20002d0c
 800a148:	20002d14 	.word	0x20002d14
 800a14c:	20002d10 	.word	0x20002d10
 800a150:	20002d20 	.word	0x20002d20

0800a154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a15c:	4b28      	ldr	r3, [pc, #160]	@ (800a200 <prvInsertBlockIntoFreeList+0xac>)
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e002      	b.n	800a168 <prvInsertBlockIntoFreeList+0x14>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d8f7      	bhi.n	800a162 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4413      	add	r3, r2
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d108      	bne.n	800a196 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	441a      	add	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	441a      	add	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d118      	bne.n	800a1dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b15      	ldr	r3, [pc, #84]	@ (800a204 <prvInsertBlockIntoFreeList+0xb0>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d00d      	beq.n	800a1d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e008      	b.n	800a1e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <prvInsertBlockIntoFreeList+0xb0>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	e003      	b.n	800a1e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d002      	beq.n	800a1f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1f2:	bf00      	nop
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20002d04 	.word	0x20002d04
 800a204:	20002d0c 	.word	0x20002d0c

0800a208 <std>:
 800a208:	2300      	movs	r3, #0
 800a20a:	b510      	push	{r4, lr}
 800a20c:	4604      	mov	r4, r0
 800a20e:	e9c0 3300 	strd	r3, r3, [r0]
 800a212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a216:	6083      	str	r3, [r0, #8]
 800a218:	8181      	strh	r1, [r0, #12]
 800a21a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a21c:	81c2      	strh	r2, [r0, #14]
 800a21e:	6183      	str	r3, [r0, #24]
 800a220:	4619      	mov	r1, r3
 800a222:	2208      	movs	r2, #8
 800a224:	305c      	adds	r0, #92	@ 0x5c
 800a226:	f000 fa55 	bl	800a6d4 <memset>
 800a22a:	4b0d      	ldr	r3, [pc, #52]	@ (800a260 <std+0x58>)
 800a22c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a22e:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <std+0x5c>)
 800a230:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a232:	4b0d      	ldr	r3, [pc, #52]	@ (800a268 <std+0x60>)
 800a234:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a236:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <std+0x64>)
 800a238:	6323      	str	r3, [r4, #48]	@ 0x30
 800a23a:	4b0d      	ldr	r3, [pc, #52]	@ (800a270 <std+0x68>)
 800a23c:	6224      	str	r4, [r4, #32]
 800a23e:	429c      	cmp	r4, r3
 800a240:	d006      	beq.n	800a250 <std+0x48>
 800a242:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a246:	4294      	cmp	r4, r2
 800a248:	d002      	beq.n	800a250 <std+0x48>
 800a24a:	33d0      	adds	r3, #208	@ 0xd0
 800a24c:	429c      	cmp	r4, r3
 800a24e:	d105      	bne.n	800a25c <std+0x54>
 800a250:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a258:	f000 baca 	b.w	800a7f0 <__retarget_lock_init_recursive>
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	bf00      	nop
 800a260:	0800a501 	.word	0x0800a501
 800a264:	0800a527 	.word	0x0800a527
 800a268:	0800a55f 	.word	0x0800a55f
 800a26c:	0800a583 	.word	0x0800a583
 800a270:	20002d24 	.word	0x20002d24

0800a274 <stdio_exit_handler>:
 800a274:	4a02      	ldr	r2, [pc, #8]	@ (800a280 <stdio_exit_handler+0xc>)
 800a276:	4903      	ldr	r1, [pc, #12]	@ (800a284 <stdio_exit_handler+0x10>)
 800a278:	4803      	ldr	r0, [pc, #12]	@ (800a288 <stdio_exit_handler+0x14>)
 800a27a:	f000 b869 	b.w	800a350 <_fwalk_sglue>
 800a27e:	bf00      	nop
 800a280:	20000010 	.word	0x20000010
 800a284:	0800b991 	.word	0x0800b991
 800a288:	20000020 	.word	0x20000020

0800a28c <cleanup_stdio>:
 800a28c:	6841      	ldr	r1, [r0, #4]
 800a28e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <cleanup_stdio+0x34>)
 800a290:	4299      	cmp	r1, r3
 800a292:	b510      	push	{r4, lr}
 800a294:	4604      	mov	r4, r0
 800a296:	d001      	beq.n	800a29c <cleanup_stdio+0x10>
 800a298:	f001 fb7a 	bl	800b990 <_fflush_r>
 800a29c:	68a1      	ldr	r1, [r4, #8]
 800a29e:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <cleanup_stdio+0x38>)
 800a2a0:	4299      	cmp	r1, r3
 800a2a2:	d002      	beq.n	800a2aa <cleanup_stdio+0x1e>
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f001 fb73 	bl	800b990 <_fflush_r>
 800a2aa:	68e1      	ldr	r1, [r4, #12]
 800a2ac:	4b06      	ldr	r3, [pc, #24]	@ (800a2c8 <cleanup_stdio+0x3c>)
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	d004      	beq.n	800a2bc <cleanup_stdio+0x30>
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b8:	f001 bb6a 	b.w	800b990 <_fflush_r>
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	20002d24 	.word	0x20002d24
 800a2c4:	20002d8c 	.word	0x20002d8c
 800a2c8:	20002df4 	.word	0x20002df4

0800a2cc <global_stdio_init.part.0>:
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a2fc <global_stdio_init.part.0+0x30>)
 800a2d0:	4c0b      	ldr	r4, [pc, #44]	@ (800a300 <global_stdio_init.part.0+0x34>)
 800a2d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a304 <global_stdio_init.part.0+0x38>)
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2104      	movs	r1, #4
 800a2dc:	f7ff ff94 	bl	800a208 <std>
 800a2e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	2109      	movs	r1, #9
 800a2e8:	f7ff ff8e 	bl	800a208 <std>
 800a2ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f6:	2112      	movs	r1, #18
 800a2f8:	f7ff bf86 	b.w	800a208 <std>
 800a2fc:	20002e5c 	.word	0x20002e5c
 800a300:	20002d24 	.word	0x20002d24
 800a304:	0800a275 	.word	0x0800a275

0800a308 <__sfp_lock_acquire>:
 800a308:	4801      	ldr	r0, [pc, #4]	@ (800a310 <__sfp_lock_acquire+0x8>)
 800a30a:	f000 ba72 	b.w	800a7f2 <__retarget_lock_acquire_recursive>
 800a30e:	bf00      	nop
 800a310:	20002e65 	.word	0x20002e65

0800a314 <__sfp_lock_release>:
 800a314:	4801      	ldr	r0, [pc, #4]	@ (800a31c <__sfp_lock_release+0x8>)
 800a316:	f000 ba6d 	b.w	800a7f4 <__retarget_lock_release_recursive>
 800a31a:	bf00      	nop
 800a31c:	20002e65 	.word	0x20002e65

0800a320 <__sinit>:
 800a320:	b510      	push	{r4, lr}
 800a322:	4604      	mov	r4, r0
 800a324:	f7ff fff0 	bl	800a308 <__sfp_lock_acquire>
 800a328:	6a23      	ldr	r3, [r4, #32]
 800a32a:	b11b      	cbz	r3, 800a334 <__sinit+0x14>
 800a32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a330:	f7ff bff0 	b.w	800a314 <__sfp_lock_release>
 800a334:	4b04      	ldr	r3, [pc, #16]	@ (800a348 <__sinit+0x28>)
 800a336:	6223      	str	r3, [r4, #32]
 800a338:	4b04      	ldr	r3, [pc, #16]	@ (800a34c <__sinit+0x2c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1f5      	bne.n	800a32c <__sinit+0xc>
 800a340:	f7ff ffc4 	bl	800a2cc <global_stdio_init.part.0>
 800a344:	e7f2      	b.n	800a32c <__sinit+0xc>
 800a346:	bf00      	nop
 800a348:	0800a28d 	.word	0x0800a28d
 800a34c:	20002e5c 	.word	0x20002e5c

0800a350 <_fwalk_sglue>:
 800a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a354:	4607      	mov	r7, r0
 800a356:	4688      	mov	r8, r1
 800a358:	4614      	mov	r4, r2
 800a35a:	2600      	movs	r6, #0
 800a35c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a360:	f1b9 0901 	subs.w	r9, r9, #1
 800a364:	d505      	bpl.n	800a372 <_fwalk_sglue+0x22>
 800a366:	6824      	ldr	r4, [r4, #0]
 800a368:	2c00      	cmp	r4, #0
 800a36a:	d1f7      	bne.n	800a35c <_fwalk_sglue+0xc>
 800a36c:	4630      	mov	r0, r6
 800a36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d907      	bls.n	800a388 <_fwalk_sglue+0x38>
 800a378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a37c:	3301      	adds	r3, #1
 800a37e:	d003      	beq.n	800a388 <_fwalk_sglue+0x38>
 800a380:	4629      	mov	r1, r5
 800a382:	4638      	mov	r0, r7
 800a384:	47c0      	blx	r8
 800a386:	4306      	orrs	r6, r0
 800a388:	3568      	adds	r5, #104	@ 0x68
 800a38a:	e7e9      	b.n	800a360 <_fwalk_sglue+0x10>

0800a38c <iprintf>:
 800a38c:	b40f      	push	{r0, r1, r2, r3}
 800a38e:	b507      	push	{r0, r1, r2, lr}
 800a390:	4906      	ldr	r1, [pc, #24]	@ (800a3ac <iprintf+0x20>)
 800a392:	ab04      	add	r3, sp, #16
 800a394:	6808      	ldr	r0, [r1, #0]
 800a396:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39a:	6881      	ldr	r1, [r0, #8]
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	f000 fe7f 	bl	800b0a0 <_vfiprintf_r>
 800a3a2:	b003      	add	sp, #12
 800a3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a8:	b004      	add	sp, #16
 800a3aa:	4770      	bx	lr
 800a3ac:	2000001c 	.word	0x2000001c

0800a3b0 <_puts_r>:
 800a3b0:	6a03      	ldr	r3, [r0, #32]
 800a3b2:	b570      	push	{r4, r5, r6, lr}
 800a3b4:	6884      	ldr	r4, [r0, #8]
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	b90b      	cbnz	r3, 800a3c0 <_puts_r+0x10>
 800a3bc:	f7ff ffb0 	bl	800a320 <__sinit>
 800a3c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3c2:	07db      	lsls	r3, r3, #31
 800a3c4:	d405      	bmi.n	800a3d2 <_puts_r+0x22>
 800a3c6:	89a3      	ldrh	r3, [r4, #12]
 800a3c8:	0598      	lsls	r0, r3, #22
 800a3ca:	d402      	bmi.n	800a3d2 <_puts_r+0x22>
 800a3cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ce:	f000 fa10 	bl	800a7f2 <__retarget_lock_acquire_recursive>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	0719      	lsls	r1, r3, #28
 800a3d6:	d502      	bpl.n	800a3de <_puts_r+0x2e>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d135      	bne.n	800a44a <_puts_r+0x9a>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f000 f911 	bl	800a608 <__swsetup_r>
 800a3e6:	b380      	cbz	r0, 800a44a <_puts_r+0x9a>
 800a3e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a3ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3ee:	07da      	lsls	r2, r3, #31
 800a3f0:	d405      	bmi.n	800a3fe <_puts_r+0x4e>
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	059b      	lsls	r3, r3, #22
 800a3f6:	d402      	bmi.n	800a3fe <_puts_r+0x4e>
 800a3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3fa:	f000 f9fb 	bl	800a7f4 <__retarget_lock_release_recursive>
 800a3fe:	4628      	mov	r0, r5
 800a400:	bd70      	pop	{r4, r5, r6, pc}
 800a402:	2b00      	cmp	r3, #0
 800a404:	da04      	bge.n	800a410 <_puts_r+0x60>
 800a406:	69a2      	ldr	r2, [r4, #24]
 800a408:	429a      	cmp	r2, r3
 800a40a:	dc17      	bgt.n	800a43c <_puts_r+0x8c>
 800a40c:	290a      	cmp	r1, #10
 800a40e:	d015      	beq.n	800a43c <_puts_r+0x8c>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	6022      	str	r2, [r4, #0]
 800a416:	7019      	strb	r1, [r3, #0]
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a41e:	3b01      	subs	r3, #1
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	2900      	cmp	r1, #0
 800a424:	d1ed      	bne.n	800a402 <_puts_r+0x52>
 800a426:	2b00      	cmp	r3, #0
 800a428:	da11      	bge.n	800a44e <_puts_r+0x9e>
 800a42a:	4622      	mov	r2, r4
 800a42c:	210a      	movs	r1, #10
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 f8ab 	bl	800a58a <__swbuf_r>
 800a434:	3001      	adds	r0, #1
 800a436:	d0d7      	beq.n	800a3e8 <_puts_r+0x38>
 800a438:	250a      	movs	r5, #10
 800a43a:	e7d7      	b.n	800a3ec <_puts_r+0x3c>
 800a43c:	4622      	mov	r2, r4
 800a43e:	4628      	mov	r0, r5
 800a440:	f000 f8a3 	bl	800a58a <__swbuf_r>
 800a444:	3001      	adds	r0, #1
 800a446:	d1e7      	bne.n	800a418 <_puts_r+0x68>
 800a448:	e7ce      	b.n	800a3e8 <_puts_r+0x38>
 800a44a:	3e01      	subs	r6, #1
 800a44c:	e7e4      	b.n	800a418 <_puts_r+0x68>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	6022      	str	r2, [r4, #0]
 800a454:	220a      	movs	r2, #10
 800a456:	701a      	strb	r2, [r3, #0]
 800a458:	e7ee      	b.n	800a438 <_puts_r+0x88>
	...

0800a45c <puts>:
 800a45c:	4b02      	ldr	r3, [pc, #8]	@ (800a468 <puts+0xc>)
 800a45e:	4601      	mov	r1, r0
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f7ff bfa5 	b.w	800a3b0 <_puts_r>
 800a466:	bf00      	nop
 800a468:	2000001c 	.word	0x2000001c

0800a46c <siprintf>:
 800a46c:	b40e      	push	{r1, r2, r3}
 800a46e:	b500      	push	{lr}
 800a470:	b09c      	sub	sp, #112	@ 0x70
 800a472:	ab1d      	add	r3, sp, #116	@ 0x74
 800a474:	9002      	str	r0, [sp, #8]
 800a476:	9006      	str	r0, [sp, #24]
 800a478:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a47c:	4809      	ldr	r0, [pc, #36]	@ (800a4a4 <siprintf+0x38>)
 800a47e:	9107      	str	r1, [sp, #28]
 800a480:	9104      	str	r1, [sp, #16]
 800a482:	4909      	ldr	r1, [pc, #36]	@ (800a4a8 <siprintf+0x3c>)
 800a484:	f853 2b04 	ldr.w	r2, [r3], #4
 800a488:	9105      	str	r1, [sp, #20]
 800a48a:	6800      	ldr	r0, [r0, #0]
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	a902      	add	r1, sp, #8
 800a490:	f000 fb14 	bl	800aabc <_svfiprintf_r>
 800a494:	9b02      	ldr	r3, [sp, #8]
 800a496:	2200      	movs	r2, #0
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	b01c      	add	sp, #112	@ 0x70
 800a49c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4a0:	b003      	add	sp, #12
 800a4a2:	4770      	bx	lr
 800a4a4:	2000001c 	.word	0x2000001c
 800a4a8:	ffff0208 	.word	0xffff0208

0800a4ac <siscanf>:
 800a4ac:	b40e      	push	{r1, r2, r3}
 800a4ae:	b530      	push	{r4, r5, lr}
 800a4b0:	b09c      	sub	sp, #112	@ 0x70
 800a4b2:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a4b4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a4b8:	f854 5b04 	ldr.w	r5, [r4], #4
 800a4bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a4c0:	9002      	str	r0, [sp, #8]
 800a4c2:	9006      	str	r0, [sp, #24]
 800a4c4:	f7f5 fe84 	bl	80001d0 <strlen>
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f8 <siscanf+0x4c>)
 800a4ca:	9003      	str	r0, [sp, #12]
 800a4cc:	9007      	str	r0, [sp, #28]
 800a4ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4d0:	480a      	ldr	r0, [pc, #40]	@ (800a4fc <siscanf+0x50>)
 800a4d2:	9401      	str	r4, [sp, #4]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4d8:	9314      	str	r3, [sp, #80]	@ 0x50
 800a4da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4de:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a4e2:	462a      	mov	r2, r5
 800a4e4:	4623      	mov	r3, r4
 800a4e6:	a902      	add	r1, sp, #8
 800a4e8:	6800      	ldr	r0, [r0, #0]
 800a4ea:	f000 fc3b 	bl	800ad64 <__ssvfiscanf_r>
 800a4ee:	b01c      	add	sp, #112	@ 0x70
 800a4f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4f4:	b003      	add	sp, #12
 800a4f6:	4770      	bx	lr
 800a4f8:	0800a523 	.word	0x0800a523
 800a4fc:	2000001c 	.word	0x2000001c

0800a500 <__sread>:
 800a500:	b510      	push	{r4, lr}
 800a502:	460c      	mov	r4, r1
 800a504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a508:	f000 f924 	bl	800a754 <_read_r>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	bfab      	itete	ge
 800a510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a512:	89a3      	ldrhlt	r3, [r4, #12]
 800a514:	181b      	addge	r3, r3, r0
 800a516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a51a:	bfac      	ite	ge
 800a51c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a51e:	81a3      	strhlt	r3, [r4, #12]
 800a520:	bd10      	pop	{r4, pc}

0800a522 <__seofread>:
 800a522:	2000      	movs	r0, #0
 800a524:	4770      	bx	lr

0800a526 <__swrite>:
 800a526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52a:	461f      	mov	r7, r3
 800a52c:	898b      	ldrh	r3, [r1, #12]
 800a52e:	05db      	lsls	r3, r3, #23
 800a530:	4605      	mov	r5, r0
 800a532:	460c      	mov	r4, r1
 800a534:	4616      	mov	r6, r2
 800a536:	d505      	bpl.n	800a544 <__swrite+0x1e>
 800a538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53c:	2302      	movs	r3, #2
 800a53e:	2200      	movs	r2, #0
 800a540:	f000 f8f6 	bl	800a730 <_lseek_r>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a54a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	4632      	mov	r2, r6
 800a552:	463b      	mov	r3, r7
 800a554:	4628      	mov	r0, r5
 800a556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a55a:	f000 b90d 	b.w	800a778 <_write_r>

0800a55e <__sseek>:
 800a55e:	b510      	push	{r4, lr}
 800a560:	460c      	mov	r4, r1
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f000 f8e3 	bl	800a730 <_lseek_r>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	bf15      	itete	ne
 800a570:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a57a:	81a3      	strheq	r3, [r4, #12]
 800a57c:	bf18      	it	ne
 800a57e:	81a3      	strhne	r3, [r4, #12]
 800a580:	bd10      	pop	{r4, pc}

0800a582 <__sclose>:
 800a582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a586:	f000 b8c3 	b.w	800a710 <_close_r>

0800a58a <__swbuf_r>:
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58c:	460e      	mov	r6, r1
 800a58e:	4614      	mov	r4, r2
 800a590:	4605      	mov	r5, r0
 800a592:	b118      	cbz	r0, 800a59c <__swbuf_r+0x12>
 800a594:	6a03      	ldr	r3, [r0, #32]
 800a596:	b90b      	cbnz	r3, 800a59c <__swbuf_r+0x12>
 800a598:	f7ff fec2 	bl	800a320 <__sinit>
 800a59c:	69a3      	ldr	r3, [r4, #24]
 800a59e:	60a3      	str	r3, [r4, #8]
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	071a      	lsls	r2, r3, #28
 800a5a4:	d501      	bpl.n	800a5aa <__swbuf_r+0x20>
 800a5a6:	6923      	ldr	r3, [r4, #16]
 800a5a8:	b943      	cbnz	r3, 800a5bc <__swbuf_r+0x32>
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f000 f82b 	bl	800a608 <__swsetup_r>
 800a5b2:	b118      	cbz	r0, 800a5bc <__swbuf_r+0x32>
 800a5b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	6922      	ldr	r2, [r4, #16]
 800a5c0:	1a98      	subs	r0, r3, r2
 800a5c2:	6963      	ldr	r3, [r4, #20]
 800a5c4:	b2f6      	uxtb	r6, r6
 800a5c6:	4283      	cmp	r3, r0
 800a5c8:	4637      	mov	r7, r6
 800a5ca:	dc05      	bgt.n	800a5d8 <__swbuf_r+0x4e>
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f001 f9de 	bl	800b990 <_fflush_r>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1ed      	bne.n	800a5b4 <__swbuf_r+0x2a>
 800a5d8:	68a3      	ldr	r3, [r4, #8]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	701e      	strb	r6, [r3, #0]
 800a5e6:	6962      	ldr	r2, [r4, #20]
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d004      	beq.n	800a5f8 <__swbuf_r+0x6e>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	07db      	lsls	r3, r3, #31
 800a5f2:	d5e1      	bpl.n	800a5b8 <__swbuf_r+0x2e>
 800a5f4:	2e0a      	cmp	r6, #10
 800a5f6:	d1df      	bne.n	800a5b8 <__swbuf_r+0x2e>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f001 f9c8 	bl	800b990 <_fflush_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	d0d9      	beq.n	800a5b8 <__swbuf_r+0x2e>
 800a604:	e7d6      	b.n	800a5b4 <__swbuf_r+0x2a>
	...

0800a608 <__swsetup_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4b29      	ldr	r3, [pc, #164]	@ (800a6b0 <__swsetup_r+0xa8>)
 800a60c:	4605      	mov	r5, r0
 800a60e:	6818      	ldr	r0, [r3, #0]
 800a610:	460c      	mov	r4, r1
 800a612:	b118      	cbz	r0, 800a61c <__swsetup_r+0x14>
 800a614:	6a03      	ldr	r3, [r0, #32]
 800a616:	b90b      	cbnz	r3, 800a61c <__swsetup_r+0x14>
 800a618:	f7ff fe82 	bl	800a320 <__sinit>
 800a61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a620:	0719      	lsls	r1, r3, #28
 800a622:	d422      	bmi.n	800a66a <__swsetup_r+0x62>
 800a624:	06da      	lsls	r2, r3, #27
 800a626:	d407      	bmi.n	800a638 <__swsetup_r+0x30>
 800a628:	2209      	movs	r2, #9
 800a62a:	602a      	str	r2, [r5, #0]
 800a62c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	f04f 30ff 	mov.w	r0, #4294967295
 800a636:	e033      	b.n	800a6a0 <__swsetup_r+0x98>
 800a638:	0758      	lsls	r0, r3, #29
 800a63a:	d512      	bpl.n	800a662 <__swsetup_r+0x5a>
 800a63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a63e:	b141      	cbz	r1, 800a652 <__swsetup_r+0x4a>
 800a640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a644:	4299      	cmp	r1, r3
 800a646:	d002      	beq.n	800a64e <__swsetup_r+0x46>
 800a648:	4628      	mov	r0, r5
 800a64a:	f000 f8e3 	bl	800a814 <_free_r>
 800a64e:	2300      	movs	r3, #0
 800a650:	6363      	str	r3, [r4, #52]	@ 0x34
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a658:	81a3      	strh	r3, [r4, #12]
 800a65a:	2300      	movs	r3, #0
 800a65c:	6063      	str	r3, [r4, #4]
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f043 0308 	orr.w	r3, r3, #8
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	6923      	ldr	r3, [r4, #16]
 800a66c:	b94b      	cbnz	r3, 800a682 <__swsetup_r+0x7a>
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a678:	d003      	beq.n	800a682 <__swsetup_r+0x7a>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	f001 f9d5 	bl	800ba2c <__smakebuf_r>
 800a682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a686:	f013 0201 	ands.w	r2, r3, #1
 800a68a:	d00a      	beq.n	800a6a2 <__swsetup_r+0x9a>
 800a68c:	2200      	movs	r2, #0
 800a68e:	60a2      	str	r2, [r4, #8]
 800a690:	6962      	ldr	r2, [r4, #20]
 800a692:	4252      	negs	r2, r2
 800a694:	61a2      	str	r2, [r4, #24]
 800a696:	6922      	ldr	r2, [r4, #16]
 800a698:	b942      	cbnz	r2, 800a6ac <__swsetup_r+0xa4>
 800a69a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a69e:	d1c5      	bne.n	800a62c <__swsetup_r+0x24>
 800a6a0:	bd38      	pop	{r3, r4, r5, pc}
 800a6a2:	0799      	lsls	r1, r3, #30
 800a6a4:	bf58      	it	pl
 800a6a6:	6962      	ldrpl	r2, [r4, #20]
 800a6a8:	60a2      	str	r2, [r4, #8]
 800a6aa:	e7f4      	b.n	800a696 <__swsetup_r+0x8e>
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	e7f7      	b.n	800a6a0 <__swsetup_r+0x98>
 800a6b0:	2000001c 	.word	0x2000001c

0800a6b4 <memcmp>:
 800a6b4:	b510      	push	{r4, lr}
 800a6b6:	3901      	subs	r1, #1
 800a6b8:	4402      	add	r2, r0
 800a6ba:	4290      	cmp	r0, r2
 800a6bc:	d101      	bne.n	800a6c2 <memcmp+0xe>
 800a6be:	2000      	movs	r0, #0
 800a6c0:	e005      	b.n	800a6ce <memcmp+0x1a>
 800a6c2:	7803      	ldrb	r3, [r0, #0]
 800a6c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a6c8:	42a3      	cmp	r3, r4
 800a6ca:	d001      	beq.n	800a6d0 <memcmp+0x1c>
 800a6cc:	1b18      	subs	r0, r3, r4
 800a6ce:	bd10      	pop	{r4, pc}
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	e7f2      	b.n	800a6ba <memcmp+0x6>

0800a6d4 <memset>:
 800a6d4:	4402      	add	r2, r0
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d100      	bne.n	800a6de <memset+0xa>
 800a6dc:	4770      	bx	lr
 800a6de:	f803 1b01 	strb.w	r1, [r3], #1
 800a6e2:	e7f9      	b.n	800a6d8 <memset+0x4>

0800a6e4 <strstr>:
 800a6e4:	780a      	ldrb	r2, [r1, #0]
 800a6e6:	b570      	push	{r4, r5, r6, lr}
 800a6e8:	b96a      	cbnz	r2, 800a706 <strstr+0x22>
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d109      	bne.n	800a704 <strstr+0x20>
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	4605      	mov	r5, r0
 800a6f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0f6      	beq.n	800a6ea <strstr+0x6>
 800a6fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a700:	429e      	cmp	r6, r3
 800a702:	d0f7      	beq.n	800a6f4 <strstr+0x10>
 800a704:	3001      	adds	r0, #1
 800a706:	7803      	ldrb	r3, [r0, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1ef      	bne.n	800a6ec <strstr+0x8>
 800a70c:	4618      	mov	r0, r3
 800a70e:	e7ec      	b.n	800a6ea <strstr+0x6>

0800a710 <_close_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d06      	ldr	r5, [pc, #24]	@ (800a72c <_close_r+0x1c>)
 800a714:	2300      	movs	r3, #0
 800a716:	4604      	mov	r4, r0
 800a718:	4608      	mov	r0, r1
 800a71a:	602b      	str	r3, [r5, #0]
 800a71c:	f7f7 fba4 	bl	8001e68 <_close>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_close_r+0x1a>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_close_r+0x1a>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20002e60 	.word	0x20002e60

0800a730 <_lseek_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d07      	ldr	r5, [pc, #28]	@ (800a750 <_lseek_r+0x20>)
 800a734:	4604      	mov	r4, r0
 800a736:	4608      	mov	r0, r1
 800a738:	4611      	mov	r1, r2
 800a73a:	2200      	movs	r2, #0
 800a73c:	602a      	str	r2, [r5, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	f7f7 fbb9 	bl	8001eb6 <_lseek>
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	d102      	bne.n	800a74e <_lseek_r+0x1e>
 800a748:	682b      	ldr	r3, [r5, #0]
 800a74a:	b103      	cbz	r3, 800a74e <_lseek_r+0x1e>
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	20002e60 	.word	0x20002e60

0800a754 <_read_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4d07      	ldr	r5, [pc, #28]	@ (800a774 <_read_r+0x20>)
 800a758:	4604      	mov	r4, r0
 800a75a:	4608      	mov	r0, r1
 800a75c:	4611      	mov	r1, r2
 800a75e:	2200      	movs	r2, #0
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	f7f7 fb47 	bl	8001df6 <_read>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_read_r+0x1e>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_read_r+0x1e>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	20002e60 	.word	0x20002e60

0800a778 <_write_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	@ (800a798 <_write_r+0x20>)
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	4611      	mov	r1, r2
 800a782:	2200      	movs	r2, #0
 800a784:	602a      	str	r2, [r5, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	f7f7 fb52 	bl	8001e30 <_write>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_write_r+0x1e>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_write_r+0x1e>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	20002e60 	.word	0x20002e60

0800a79c <__errno>:
 800a79c:	4b01      	ldr	r3, [pc, #4]	@ (800a7a4 <__errno+0x8>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	2000001c 	.word	0x2000001c

0800a7a8 <__libc_init_array>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4d0d      	ldr	r5, [pc, #52]	@ (800a7e0 <__libc_init_array+0x38>)
 800a7ac:	4c0d      	ldr	r4, [pc, #52]	@ (800a7e4 <__libc_init_array+0x3c>)
 800a7ae:	1b64      	subs	r4, r4, r5
 800a7b0:	10a4      	asrs	r4, r4, #2
 800a7b2:	2600      	movs	r6, #0
 800a7b4:	42a6      	cmp	r6, r4
 800a7b6:	d109      	bne.n	800a7cc <__libc_init_array+0x24>
 800a7b8:	4d0b      	ldr	r5, [pc, #44]	@ (800a7e8 <__libc_init_array+0x40>)
 800a7ba:	4c0c      	ldr	r4, [pc, #48]	@ (800a7ec <__libc_init_array+0x44>)
 800a7bc:	f001 fb54 	bl	800be68 <_init>
 800a7c0:	1b64      	subs	r4, r4, r5
 800a7c2:	10a4      	asrs	r4, r4, #2
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	42a6      	cmp	r6, r4
 800a7c8:	d105      	bne.n	800a7d6 <__libc_init_array+0x2e>
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d0:	4798      	blx	r3
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__libc_init_array+0xc>
 800a7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7da:	4798      	blx	r3
 800a7dc:	3601      	adds	r6, #1
 800a7de:	e7f2      	b.n	800a7c6 <__libc_init_array+0x1e>
 800a7e0:	0800c7f4 	.word	0x0800c7f4
 800a7e4:	0800c7f4 	.word	0x0800c7f4
 800a7e8:	0800c7f4 	.word	0x0800c7f4
 800a7ec:	0800c7f8 	.word	0x0800c7f8

0800a7f0 <__retarget_lock_init_recursive>:
 800a7f0:	4770      	bx	lr

0800a7f2 <__retarget_lock_acquire_recursive>:
 800a7f2:	4770      	bx	lr

0800a7f4 <__retarget_lock_release_recursive>:
 800a7f4:	4770      	bx	lr

0800a7f6 <memcpy>:
 800a7f6:	440a      	add	r2, r1
 800a7f8:	4291      	cmp	r1, r2
 800a7fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7fe:	d100      	bne.n	800a802 <memcpy+0xc>
 800a800:	4770      	bx	lr
 800a802:	b510      	push	{r4, lr}
 800a804:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80c:	4291      	cmp	r1, r2
 800a80e:	d1f9      	bne.n	800a804 <memcpy+0xe>
 800a810:	bd10      	pop	{r4, pc}
	...

0800a814 <_free_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4605      	mov	r5, r0
 800a818:	2900      	cmp	r1, #0
 800a81a:	d041      	beq.n	800a8a0 <_free_r+0x8c>
 800a81c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a820:	1f0c      	subs	r4, r1, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	bfb8      	it	lt
 800a826:	18e4      	addlt	r4, r4, r3
 800a828:	f000 f8e0 	bl	800a9ec <__malloc_lock>
 800a82c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a4 <_free_r+0x90>)
 800a82e:	6813      	ldr	r3, [r2, #0]
 800a830:	b933      	cbnz	r3, 800a840 <_free_r+0x2c>
 800a832:	6063      	str	r3, [r4, #4]
 800a834:	6014      	str	r4, [r2, #0]
 800a836:	4628      	mov	r0, r5
 800a838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a83c:	f000 b8dc 	b.w	800a9f8 <__malloc_unlock>
 800a840:	42a3      	cmp	r3, r4
 800a842:	d908      	bls.n	800a856 <_free_r+0x42>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	1821      	adds	r1, r4, r0
 800a848:	428b      	cmp	r3, r1
 800a84a:	bf01      	itttt	eq
 800a84c:	6819      	ldreq	r1, [r3, #0]
 800a84e:	685b      	ldreq	r3, [r3, #4]
 800a850:	1809      	addeq	r1, r1, r0
 800a852:	6021      	streq	r1, [r4, #0]
 800a854:	e7ed      	b.n	800a832 <_free_r+0x1e>
 800a856:	461a      	mov	r2, r3
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	b10b      	cbz	r3, 800a860 <_free_r+0x4c>
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	d9fa      	bls.n	800a856 <_free_r+0x42>
 800a860:	6811      	ldr	r1, [r2, #0]
 800a862:	1850      	adds	r0, r2, r1
 800a864:	42a0      	cmp	r0, r4
 800a866:	d10b      	bne.n	800a880 <_free_r+0x6c>
 800a868:	6820      	ldr	r0, [r4, #0]
 800a86a:	4401      	add	r1, r0
 800a86c:	1850      	adds	r0, r2, r1
 800a86e:	4283      	cmp	r3, r0
 800a870:	6011      	str	r1, [r2, #0]
 800a872:	d1e0      	bne.n	800a836 <_free_r+0x22>
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	6053      	str	r3, [r2, #4]
 800a87a:	4408      	add	r0, r1
 800a87c:	6010      	str	r0, [r2, #0]
 800a87e:	e7da      	b.n	800a836 <_free_r+0x22>
 800a880:	d902      	bls.n	800a888 <_free_r+0x74>
 800a882:	230c      	movs	r3, #12
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	e7d6      	b.n	800a836 <_free_r+0x22>
 800a888:	6820      	ldr	r0, [r4, #0]
 800a88a:	1821      	adds	r1, r4, r0
 800a88c:	428b      	cmp	r3, r1
 800a88e:	bf04      	itt	eq
 800a890:	6819      	ldreq	r1, [r3, #0]
 800a892:	685b      	ldreq	r3, [r3, #4]
 800a894:	6063      	str	r3, [r4, #4]
 800a896:	bf04      	itt	eq
 800a898:	1809      	addeq	r1, r1, r0
 800a89a:	6021      	streq	r1, [r4, #0]
 800a89c:	6054      	str	r4, [r2, #4]
 800a89e:	e7ca      	b.n	800a836 <_free_r+0x22>
 800a8a0:	bd38      	pop	{r3, r4, r5, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20002e6c 	.word	0x20002e6c

0800a8a8 <sbrk_aligned>:
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a8e8 <sbrk_aligned+0x40>)
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	6831      	ldr	r1, [r6, #0]
 800a8b0:	4605      	mov	r5, r0
 800a8b2:	b911      	cbnz	r1, 800a8ba <sbrk_aligned+0x12>
 800a8b4:	f001 f9a6 	bl	800bc04 <_sbrk_r>
 800a8b8:	6030      	str	r0, [r6, #0]
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4628      	mov	r0, r5
 800a8be:	f001 f9a1 	bl	800bc04 <_sbrk_r>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	d103      	bne.n	800a8ce <sbrk_aligned+0x26>
 800a8c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	bd70      	pop	{r4, r5, r6, pc}
 800a8ce:	1cc4      	adds	r4, r0, #3
 800a8d0:	f024 0403 	bic.w	r4, r4, #3
 800a8d4:	42a0      	cmp	r0, r4
 800a8d6:	d0f8      	beq.n	800a8ca <sbrk_aligned+0x22>
 800a8d8:	1a21      	subs	r1, r4, r0
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f001 f992 	bl	800bc04 <_sbrk_r>
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d1f2      	bne.n	800a8ca <sbrk_aligned+0x22>
 800a8e4:	e7ef      	b.n	800a8c6 <sbrk_aligned+0x1e>
 800a8e6:	bf00      	nop
 800a8e8:	20002e68 	.word	0x20002e68

0800a8ec <_malloc_r>:
 800a8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f0:	1ccd      	adds	r5, r1, #3
 800a8f2:	f025 0503 	bic.w	r5, r5, #3
 800a8f6:	3508      	adds	r5, #8
 800a8f8:	2d0c      	cmp	r5, #12
 800a8fa:	bf38      	it	cc
 800a8fc:	250c      	movcc	r5, #12
 800a8fe:	2d00      	cmp	r5, #0
 800a900:	4606      	mov	r6, r0
 800a902:	db01      	blt.n	800a908 <_malloc_r+0x1c>
 800a904:	42a9      	cmp	r1, r5
 800a906:	d904      	bls.n	800a912 <_malloc_r+0x26>
 800a908:	230c      	movs	r3, #12
 800a90a:	6033      	str	r3, [r6, #0]
 800a90c:	2000      	movs	r0, #0
 800a90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9e8 <_malloc_r+0xfc>
 800a916:	f000 f869 	bl	800a9ec <__malloc_lock>
 800a91a:	f8d8 3000 	ldr.w	r3, [r8]
 800a91e:	461c      	mov	r4, r3
 800a920:	bb44      	cbnz	r4, 800a974 <_malloc_r+0x88>
 800a922:	4629      	mov	r1, r5
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff ffbf 	bl	800a8a8 <sbrk_aligned>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	4604      	mov	r4, r0
 800a92e:	d158      	bne.n	800a9e2 <_malloc_r+0xf6>
 800a930:	f8d8 4000 	ldr.w	r4, [r8]
 800a934:	4627      	mov	r7, r4
 800a936:	2f00      	cmp	r7, #0
 800a938:	d143      	bne.n	800a9c2 <_malloc_r+0xd6>
 800a93a:	2c00      	cmp	r4, #0
 800a93c:	d04b      	beq.n	800a9d6 <_malloc_r+0xea>
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	4639      	mov	r1, r7
 800a942:	4630      	mov	r0, r6
 800a944:	eb04 0903 	add.w	r9, r4, r3
 800a948:	f001 f95c 	bl	800bc04 <_sbrk_r>
 800a94c:	4581      	cmp	r9, r0
 800a94e:	d142      	bne.n	800a9d6 <_malloc_r+0xea>
 800a950:	6821      	ldr	r1, [r4, #0]
 800a952:	1a6d      	subs	r5, r5, r1
 800a954:	4629      	mov	r1, r5
 800a956:	4630      	mov	r0, r6
 800a958:	f7ff ffa6 	bl	800a8a8 <sbrk_aligned>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d03a      	beq.n	800a9d6 <_malloc_r+0xea>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	442b      	add	r3, r5
 800a964:	6023      	str	r3, [r4, #0]
 800a966:	f8d8 3000 	ldr.w	r3, [r8]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	bb62      	cbnz	r2, 800a9c8 <_malloc_r+0xdc>
 800a96e:	f8c8 7000 	str.w	r7, [r8]
 800a972:	e00f      	b.n	800a994 <_malloc_r+0xa8>
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	1b52      	subs	r2, r2, r5
 800a978:	d420      	bmi.n	800a9bc <_malloc_r+0xd0>
 800a97a:	2a0b      	cmp	r2, #11
 800a97c:	d917      	bls.n	800a9ae <_malloc_r+0xc2>
 800a97e:	1961      	adds	r1, r4, r5
 800a980:	42a3      	cmp	r3, r4
 800a982:	6025      	str	r5, [r4, #0]
 800a984:	bf18      	it	ne
 800a986:	6059      	strne	r1, [r3, #4]
 800a988:	6863      	ldr	r3, [r4, #4]
 800a98a:	bf08      	it	eq
 800a98c:	f8c8 1000 	streq.w	r1, [r8]
 800a990:	5162      	str	r2, [r4, r5]
 800a992:	604b      	str	r3, [r1, #4]
 800a994:	4630      	mov	r0, r6
 800a996:	f000 f82f 	bl	800a9f8 <__malloc_unlock>
 800a99a:	f104 000b 	add.w	r0, r4, #11
 800a99e:	1d23      	adds	r3, r4, #4
 800a9a0:	f020 0007 	bic.w	r0, r0, #7
 800a9a4:	1ac2      	subs	r2, r0, r3
 800a9a6:	bf1c      	itt	ne
 800a9a8:	1a1b      	subne	r3, r3, r0
 800a9aa:	50a3      	strne	r3, [r4, r2]
 800a9ac:	e7af      	b.n	800a90e <_malloc_r+0x22>
 800a9ae:	6862      	ldr	r2, [r4, #4]
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	bf0c      	ite	eq
 800a9b4:	f8c8 2000 	streq.w	r2, [r8]
 800a9b8:	605a      	strne	r2, [r3, #4]
 800a9ba:	e7eb      	b.n	800a994 <_malloc_r+0xa8>
 800a9bc:	4623      	mov	r3, r4
 800a9be:	6864      	ldr	r4, [r4, #4]
 800a9c0:	e7ae      	b.n	800a920 <_malloc_r+0x34>
 800a9c2:	463c      	mov	r4, r7
 800a9c4:	687f      	ldr	r7, [r7, #4]
 800a9c6:	e7b6      	b.n	800a936 <_malloc_r+0x4a>
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d1fb      	bne.n	800a9c8 <_malloc_r+0xdc>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6053      	str	r3, [r2, #4]
 800a9d4:	e7de      	b.n	800a994 <_malloc_r+0xa8>
 800a9d6:	230c      	movs	r3, #12
 800a9d8:	6033      	str	r3, [r6, #0]
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f000 f80c 	bl	800a9f8 <__malloc_unlock>
 800a9e0:	e794      	b.n	800a90c <_malloc_r+0x20>
 800a9e2:	6005      	str	r5, [r0, #0]
 800a9e4:	e7d6      	b.n	800a994 <_malloc_r+0xa8>
 800a9e6:	bf00      	nop
 800a9e8:	20002e6c 	.word	0x20002e6c

0800a9ec <__malloc_lock>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	@ (800a9f4 <__malloc_lock+0x8>)
 800a9ee:	f7ff bf00 	b.w	800a7f2 <__retarget_lock_acquire_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	20002e64 	.word	0x20002e64

0800a9f8 <__malloc_unlock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	@ (800aa00 <__malloc_unlock+0x8>)
 800a9fa:	f7ff befb 	b.w	800a7f4 <__retarget_lock_release_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20002e64 	.word	0x20002e64

0800aa04 <__ssputs_r>:
 800aa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa08:	688e      	ldr	r6, [r1, #8]
 800aa0a:	461f      	mov	r7, r3
 800aa0c:	42be      	cmp	r6, r7
 800aa0e:	680b      	ldr	r3, [r1, #0]
 800aa10:	4682      	mov	sl, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	4690      	mov	r8, r2
 800aa16:	d82d      	bhi.n	800aa74 <__ssputs_r+0x70>
 800aa18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa20:	d026      	beq.n	800aa70 <__ssputs_r+0x6c>
 800aa22:	6965      	ldr	r5, [r4, #20]
 800aa24:	6909      	ldr	r1, [r1, #16]
 800aa26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa2a:	eba3 0901 	sub.w	r9, r3, r1
 800aa2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa32:	1c7b      	adds	r3, r7, #1
 800aa34:	444b      	add	r3, r9
 800aa36:	106d      	asrs	r5, r5, #1
 800aa38:	429d      	cmp	r5, r3
 800aa3a:	bf38      	it	cc
 800aa3c:	461d      	movcc	r5, r3
 800aa3e:	0553      	lsls	r3, r2, #21
 800aa40:	d527      	bpl.n	800aa92 <__ssputs_r+0x8e>
 800aa42:	4629      	mov	r1, r5
 800aa44:	f7ff ff52 	bl	800a8ec <_malloc_r>
 800aa48:	4606      	mov	r6, r0
 800aa4a:	b360      	cbz	r0, 800aaa6 <__ssputs_r+0xa2>
 800aa4c:	6921      	ldr	r1, [r4, #16]
 800aa4e:	464a      	mov	r2, r9
 800aa50:	f7ff fed1 	bl	800a7f6 <memcpy>
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5e:	81a3      	strh	r3, [r4, #12]
 800aa60:	6126      	str	r6, [r4, #16]
 800aa62:	6165      	str	r5, [r4, #20]
 800aa64:	444e      	add	r6, r9
 800aa66:	eba5 0509 	sub.w	r5, r5, r9
 800aa6a:	6026      	str	r6, [r4, #0]
 800aa6c:	60a5      	str	r5, [r4, #8]
 800aa6e:	463e      	mov	r6, r7
 800aa70:	42be      	cmp	r6, r7
 800aa72:	d900      	bls.n	800aa76 <__ssputs_r+0x72>
 800aa74:	463e      	mov	r6, r7
 800aa76:	6820      	ldr	r0, [r4, #0]
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	f001 f885 	bl	800bb8a <memmove>
 800aa80:	68a3      	ldr	r3, [r4, #8]
 800aa82:	1b9b      	subs	r3, r3, r6
 800aa84:	60a3      	str	r3, [r4, #8]
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	4433      	add	r3, r6
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa92:	462a      	mov	r2, r5
 800aa94:	f001 f8c6 	bl	800bc24 <_realloc_r>
 800aa98:	4606      	mov	r6, r0
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d1e0      	bne.n	800aa60 <__ssputs_r+0x5c>
 800aa9e:	6921      	ldr	r1, [r4, #16]
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	f7ff feb7 	bl	800a814 <_free_r>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	f8ca 3000 	str.w	r3, [sl]
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295
 800aab8:	e7e9      	b.n	800aa8e <__ssputs_r+0x8a>
	...

0800aabc <_svfiprintf_r>:
 800aabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	4698      	mov	r8, r3
 800aac2:	898b      	ldrh	r3, [r1, #12]
 800aac4:	061b      	lsls	r3, r3, #24
 800aac6:	b09d      	sub	sp, #116	@ 0x74
 800aac8:	4607      	mov	r7, r0
 800aaca:	460d      	mov	r5, r1
 800aacc:	4614      	mov	r4, r2
 800aace:	d510      	bpl.n	800aaf2 <_svfiprintf_r+0x36>
 800aad0:	690b      	ldr	r3, [r1, #16]
 800aad2:	b973      	cbnz	r3, 800aaf2 <_svfiprintf_r+0x36>
 800aad4:	2140      	movs	r1, #64	@ 0x40
 800aad6:	f7ff ff09 	bl	800a8ec <_malloc_r>
 800aada:	6028      	str	r0, [r5, #0]
 800aadc:	6128      	str	r0, [r5, #16]
 800aade:	b930      	cbnz	r0, 800aaee <_svfiprintf_r+0x32>
 800aae0:	230c      	movs	r3, #12
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	b01d      	add	sp, #116	@ 0x74
 800aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaee:	2340      	movs	r3, #64	@ 0x40
 800aaf0:	616b      	str	r3, [r5, #20]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf6:	2320      	movs	r3, #32
 800aaf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aafc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab00:	2330      	movs	r3, #48	@ 0x30
 800ab02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aca0 <_svfiprintf_r+0x1e4>
 800ab06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab0a:	f04f 0901 	mov.w	r9, #1
 800ab0e:	4623      	mov	r3, r4
 800ab10:	469a      	mov	sl, r3
 800ab12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab16:	b10a      	cbz	r2, 800ab1c <_svfiprintf_r+0x60>
 800ab18:	2a25      	cmp	r2, #37	@ 0x25
 800ab1a:	d1f9      	bne.n	800ab10 <_svfiprintf_r+0x54>
 800ab1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab20:	d00b      	beq.n	800ab3a <_svfiprintf_r+0x7e>
 800ab22:	465b      	mov	r3, fp
 800ab24:	4622      	mov	r2, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7ff ff6b 	bl	800aa04 <__ssputs_r>
 800ab2e:	3001      	adds	r0, #1
 800ab30:	f000 80a7 	beq.w	800ac82 <_svfiprintf_r+0x1c6>
 800ab34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab36:	445a      	add	r2, fp
 800ab38:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 809f 	beq.w	800ac82 <_svfiprintf_r+0x1c6>
 800ab44:	2300      	movs	r3, #0
 800ab46:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab4e:	f10a 0a01 	add.w	sl, sl, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	9307      	str	r3, [sp, #28]
 800ab56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab5c:	4654      	mov	r4, sl
 800ab5e:	2205      	movs	r2, #5
 800ab60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab64:	484e      	ldr	r0, [pc, #312]	@ (800aca0 <_svfiprintf_r+0x1e4>)
 800ab66:	f7f5 fb3b 	bl	80001e0 <memchr>
 800ab6a:	9a04      	ldr	r2, [sp, #16]
 800ab6c:	b9d8      	cbnz	r0, 800aba6 <_svfiprintf_r+0xea>
 800ab6e:	06d0      	lsls	r0, r2, #27
 800ab70:	bf44      	itt	mi
 800ab72:	2320      	movmi	r3, #32
 800ab74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab78:	0711      	lsls	r1, r2, #28
 800ab7a:	bf44      	itt	mi
 800ab7c:	232b      	movmi	r3, #43	@ 0x2b
 800ab7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab82:	f89a 3000 	ldrb.w	r3, [sl]
 800ab86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab88:	d015      	beq.n	800abb6 <_svfiprintf_r+0xfa>
 800ab8a:	9a07      	ldr	r2, [sp, #28]
 800ab8c:	4654      	mov	r4, sl
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f04f 0c0a 	mov.w	ip, #10
 800ab94:	4621      	mov	r1, r4
 800ab96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab9a:	3b30      	subs	r3, #48	@ 0x30
 800ab9c:	2b09      	cmp	r3, #9
 800ab9e:	d94b      	bls.n	800ac38 <_svfiprintf_r+0x17c>
 800aba0:	b1b0      	cbz	r0, 800abd0 <_svfiprintf_r+0x114>
 800aba2:	9207      	str	r2, [sp, #28]
 800aba4:	e014      	b.n	800abd0 <_svfiprintf_r+0x114>
 800aba6:	eba0 0308 	sub.w	r3, r0, r8
 800abaa:	fa09 f303 	lsl.w	r3, r9, r3
 800abae:	4313      	orrs	r3, r2
 800abb0:	9304      	str	r3, [sp, #16]
 800abb2:	46a2      	mov	sl, r4
 800abb4:	e7d2      	b.n	800ab5c <_svfiprintf_r+0xa0>
 800abb6:	9b03      	ldr	r3, [sp, #12]
 800abb8:	1d19      	adds	r1, r3, #4
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	9103      	str	r1, [sp, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfbb      	ittet	lt
 800abc2:	425b      	neglt	r3, r3
 800abc4:	f042 0202 	orrlt.w	r2, r2, #2
 800abc8:	9307      	strge	r3, [sp, #28]
 800abca:	9307      	strlt	r3, [sp, #28]
 800abcc:	bfb8      	it	lt
 800abce:	9204      	strlt	r2, [sp, #16]
 800abd0:	7823      	ldrb	r3, [r4, #0]
 800abd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800abd4:	d10a      	bne.n	800abec <_svfiprintf_r+0x130>
 800abd6:	7863      	ldrb	r3, [r4, #1]
 800abd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abda:	d132      	bne.n	800ac42 <_svfiprintf_r+0x186>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	1d1a      	adds	r2, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	9203      	str	r2, [sp, #12]
 800abe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abe8:	3402      	adds	r4, #2
 800abea:	9305      	str	r3, [sp, #20]
 800abec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800acb0 <_svfiprintf_r+0x1f4>
 800abf0:	7821      	ldrb	r1, [r4, #0]
 800abf2:	2203      	movs	r2, #3
 800abf4:	4650      	mov	r0, sl
 800abf6:	f7f5 faf3 	bl	80001e0 <memchr>
 800abfa:	b138      	cbz	r0, 800ac0c <_svfiprintf_r+0x150>
 800abfc:	9b04      	ldr	r3, [sp, #16]
 800abfe:	eba0 000a 	sub.w	r0, r0, sl
 800ac02:	2240      	movs	r2, #64	@ 0x40
 800ac04:	4082      	lsls	r2, r0
 800ac06:	4313      	orrs	r3, r2
 800ac08:	3401      	adds	r4, #1
 800ac0a:	9304      	str	r3, [sp, #16]
 800ac0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac10:	4824      	ldr	r0, [pc, #144]	@ (800aca4 <_svfiprintf_r+0x1e8>)
 800ac12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac16:	2206      	movs	r2, #6
 800ac18:	f7f5 fae2 	bl	80001e0 <memchr>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d036      	beq.n	800ac8e <_svfiprintf_r+0x1d2>
 800ac20:	4b21      	ldr	r3, [pc, #132]	@ (800aca8 <_svfiprintf_r+0x1ec>)
 800ac22:	bb1b      	cbnz	r3, 800ac6c <_svfiprintf_r+0x1b0>
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	3307      	adds	r3, #7
 800ac28:	f023 0307 	bic.w	r3, r3, #7
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	9303      	str	r3, [sp, #12]
 800ac30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac32:	4433      	add	r3, r6
 800ac34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac36:	e76a      	b.n	800ab0e <_svfiprintf_r+0x52>
 800ac38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	2001      	movs	r0, #1
 800ac40:	e7a8      	b.n	800ab94 <_svfiprintf_r+0xd8>
 800ac42:	2300      	movs	r3, #0
 800ac44:	3401      	adds	r4, #1
 800ac46:	9305      	str	r3, [sp, #20]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	f04f 0c0a 	mov.w	ip, #10
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac54:	3a30      	subs	r2, #48	@ 0x30
 800ac56:	2a09      	cmp	r2, #9
 800ac58:	d903      	bls.n	800ac62 <_svfiprintf_r+0x1a6>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0c6      	beq.n	800abec <_svfiprintf_r+0x130>
 800ac5e:	9105      	str	r1, [sp, #20]
 800ac60:	e7c4      	b.n	800abec <_svfiprintf_r+0x130>
 800ac62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac66:	4604      	mov	r4, r0
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e7f0      	b.n	800ac4e <_svfiprintf_r+0x192>
 800ac6c:	ab03      	add	r3, sp, #12
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	462a      	mov	r2, r5
 800ac72:	4b0e      	ldr	r3, [pc, #56]	@ (800acac <_svfiprintf_r+0x1f0>)
 800ac74:	a904      	add	r1, sp, #16
 800ac76:	4638      	mov	r0, r7
 800ac78:	f3af 8000 	nop.w
 800ac7c:	1c42      	adds	r2, r0, #1
 800ac7e:	4606      	mov	r6, r0
 800ac80:	d1d6      	bne.n	800ac30 <_svfiprintf_r+0x174>
 800ac82:	89ab      	ldrh	r3, [r5, #12]
 800ac84:	065b      	lsls	r3, r3, #25
 800ac86:	f53f af2d 	bmi.w	800aae4 <_svfiprintf_r+0x28>
 800ac8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac8c:	e72c      	b.n	800aae8 <_svfiprintf_r+0x2c>
 800ac8e:	ab03      	add	r3, sp, #12
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	462a      	mov	r2, r5
 800ac94:	4b05      	ldr	r3, [pc, #20]	@ (800acac <_svfiprintf_r+0x1f0>)
 800ac96:	a904      	add	r1, sp, #16
 800ac98:	4638      	mov	r0, r7
 800ac9a:	f000 fb87 	bl	800b3ac <_printf_i>
 800ac9e:	e7ed      	b.n	800ac7c <_svfiprintf_r+0x1c0>
 800aca0:	0800c69c 	.word	0x0800c69c
 800aca4:	0800c6a6 	.word	0x0800c6a6
 800aca8:	00000000 	.word	0x00000000
 800acac:	0800aa05 	.word	0x0800aa05
 800acb0:	0800c6a2 	.word	0x0800c6a2

0800acb4 <_sungetc_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	1c4b      	adds	r3, r1, #1
 800acb8:	4614      	mov	r4, r2
 800acba:	d103      	bne.n	800acc4 <_sungetc_r+0x10>
 800acbc:	f04f 35ff 	mov.w	r5, #4294967295
 800acc0:	4628      	mov	r0, r5
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	8993      	ldrh	r3, [r2, #12]
 800acc6:	f023 0320 	bic.w	r3, r3, #32
 800acca:	8193      	strh	r3, [r2, #12]
 800accc:	6853      	ldr	r3, [r2, #4]
 800acce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800acd0:	b2cd      	uxtb	r5, r1
 800acd2:	b18a      	cbz	r2, 800acf8 <_sungetc_r+0x44>
 800acd4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800acd6:	429a      	cmp	r2, r3
 800acd8:	dd08      	ble.n	800acec <_sungetc_r+0x38>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	1e5a      	subs	r2, r3, #1
 800acde:	6022      	str	r2, [r4, #0]
 800ace0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ace4:	6863      	ldr	r3, [r4, #4]
 800ace6:	3301      	adds	r3, #1
 800ace8:	6063      	str	r3, [r4, #4]
 800acea:	e7e9      	b.n	800acc0 <_sungetc_r+0xc>
 800acec:	4621      	mov	r1, r4
 800acee:	f000 ff12 	bl	800bb16 <__submore>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d0f1      	beq.n	800acda <_sungetc_r+0x26>
 800acf6:	e7e1      	b.n	800acbc <_sungetc_r+0x8>
 800acf8:	6921      	ldr	r1, [r4, #16]
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	b141      	cbz	r1, 800ad10 <_sungetc_r+0x5c>
 800acfe:	4291      	cmp	r1, r2
 800ad00:	d206      	bcs.n	800ad10 <_sungetc_r+0x5c>
 800ad02:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ad06:	42a9      	cmp	r1, r5
 800ad08:	d102      	bne.n	800ad10 <_sungetc_r+0x5c>
 800ad0a:	3a01      	subs	r2, #1
 800ad0c:	6022      	str	r2, [r4, #0]
 800ad0e:	e7ea      	b.n	800ace6 <_sungetc_r+0x32>
 800ad10:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ad14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ad1e:	4623      	mov	r3, r4
 800ad20:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	2301      	movs	r3, #1
 800ad28:	e7de      	b.n	800ace8 <_sungetc_r+0x34>

0800ad2a <__ssrefill_r>:
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ad30:	b169      	cbz	r1, 800ad4e <__ssrefill_r+0x24>
 800ad32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad36:	4299      	cmp	r1, r3
 800ad38:	d001      	beq.n	800ad3e <__ssrefill_r+0x14>
 800ad3a:	f7ff fd6b 	bl	800a814 <_free_r>
 800ad3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad40:	6063      	str	r3, [r4, #4]
 800ad42:	2000      	movs	r0, #0
 800ad44:	6360      	str	r0, [r4, #52]	@ 0x34
 800ad46:	b113      	cbz	r3, 800ad4e <__ssrefill_r+0x24>
 800ad48:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	bd10      	pop	{r4, pc}
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	2300      	movs	r3, #0
 800ad54:	6063      	str	r3, [r4, #4]
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	f043 0320 	orr.w	r3, r3, #32
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad62:	e7f3      	b.n	800ad4c <__ssrefill_r+0x22>

0800ad64 <__ssvfiscanf_r>:
 800ad64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad68:	460c      	mov	r4, r1
 800ad6a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ad6e:	2100      	movs	r1, #0
 800ad70:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ad74:	49a5      	ldr	r1, [pc, #660]	@ (800b00c <__ssvfiscanf_r+0x2a8>)
 800ad76:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ad78:	f10d 0804 	add.w	r8, sp, #4
 800ad7c:	49a4      	ldr	r1, [pc, #656]	@ (800b010 <__ssvfiscanf_r+0x2ac>)
 800ad7e:	4fa5      	ldr	r7, [pc, #660]	@ (800b014 <__ssvfiscanf_r+0x2b0>)
 800ad80:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ad84:	4606      	mov	r6, r0
 800ad86:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	7813      	ldrb	r3, [r2, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 8158 	beq.w	800b042 <__ssvfiscanf_r+0x2de>
 800ad92:	5cf9      	ldrb	r1, [r7, r3]
 800ad94:	f011 0108 	ands.w	r1, r1, #8
 800ad98:	f102 0501 	add.w	r5, r2, #1
 800ad9c:	d019      	beq.n	800add2 <__ssvfiscanf_r+0x6e>
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd0f      	ble.n	800adc4 <__ssvfiscanf_r+0x60>
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	781a      	ldrb	r2, [r3, #0]
 800ada8:	5cba      	ldrb	r2, [r7, r2]
 800adaa:	0712      	lsls	r2, r2, #28
 800adac:	d401      	bmi.n	800adb2 <__ssvfiscanf_r+0x4e>
 800adae:	462a      	mov	r2, r5
 800adb0:	e7eb      	b.n	800ad8a <__ssvfiscanf_r+0x26>
 800adb2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800adb4:	3201      	adds	r2, #1
 800adb6:	9245      	str	r2, [sp, #276]	@ 0x114
 800adb8:	6862      	ldr	r2, [r4, #4]
 800adba:	3301      	adds	r3, #1
 800adbc:	3a01      	subs	r2, #1
 800adbe:	6062      	str	r2, [r4, #4]
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	e7ec      	b.n	800ad9e <__ssvfiscanf_r+0x3a>
 800adc4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800adc6:	4621      	mov	r1, r4
 800adc8:	4630      	mov	r0, r6
 800adca:	4798      	blx	r3
 800adcc:	2800      	cmp	r0, #0
 800adce:	d0e9      	beq.n	800ada4 <__ssvfiscanf_r+0x40>
 800add0:	e7ed      	b.n	800adae <__ssvfiscanf_r+0x4a>
 800add2:	2b25      	cmp	r3, #37	@ 0x25
 800add4:	d012      	beq.n	800adfc <__ssvfiscanf_r+0x98>
 800add6:	4699      	mov	r9, r3
 800add8:	6863      	ldr	r3, [r4, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	f340 8093 	ble.w	800af06 <__ssvfiscanf_r+0x1a2>
 800ade0:	6822      	ldr	r2, [r4, #0]
 800ade2:	7813      	ldrb	r3, [r2, #0]
 800ade4:	454b      	cmp	r3, r9
 800ade6:	f040 812c 	bne.w	800b042 <__ssvfiscanf_r+0x2de>
 800adea:	6863      	ldr	r3, [r4, #4]
 800adec:	3b01      	subs	r3, #1
 800adee:	6063      	str	r3, [r4, #4]
 800adf0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800adf2:	3201      	adds	r2, #1
 800adf4:	3301      	adds	r3, #1
 800adf6:	6022      	str	r2, [r4, #0]
 800adf8:	9345      	str	r3, [sp, #276]	@ 0x114
 800adfa:	e7d8      	b.n	800adae <__ssvfiscanf_r+0x4a>
 800adfc:	9141      	str	r1, [sp, #260]	@ 0x104
 800adfe:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ae00:	7853      	ldrb	r3, [r2, #1]
 800ae02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae04:	bf02      	ittt	eq
 800ae06:	2310      	moveq	r3, #16
 800ae08:	1c95      	addeq	r5, r2, #2
 800ae0a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ae0c:	220a      	movs	r2, #10
 800ae0e:	46a9      	mov	r9, r5
 800ae10:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ae14:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ae18:	2b09      	cmp	r3, #9
 800ae1a:	d91e      	bls.n	800ae5a <__ssvfiscanf_r+0xf6>
 800ae1c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b018 <__ssvfiscanf_r+0x2b4>
 800ae20:	2203      	movs	r2, #3
 800ae22:	4650      	mov	r0, sl
 800ae24:	f7f5 f9dc 	bl	80001e0 <memchr>
 800ae28:	b138      	cbz	r0, 800ae3a <__ssvfiscanf_r+0xd6>
 800ae2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ae2c:	eba0 000a 	sub.w	r0, r0, sl
 800ae30:	2301      	movs	r3, #1
 800ae32:	4083      	lsls	r3, r0
 800ae34:	4313      	orrs	r3, r2
 800ae36:	9341      	str	r3, [sp, #260]	@ 0x104
 800ae38:	464d      	mov	r5, r9
 800ae3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae3e:	2b78      	cmp	r3, #120	@ 0x78
 800ae40:	d806      	bhi.n	800ae50 <__ssvfiscanf_r+0xec>
 800ae42:	2b57      	cmp	r3, #87	@ 0x57
 800ae44:	d810      	bhi.n	800ae68 <__ssvfiscanf_r+0x104>
 800ae46:	2b25      	cmp	r3, #37	@ 0x25
 800ae48:	d0c5      	beq.n	800add6 <__ssvfiscanf_r+0x72>
 800ae4a:	d857      	bhi.n	800aefc <__ssvfiscanf_r+0x198>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d065      	beq.n	800af1c <__ssvfiscanf_r+0x1b8>
 800ae50:	2303      	movs	r3, #3
 800ae52:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ae54:	230a      	movs	r3, #10
 800ae56:	9342      	str	r3, [sp, #264]	@ 0x108
 800ae58:	e078      	b.n	800af4c <__ssvfiscanf_r+0x1e8>
 800ae5a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ae5c:	fb02 1103 	mla	r1, r2, r3, r1
 800ae60:	3930      	subs	r1, #48	@ 0x30
 800ae62:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ae64:	464d      	mov	r5, r9
 800ae66:	e7d2      	b.n	800ae0e <__ssvfiscanf_r+0xaa>
 800ae68:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ae6c:	2a20      	cmp	r2, #32
 800ae6e:	d8ef      	bhi.n	800ae50 <__ssvfiscanf_r+0xec>
 800ae70:	a101      	add	r1, pc, #4	@ (adr r1, 800ae78 <__ssvfiscanf_r+0x114>)
 800ae72:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae76:	bf00      	nop
 800ae78:	0800af2b 	.word	0x0800af2b
 800ae7c:	0800ae51 	.word	0x0800ae51
 800ae80:	0800ae51 	.word	0x0800ae51
 800ae84:	0800af85 	.word	0x0800af85
 800ae88:	0800ae51 	.word	0x0800ae51
 800ae8c:	0800ae51 	.word	0x0800ae51
 800ae90:	0800ae51 	.word	0x0800ae51
 800ae94:	0800ae51 	.word	0x0800ae51
 800ae98:	0800ae51 	.word	0x0800ae51
 800ae9c:	0800ae51 	.word	0x0800ae51
 800aea0:	0800ae51 	.word	0x0800ae51
 800aea4:	0800af9b 	.word	0x0800af9b
 800aea8:	0800af81 	.word	0x0800af81
 800aeac:	0800af03 	.word	0x0800af03
 800aeb0:	0800af03 	.word	0x0800af03
 800aeb4:	0800af03 	.word	0x0800af03
 800aeb8:	0800ae51 	.word	0x0800ae51
 800aebc:	0800af3d 	.word	0x0800af3d
 800aec0:	0800ae51 	.word	0x0800ae51
 800aec4:	0800ae51 	.word	0x0800ae51
 800aec8:	0800ae51 	.word	0x0800ae51
 800aecc:	0800ae51 	.word	0x0800ae51
 800aed0:	0800afab 	.word	0x0800afab
 800aed4:	0800af45 	.word	0x0800af45
 800aed8:	0800af23 	.word	0x0800af23
 800aedc:	0800ae51 	.word	0x0800ae51
 800aee0:	0800ae51 	.word	0x0800ae51
 800aee4:	0800afa7 	.word	0x0800afa7
 800aee8:	0800ae51 	.word	0x0800ae51
 800aeec:	0800af81 	.word	0x0800af81
 800aef0:	0800ae51 	.word	0x0800ae51
 800aef4:	0800ae51 	.word	0x0800ae51
 800aef8:	0800af2b 	.word	0x0800af2b
 800aefc:	3b45      	subs	r3, #69	@ 0x45
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d8a6      	bhi.n	800ae50 <__ssvfiscanf_r+0xec>
 800af02:	2305      	movs	r3, #5
 800af04:	e021      	b.n	800af4a <__ssvfiscanf_r+0x1e6>
 800af06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800af08:	4621      	mov	r1, r4
 800af0a:	4630      	mov	r0, r6
 800af0c:	4798      	blx	r3
 800af0e:	2800      	cmp	r0, #0
 800af10:	f43f af66 	beq.w	800ade0 <__ssvfiscanf_r+0x7c>
 800af14:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800af16:	2800      	cmp	r0, #0
 800af18:	f040 808b 	bne.w	800b032 <__ssvfiscanf_r+0x2ce>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e08b      	b.n	800b03a <__ssvfiscanf_r+0x2d6>
 800af22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800af24:	f042 0220 	orr.w	r2, r2, #32
 800af28:	9241      	str	r2, [sp, #260]	@ 0x104
 800af2a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800af2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af30:	9241      	str	r2, [sp, #260]	@ 0x104
 800af32:	2210      	movs	r2, #16
 800af34:	2b6e      	cmp	r3, #110	@ 0x6e
 800af36:	9242      	str	r2, [sp, #264]	@ 0x108
 800af38:	d902      	bls.n	800af40 <__ssvfiscanf_r+0x1dc>
 800af3a:	e005      	b.n	800af48 <__ssvfiscanf_r+0x1e4>
 800af3c:	2300      	movs	r3, #0
 800af3e:	9342      	str	r3, [sp, #264]	@ 0x108
 800af40:	2303      	movs	r3, #3
 800af42:	e002      	b.n	800af4a <__ssvfiscanf_r+0x1e6>
 800af44:	2308      	movs	r3, #8
 800af46:	9342      	str	r3, [sp, #264]	@ 0x108
 800af48:	2304      	movs	r3, #4
 800af4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800af4c:	6863      	ldr	r3, [r4, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	dd39      	ble.n	800afc6 <__ssvfiscanf_r+0x262>
 800af52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af54:	0659      	lsls	r1, r3, #25
 800af56:	d404      	bmi.n	800af62 <__ssvfiscanf_r+0x1fe>
 800af58:	6823      	ldr	r3, [r4, #0]
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	5cba      	ldrb	r2, [r7, r2]
 800af5e:	0712      	lsls	r2, r2, #28
 800af60:	d438      	bmi.n	800afd4 <__ssvfiscanf_r+0x270>
 800af62:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800af64:	2b02      	cmp	r3, #2
 800af66:	dc47      	bgt.n	800aff8 <__ssvfiscanf_r+0x294>
 800af68:	466b      	mov	r3, sp
 800af6a:	4622      	mov	r2, r4
 800af6c:	a941      	add	r1, sp, #260	@ 0x104
 800af6e:	4630      	mov	r0, r6
 800af70:	f000 fb3c 	bl	800b5ec <_scanf_chars>
 800af74:	2801      	cmp	r0, #1
 800af76:	d064      	beq.n	800b042 <__ssvfiscanf_r+0x2de>
 800af78:	2802      	cmp	r0, #2
 800af7a:	f47f af18 	bne.w	800adae <__ssvfiscanf_r+0x4a>
 800af7e:	e7c9      	b.n	800af14 <__ssvfiscanf_r+0x1b0>
 800af80:	220a      	movs	r2, #10
 800af82:	e7d7      	b.n	800af34 <__ssvfiscanf_r+0x1d0>
 800af84:	4629      	mov	r1, r5
 800af86:	4640      	mov	r0, r8
 800af88:	f000 fd8c 	bl	800baa4 <__sccl>
 800af8c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af92:	9341      	str	r3, [sp, #260]	@ 0x104
 800af94:	4605      	mov	r5, r0
 800af96:	2301      	movs	r3, #1
 800af98:	e7d7      	b.n	800af4a <__ssvfiscanf_r+0x1e6>
 800af9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800af9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa0:	9341      	str	r3, [sp, #260]	@ 0x104
 800afa2:	2300      	movs	r3, #0
 800afa4:	e7d1      	b.n	800af4a <__ssvfiscanf_r+0x1e6>
 800afa6:	2302      	movs	r3, #2
 800afa8:	e7cf      	b.n	800af4a <__ssvfiscanf_r+0x1e6>
 800afaa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800afac:	06c3      	lsls	r3, r0, #27
 800afae:	f53f aefe 	bmi.w	800adae <__ssvfiscanf_r+0x4a>
 800afb2:	9b00      	ldr	r3, [sp, #0]
 800afb4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800afb6:	1d19      	adds	r1, r3, #4
 800afb8:	9100      	str	r1, [sp, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	07c0      	lsls	r0, r0, #31
 800afbe:	bf4c      	ite	mi
 800afc0:	801a      	strhmi	r2, [r3, #0]
 800afc2:	601a      	strpl	r2, [r3, #0]
 800afc4:	e6f3      	b.n	800adae <__ssvfiscanf_r+0x4a>
 800afc6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800afc8:	4621      	mov	r1, r4
 800afca:	4630      	mov	r0, r6
 800afcc:	4798      	blx	r3
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0bf      	beq.n	800af52 <__ssvfiscanf_r+0x1ee>
 800afd2:	e79f      	b.n	800af14 <__ssvfiscanf_r+0x1b0>
 800afd4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800afd6:	3201      	adds	r2, #1
 800afd8:	9245      	str	r2, [sp, #276]	@ 0x114
 800afda:	6862      	ldr	r2, [r4, #4]
 800afdc:	3a01      	subs	r2, #1
 800afde:	2a00      	cmp	r2, #0
 800afe0:	6062      	str	r2, [r4, #4]
 800afe2:	dd02      	ble.n	800afea <__ssvfiscanf_r+0x286>
 800afe4:	3301      	adds	r3, #1
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	e7b6      	b.n	800af58 <__ssvfiscanf_r+0x1f4>
 800afea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800afec:	4621      	mov	r1, r4
 800afee:	4630      	mov	r0, r6
 800aff0:	4798      	blx	r3
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d0b0      	beq.n	800af58 <__ssvfiscanf_r+0x1f4>
 800aff6:	e78d      	b.n	800af14 <__ssvfiscanf_r+0x1b0>
 800aff8:	2b04      	cmp	r3, #4
 800affa:	dc0f      	bgt.n	800b01c <__ssvfiscanf_r+0x2b8>
 800affc:	466b      	mov	r3, sp
 800affe:	4622      	mov	r2, r4
 800b000:	a941      	add	r1, sp, #260	@ 0x104
 800b002:	4630      	mov	r0, r6
 800b004:	f000 fb4c 	bl	800b6a0 <_scanf_i>
 800b008:	e7b4      	b.n	800af74 <__ssvfiscanf_r+0x210>
 800b00a:	bf00      	nop
 800b00c:	0800acb5 	.word	0x0800acb5
 800b010:	0800ad2b 	.word	0x0800ad2b
 800b014:	0800c6eb 	.word	0x0800c6eb
 800b018:	0800c6a2 	.word	0x0800c6a2
 800b01c:	4b0a      	ldr	r3, [pc, #40]	@ (800b048 <__ssvfiscanf_r+0x2e4>)
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f43f aec5 	beq.w	800adae <__ssvfiscanf_r+0x4a>
 800b024:	466b      	mov	r3, sp
 800b026:	4622      	mov	r2, r4
 800b028:	a941      	add	r1, sp, #260	@ 0x104
 800b02a:	4630      	mov	r0, r6
 800b02c:	f3af 8000 	nop.w
 800b030:	e7a0      	b.n	800af74 <__ssvfiscanf_r+0x210>
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	065b      	lsls	r3, r3, #25
 800b036:	f53f af71 	bmi.w	800af1c <__ssvfiscanf_r+0x1b8>
 800b03a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b042:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b044:	e7f9      	b.n	800b03a <__ssvfiscanf_r+0x2d6>
 800b046:	bf00      	nop
 800b048:	00000000 	.word	0x00000000

0800b04c <__sfputc_r>:
 800b04c:	6893      	ldr	r3, [r2, #8]
 800b04e:	3b01      	subs	r3, #1
 800b050:	2b00      	cmp	r3, #0
 800b052:	b410      	push	{r4}
 800b054:	6093      	str	r3, [r2, #8]
 800b056:	da08      	bge.n	800b06a <__sfputc_r+0x1e>
 800b058:	6994      	ldr	r4, [r2, #24]
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	db01      	blt.n	800b062 <__sfputc_r+0x16>
 800b05e:	290a      	cmp	r1, #10
 800b060:	d103      	bne.n	800b06a <__sfputc_r+0x1e>
 800b062:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b066:	f7ff ba90 	b.w	800a58a <__swbuf_r>
 800b06a:	6813      	ldr	r3, [r2, #0]
 800b06c:	1c58      	adds	r0, r3, #1
 800b06e:	6010      	str	r0, [r2, #0]
 800b070:	7019      	strb	r1, [r3, #0]
 800b072:	4608      	mov	r0, r1
 800b074:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <__sfputs_r>:
 800b07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07c:	4606      	mov	r6, r0
 800b07e:	460f      	mov	r7, r1
 800b080:	4614      	mov	r4, r2
 800b082:	18d5      	adds	r5, r2, r3
 800b084:	42ac      	cmp	r4, r5
 800b086:	d101      	bne.n	800b08c <__sfputs_r+0x12>
 800b088:	2000      	movs	r0, #0
 800b08a:	e007      	b.n	800b09c <__sfputs_r+0x22>
 800b08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b090:	463a      	mov	r2, r7
 800b092:	4630      	mov	r0, r6
 800b094:	f7ff ffda 	bl	800b04c <__sfputc_r>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d1f3      	bne.n	800b084 <__sfputs_r+0xa>
 800b09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0a0 <_vfiprintf_r>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	460d      	mov	r5, r1
 800b0a6:	b09d      	sub	sp, #116	@ 0x74
 800b0a8:	4614      	mov	r4, r2
 800b0aa:	4698      	mov	r8, r3
 800b0ac:	4606      	mov	r6, r0
 800b0ae:	b118      	cbz	r0, 800b0b8 <_vfiprintf_r+0x18>
 800b0b0:	6a03      	ldr	r3, [r0, #32]
 800b0b2:	b90b      	cbnz	r3, 800b0b8 <_vfiprintf_r+0x18>
 800b0b4:	f7ff f934 	bl	800a320 <__sinit>
 800b0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ba:	07d9      	lsls	r1, r3, #31
 800b0bc:	d405      	bmi.n	800b0ca <_vfiprintf_r+0x2a>
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	059a      	lsls	r2, r3, #22
 800b0c2:	d402      	bmi.n	800b0ca <_vfiprintf_r+0x2a>
 800b0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0c6:	f7ff fb94 	bl	800a7f2 <__retarget_lock_acquire_recursive>
 800b0ca:	89ab      	ldrh	r3, [r5, #12]
 800b0cc:	071b      	lsls	r3, r3, #28
 800b0ce:	d501      	bpl.n	800b0d4 <_vfiprintf_r+0x34>
 800b0d0:	692b      	ldr	r3, [r5, #16]
 800b0d2:	b99b      	cbnz	r3, 800b0fc <_vfiprintf_r+0x5c>
 800b0d4:	4629      	mov	r1, r5
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f7ff fa96 	bl	800a608 <__swsetup_r>
 800b0dc:	b170      	cbz	r0, 800b0fc <_vfiprintf_r+0x5c>
 800b0de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0e0:	07dc      	lsls	r4, r3, #31
 800b0e2:	d504      	bpl.n	800b0ee <_vfiprintf_r+0x4e>
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	b01d      	add	sp, #116	@ 0x74
 800b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ee:	89ab      	ldrh	r3, [r5, #12]
 800b0f0:	0598      	lsls	r0, r3, #22
 800b0f2:	d4f7      	bmi.n	800b0e4 <_vfiprintf_r+0x44>
 800b0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0f6:	f7ff fb7d 	bl	800a7f4 <__retarget_lock_release_recursive>
 800b0fa:	e7f3      	b.n	800b0e4 <_vfiprintf_r+0x44>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b100:	2320      	movs	r3, #32
 800b102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b106:	f8cd 800c 	str.w	r8, [sp, #12]
 800b10a:	2330      	movs	r3, #48	@ 0x30
 800b10c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b2bc <_vfiprintf_r+0x21c>
 800b110:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b114:	f04f 0901 	mov.w	r9, #1
 800b118:	4623      	mov	r3, r4
 800b11a:	469a      	mov	sl, r3
 800b11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b120:	b10a      	cbz	r2, 800b126 <_vfiprintf_r+0x86>
 800b122:	2a25      	cmp	r2, #37	@ 0x25
 800b124:	d1f9      	bne.n	800b11a <_vfiprintf_r+0x7a>
 800b126:	ebba 0b04 	subs.w	fp, sl, r4
 800b12a:	d00b      	beq.n	800b144 <_vfiprintf_r+0xa4>
 800b12c:	465b      	mov	r3, fp
 800b12e:	4622      	mov	r2, r4
 800b130:	4629      	mov	r1, r5
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff ffa1 	bl	800b07a <__sfputs_r>
 800b138:	3001      	adds	r0, #1
 800b13a:	f000 80a7 	beq.w	800b28c <_vfiprintf_r+0x1ec>
 800b13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b140:	445a      	add	r2, fp
 800b142:	9209      	str	r2, [sp, #36]	@ 0x24
 800b144:	f89a 3000 	ldrb.w	r3, [sl]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 809f 	beq.w	800b28c <_vfiprintf_r+0x1ec>
 800b14e:	2300      	movs	r3, #0
 800b150:	f04f 32ff 	mov.w	r2, #4294967295
 800b154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b158:	f10a 0a01 	add.w	sl, sl, #1
 800b15c:	9304      	str	r3, [sp, #16]
 800b15e:	9307      	str	r3, [sp, #28]
 800b160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b164:	931a      	str	r3, [sp, #104]	@ 0x68
 800b166:	4654      	mov	r4, sl
 800b168:	2205      	movs	r2, #5
 800b16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b16e:	4853      	ldr	r0, [pc, #332]	@ (800b2bc <_vfiprintf_r+0x21c>)
 800b170:	f7f5 f836 	bl	80001e0 <memchr>
 800b174:	9a04      	ldr	r2, [sp, #16]
 800b176:	b9d8      	cbnz	r0, 800b1b0 <_vfiprintf_r+0x110>
 800b178:	06d1      	lsls	r1, r2, #27
 800b17a:	bf44      	itt	mi
 800b17c:	2320      	movmi	r3, #32
 800b17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b182:	0713      	lsls	r3, r2, #28
 800b184:	bf44      	itt	mi
 800b186:	232b      	movmi	r3, #43	@ 0x2b
 800b188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b18c:	f89a 3000 	ldrb.w	r3, [sl]
 800b190:	2b2a      	cmp	r3, #42	@ 0x2a
 800b192:	d015      	beq.n	800b1c0 <_vfiprintf_r+0x120>
 800b194:	9a07      	ldr	r2, [sp, #28]
 800b196:	4654      	mov	r4, sl
 800b198:	2000      	movs	r0, #0
 800b19a:	f04f 0c0a 	mov.w	ip, #10
 800b19e:	4621      	mov	r1, r4
 800b1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1a4:	3b30      	subs	r3, #48	@ 0x30
 800b1a6:	2b09      	cmp	r3, #9
 800b1a8:	d94b      	bls.n	800b242 <_vfiprintf_r+0x1a2>
 800b1aa:	b1b0      	cbz	r0, 800b1da <_vfiprintf_r+0x13a>
 800b1ac:	9207      	str	r2, [sp, #28]
 800b1ae:	e014      	b.n	800b1da <_vfiprintf_r+0x13a>
 800b1b0:	eba0 0308 	sub.w	r3, r0, r8
 800b1b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	9304      	str	r3, [sp, #16]
 800b1bc:	46a2      	mov	sl, r4
 800b1be:	e7d2      	b.n	800b166 <_vfiprintf_r+0xc6>
 800b1c0:	9b03      	ldr	r3, [sp, #12]
 800b1c2:	1d19      	adds	r1, r3, #4
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	9103      	str	r1, [sp, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bfbb      	ittet	lt
 800b1cc:	425b      	neglt	r3, r3
 800b1ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b1d2:	9307      	strge	r3, [sp, #28]
 800b1d4:	9307      	strlt	r3, [sp, #28]
 800b1d6:	bfb8      	it	lt
 800b1d8:	9204      	strlt	r2, [sp, #16]
 800b1da:	7823      	ldrb	r3, [r4, #0]
 800b1dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1de:	d10a      	bne.n	800b1f6 <_vfiprintf_r+0x156>
 800b1e0:	7863      	ldrb	r3, [r4, #1]
 800b1e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1e4:	d132      	bne.n	800b24c <_vfiprintf_r+0x1ac>
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	1d1a      	adds	r2, r3, #4
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	9203      	str	r2, [sp, #12]
 800b1ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1f2:	3402      	adds	r4, #2
 800b1f4:	9305      	str	r3, [sp, #20]
 800b1f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b2cc <_vfiprintf_r+0x22c>
 800b1fa:	7821      	ldrb	r1, [r4, #0]
 800b1fc:	2203      	movs	r2, #3
 800b1fe:	4650      	mov	r0, sl
 800b200:	f7f4 ffee 	bl	80001e0 <memchr>
 800b204:	b138      	cbz	r0, 800b216 <_vfiprintf_r+0x176>
 800b206:	9b04      	ldr	r3, [sp, #16]
 800b208:	eba0 000a 	sub.w	r0, r0, sl
 800b20c:	2240      	movs	r2, #64	@ 0x40
 800b20e:	4082      	lsls	r2, r0
 800b210:	4313      	orrs	r3, r2
 800b212:	3401      	adds	r4, #1
 800b214:	9304      	str	r3, [sp, #16]
 800b216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21a:	4829      	ldr	r0, [pc, #164]	@ (800b2c0 <_vfiprintf_r+0x220>)
 800b21c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b220:	2206      	movs	r2, #6
 800b222:	f7f4 ffdd 	bl	80001e0 <memchr>
 800b226:	2800      	cmp	r0, #0
 800b228:	d03f      	beq.n	800b2aa <_vfiprintf_r+0x20a>
 800b22a:	4b26      	ldr	r3, [pc, #152]	@ (800b2c4 <_vfiprintf_r+0x224>)
 800b22c:	bb1b      	cbnz	r3, 800b276 <_vfiprintf_r+0x1d6>
 800b22e:	9b03      	ldr	r3, [sp, #12]
 800b230:	3307      	adds	r3, #7
 800b232:	f023 0307 	bic.w	r3, r3, #7
 800b236:	3308      	adds	r3, #8
 800b238:	9303      	str	r3, [sp, #12]
 800b23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23c:	443b      	add	r3, r7
 800b23e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b240:	e76a      	b.n	800b118 <_vfiprintf_r+0x78>
 800b242:	fb0c 3202 	mla	r2, ip, r2, r3
 800b246:	460c      	mov	r4, r1
 800b248:	2001      	movs	r0, #1
 800b24a:	e7a8      	b.n	800b19e <_vfiprintf_r+0xfe>
 800b24c:	2300      	movs	r3, #0
 800b24e:	3401      	adds	r4, #1
 800b250:	9305      	str	r3, [sp, #20]
 800b252:	4619      	mov	r1, r3
 800b254:	f04f 0c0a 	mov.w	ip, #10
 800b258:	4620      	mov	r0, r4
 800b25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b25e:	3a30      	subs	r2, #48	@ 0x30
 800b260:	2a09      	cmp	r2, #9
 800b262:	d903      	bls.n	800b26c <_vfiprintf_r+0x1cc>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d0c6      	beq.n	800b1f6 <_vfiprintf_r+0x156>
 800b268:	9105      	str	r1, [sp, #20]
 800b26a:	e7c4      	b.n	800b1f6 <_vfiprintf_r+0x156>
 800b26c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b270:	4604      	mov	r4, r0
 800b272:	2301      	movs	r3, #1
 800b274:	e7f0      	b.n	800b258 <_vfiprintf_r+0x1b8>
 800b276:	ab03      	add	r3, sp, #12
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	462a      	mov	r2, r5
 800b27c:	4b12      	ldr	r3, [pc, #72]	@ (800b2c8 <_vfiprintf_r+0x228>)
 800b27e:	a904      	add	r1, sp, #16
 800b280:	4630      	mov	r0, r6
 800b282:	f3af 8000 	nop.w
 800b286:	4607      	mov	r7, r0
 800b288:	1c78      	adds	r0, r7, #1
 800b28a:	d1d6      	bne.n	800b23a <_vfiprintf_r+0x19a>
 800b28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b28e:	07d9      	lsls	r1, r3, #31
 800b290:	d405      	bmi.n	800b29e <_vfiprintf_r+0x1fe>
 800b292:	89ab      	ldrh	r3, [r5, #12]
 800b294:	059a      	lsls	r2, r3, #22
 800b296:	d402      	bmi.n	800b29e <_vfiprintf_r+0x1fe>
 800b298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b29a:	f7ff faab 	bl	800a7f4 <__retarget_lock_release_recursive>
 800b29e:	89ab      	ldrh	r3, [r5, #12]
 800b2a0:	065b      	lsls	r3, r3, #25
 800b2a2:	f53f af1f 	bmi.w	800b0e4 <_vfiprintf_r+0x44>
 800b2a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2a8:	e71e      	b.n	800b0e8 <_vfiprintf_r+0x48>
 800b2aa:	ab03      	add	r3, sp, #12
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	462a      	mov	r2, r5
 800b2b0:	4b05      	ldr	r3, [pc, #20]	@ (800b2c8 <_vfiprintf_r+0x228>)
 800b2b2:	a904      	add	r1, sp, #16
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 f879 	bl	800b3ac <_printf_i>
 800b2ba:	e7e4      	b.n	800b286 <_vfiprintf_r+0x1e6>
 800b2bc:	0800c69c 	.word	0x0800c69c
 800b2c0:	0800c6a6 	.word	0x0800c6a6
 800b2c4:	00000000 	.word	0x00000000
 800b2c8:	0800b07b 	.word	0x0800b07b
 800b2cc:	0800c6a2 	.word	0x0800c6a2

0800b2d0 <_printf_common>:
 800b2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d4:	4616      	mov	r6, r2
 800b2d6:	4698      	mov	r8, r3
 800b2d8:	688a      	ldr	r2, [r1, #8]
 800b2da:	690b      	ldr	r3, [r1, #16]
 800b2dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	bfb8      	it	lt
 800b2e4:	4613      	movlt	r3, r2
 800b2e6:	6033      	str	r3, [r6, #0]
 800b2e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2ec:	4607      	mov	r7, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	b10a      	cbz	r2, 800b2f6 <_printf_common+0x26>
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	6033      	str	r3, [r6, #0]
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	0699      	lsls	r1, r3, #26
 800b2fa:	bf42      	ittt	mi
 800b2fc:	6833      	ldrmi	r3, [r6, #0]
 800b2fe:	3302      	addmi	r3, #2
 800b300:	6033      	strmi	r3, [r6, #0]
 800b302:	6825      	ldr	r5, [r4, #0]
 800b304:	f015 0506 	ands.w	r5, r5, #6
 800b308:	d106      	bne.n	800b318 <_printf_common+0x48>
 800b30a:	f104 0a19 	add.w	sl, r4, #25
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	6832      	ldr	r2, [r6, #0]
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	42ab      	cmp	r3, r5
 800b316:	dc26      	bgt.n	800b366 <_printf_common+0x96>
 800b318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b31c:	6822      	ldr	r2, [r4, #0]
 800b31e:	3b00      	subs	r3, #0
 800b320:	bf18      	it	ne
 800b322:	2301      	movne	r3, #1
 800b324:	0692      	lsls	r2, r2, #26
 800b326:	d42b      	bmi.n	800b380 <_printf_common+0xb0>
 800b328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b32c:	4641      	mov	r1, r8
 800b32e:	4638      	mov	r0, r7
 800b330:	47c8      	blx	r9
 800b332:	3001      	adds	r0, #1
 800b334:	d01e      	beq.n	800b374 <_printf_common+0xa4>
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	6922      	ldr	r2, [r4, #16]
 800b33a:	f003 0306 	and.w	r3, r3, #6
 800b33e:	2b04      	cmp	r3, #4
 800b340:	bf02      	ittt	eq
 800b342:	68e5      	ldreq	r5, [r4, #12]
 800b344:	6833      	ldreq	r3, [r6, #0]
 800b346:	1aed      	subeq	r5, r5, r3
 800b348:	68a3      	ldr	r3, [r4, #8]
 800b34a:	bf0c      	ite	eq
 800b34c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b350:	2500      	movne	r5, #0
 800b352:	4293      	cmp	r3, r2
 800b354:	bfc4      	itt	gt
 800b356:	1a9b      	subgt	r3, r3, r2
 800b358:	18ed      	addgt	r5, r5, r3
 800b35a:	2600      	movs	r6, #0
 800b35c:	341a      	adds	r4, #26
 800b35e:	42b5      	cmp	r5, r6
 800b360:	d11a      	bne.n	800b398 <_printf_common+0xc8>
 800b362:	2000      	movs	r0, #0
 800b364:	e008      	b.n	800b378 <_printf_common+0xa8>
 800b366:	2301      	movs	r3, #1
 800b368:	4652      	mov	r2, sl
 800b36a:	4641      	mov	r1, r8
 800b36c:	4638      	mov	r0, r7
 800b36e:	47c8      	blx	r9
 800b370:	3001      	adds	r0, #1
 800b372:	d103      	bne.n	800b37c <_printf_common+0xac>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37c:	3501      	adds	r5, #1
 800b37e:	e7c6      	b.n	800b30e <_printf_common+0x3e>
 800b380:	18e1      	adds	r1, r4, r3
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	2030      	movs	r0, #48	@ 0x30
 800b386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b38a:	4422      	add	r2, r4
 800b38c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b394:	3302      	adds	r3, #2
 800b396:	e7c7      	b.n	800b328 <_printf_common+0x58>
 800b398:	2301      	movs	r3, #1
 800b39a:	4622      	mov	r2, r4
 800b39c:	4641      	mov	r1, r8
 800b39e:	4638      	mov	r0, r7
 800b3a0:	47c8      	blx	r9
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	d0e6      	beq.n	800b374 <_printf_common+0xa4>
 800b3a6:	3601      	adds	r6, #1
 800b3a8:	e7d9      	b.n	800b35e <_printf_common+0x8e>
	...

0800b3ac <_printf_i>:
 800b3ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b0:	7e0f      	ldrb	r7, [r1, #24]
 800b3b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3b4:	2f78      	cmp	r7, #120	@ 0x78
 800b3b6:	4691      	mov	r9, r2
 800b3b8:	4680      	mov	r8, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	469a      	mov	sl, r3
 800b3be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3c2:	d807      	bhi.n	800b3d4 <_printf_i+0x28>
 800b3c4:	2f62      	cmp	r7, #98	@ 0x62
 800b3c6:	d80a      	bhi.n	800b3de <_printf_i+0x32>
 800b3c8:	2f00      	cmp	r7, #0
 800b3ca:	f000 80d2 	beq.w	800b572 <_printf_i+0x1c6>
 800b3ce:	2f58      	cmp	r7, #88	@ 0x58
 800b3d0:	f000 80b9 	beq.w	800b546 <_printf_i+0x19a>
 800b3d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3dc:	e03a      	b.n	800b454 <_printf_i+0xa8>
 800b3de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3e2:	2b15      	cmp	r3, #21
 800b3e4:	d8f6      	bhi.n	800b3d4 <_printf_i+0x28>
 800b3e6:	a101      	add	r1, pc, #4	@ (adr r1, 800b3ec <_printf_i+0x40>)
 800b3e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3ec:	0800b445 	.word	0x0800b445
 800b3f0:	0800b459 	.word	0x0800b459
 800b3f4:	0800b3d5 	.word	0x0800b3d5
 800b3f8:	0800b3d5 	.word	0x0800b3d5
 800b3fc:	0800b3d5 	.word	0x0800b3d5
 800b400:	0800b3d5 	.word	0x0800b3d5
 800b404:	0800b459 	.word	0x0800b459
 800b408:	0800b3d5 	.word	0x0800b3d5
 800b40c:	0800b3d5 	.word	0x0800b3d5
 800b410:	0800b3d5 	.word	0x0800b3d5
 800b414:	0800b3d5 	.word	0x0800b3d5
 800b418:	0800b559 	.word	0x0800b559
 800b41c:	0800b483 	.word	0x0800b483
 800b420:	0800b513 	.word	0x0800b513
 800b424:	0800b3d5 	.word	0x0800b3d5
 800b428:	0800b3d5 	.word	0x0800b3d5
 800b42c:	0800b57b 	.word	0x0800b57b
 800b430:	0800b3d5 	.word	0x0800b3d5
 800b434:	0800b483 	.word	0x0800b483
 800b438:	0800b3d5 	.word	0x0800b3d5
 800b43c:	0800b3d5 	.word	0x0800b3d5
 800b440:	0800b51b 	.word	0x0800b51b
 800b444:	6833      	ldr	r3, [r6, #0]
 800b446:	1d1a      	adds	r2, r3, #4
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6032      	str	r2, [r6, #0]
 800b44c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b454:	2301      	movs	r3, #1
 800b456:	e09d      	b.n	800b594 <_printf_i+0x1e8>
 800b458:	6833      	ldr	r3, [r6, #0]
 800b45a:	6820      	ldr	r0, [r4, #0]
 800b45c:	1d19      	adds	r1, r3, #4
 800b45e:	6031      	str	r1, [r6, #0]
 800b460:	0606      	lsls	r6, r0, #24
 800b462:	d501      	bpl.n	800b468 <_printf_i+0xbc>
 800b464:	681d      	ldr	r5, [r3, #0]
 800b466:	e003      	b.n	800b470 <_printf_i+0xc4>
 800b468:	0645      	lsls	r5, r0, #25
 800b46a:	d5fb      	bpl.n	800b464 <_printf_i+0xb8>
 800b46c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b470:	2d00      	cmp	r5, #0
 800b472:	da03      	bge.n	800b47c <_printf_i+0xd0>
 800b474:	232d      	movs	r3, #45	@ 0x2d
 800b476:	426d      	negs	r5, r5
 800b478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b47c:	4859      	ldr	r0, [pc, #356]	@ (800b5e4 <_printf_i+0x238>)
 800b47e:	230a      	movs	r3, #10
 800b480:	e011      	b.n	800b4a6 <_printf_i+0xfa>
 800b482:	6821      	ldr	r1, [r4, #0]
 800b484:	6833      	ldr	r3, [r6, #0]
 800b486:	0608      	lsls	r0, r1, #24
 800b488:	f853 5b04 	ldr.w	r5, [r3], #4
 800b48c:	d402      	bmi.n	800b494 <_printf_i+0xe8>
 800b48e:	0649      	lsls	r1, r1, #25
 800b490:	bf48      	it	mi
 800b492:	b2ad      	uxthmi	r5, r5
 800b494:	2f6f      	cmp	r7, #111	@ 0x6f
 800b496:	4853      	ldr	r0, [pc, #332]	@ (800b5e4 <_printf_i+0x238>)
 800b498:	6033      	str	r3, [r6, #0]
 800b49a:	bf14      	ite	ne
 800b49c:	230a      	movne	r3, #10
 800b49e:	2308      	moveq	r3, #8
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4a6:	6866      	ldr	r6, [r4, #4]
 800b4a8:	60a6      	str	r6, [r4, #8]
 800b4aa:	2e00      	cmp	r6, #0
 800b4ac:	bfa2      	ittt	ge
 800b4ae:	6821      	ldrge	r1, [r4, #0]
 800b4b0:	f021 0104 	bicge.w	r1, r1, #4
 800b4b4:	6021      	strge	r1, [r4, #0]
 800b4b6:	b90d      	cbnz	r5, 800b4bc <_printf_i+0x110>
 800b4b8:	2e00      	cmp	r6, #0
 800b4ba:	d04b      	beq.n	800b554 <_printf_i+0x1a8>
 800b4bc:	4616      	mov	r6, r2
 800b4be:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4c2:	fb03 5711 	mls	r7, r3, r1, r5
 800b4c6:	5dc7      	ldrb	r7, [r0, r7]
 800b4c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4cc:	462f      	mov	r7, r5
 800b4ce:	42bb      	cmp	r3, r7
 800b4d0:	460d      	mov	r5, r1
 800b4d2:	d9f4      	bls.n	800b4be <_printf_i+0x112>
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d10b      	bne.n	800b4f0 <_printf_i+0x144>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	07df      	lsls	r7, r3, #31
 800b4dc:	d508      	bpl.n	800b4f0 <_printf_i+0x144>
 800b4de:	6923      	ldr	r3, [r4, #16]
 800b4e0:	6861      	ldr	r1, [r4, #4]
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	bfde      	ittt	le
 800b4e6:	2330      	movle	r3, #48	@ 0x30
 800b4e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4f0:	1b92      	subs	r2, r2, r6
 800b4f2:	6122      	str	r2, [r4, #16]
 800b4f4:	f8cd a000 	str.w	sl, [sp]
 800b4f8:	464b      	mov	r3, r9
 800b4fa:	aa03      	add	r2, sp, #12
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	4640      	mov	r0, r8
 800b500:	f7ff fee6 	bl	800b2d0 <_printf_common>
 800b504:	3001      	adds	r0, #1
 800b506:	d14a      	bne.n	800b59e <_printf_i+0x1f2>
 800b508:	f04f 30ff 	mov.w	r0, #4294967295
 800b50c:	b004      	add	sp, #16
 800b50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	f043 0320 	orr.w	r3, r3, #32
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	4833      	ldr	r0, [pc, #204]	@ (800b5e8 <_printf_i+0x23c>)
 800b51c:	2778      	movs	r7, #120	@ 0x78
 800b51e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	6831      	ldr	r1, [r6, #0]
 800b526:	061f      	lsls	r7, r3, #24
 800b528:	f851 5b04 	ldr.w	r5, [r1], #4
 800b52c:	d402      	bmi.n	800b534 <_printf_i+0x188>
 800b52e:	065f      	lsls	r7, r3, #25
 800b530:	bf48      	it	mi
 800b532:	b2ad      	uxthmi	r5, r5
 800b534:	6031      	str	r1, [r6, #0]
 800b536:	07d9      	lsls	r1, r3, #31
 800b538:	bf44      	itt	mi
 800b53a:	f043 0320 	orrmi.w	r3, r3, #32
 800b53e:	6023      	strmi	r3, [r4, #0]
 800b540:	b11d      	cbz	r5, 800b54a <_printf_i+0x19e>
 800b542:	2310      	movs	r3, #16
 800b544:	e7ac      	b.n	800b4a0 <_printf_i+0xf4>
 800b546:	4827      	ldr	r0, [pc, #156]	@ (800b5e4 <_printf_i+0x238>)
 800b548:	e7e9      	b.n	800b51e <_printf_i+0x172>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	f023 0320 	bic.w	r3, r3, #32
 800b550:	6023      	str	r3, [r4, #0]
 800b552:	e7f6      	b.n	800b542 <_printf_i+0x196>
 800b554:	4616      	mov	r6, r2
 800b556:	e7bd      	b.n	800b4d4 <_printf_i+0x128>
 800b558:	6833      	ldr	r3, [r6, #0]
 800b55a:	6825      	ldr	r5, [r4, #0]
 800b55c:	6961      	ldr	r1, [r4, #20]
 800b55e:	1d18      	adds	r0, r3, #4
 800b560:	6030      	str	r0, [r6, #0]
 800b562:	062e      	lsls	r6, r5, #24
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	d501      	bpl.n	800b56c <_printf_i+0x1c0>
 800b568:	6019      	str	r1, [r3, #0]
 800b56a:	e002      	b.n	800b572 <_printf_i+0x1c6>
 800b56c:	0668      	lsls	r0, r5, #25
 800b56e:	d5fb      	bpl.n	800b568 <_printf_i+0x1bc>
 800b570:	8019      	strh	r1, [r3, #0]
 800b572:	2300      	movs	r3, #0
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	4616      	mov	r6, r2
 800b578:	e7bc      	b.n	800b4f4 <_printf_i+0x148>
 800b57a:	6833      	ldr	r3, [r6, #0]
 800b57c:	1d1a      	adds	r2, r3, #4
 800b57e:	6032      	str	r2, [r6, #0]
 800b580:	681e      	ldr	r6, [r3, #0]
 800b582:	6862      	ldr	r2, [r4, #4]
 800b584:	2100      	movs	r1, #0
 800b586:	4630      	mov	r0, r6
 800b588:	f7f4 fe2a 	bl	80001e0 <memchr>
 800b58c:	b108      	cbz	r0, 800b592 <_printf_i+0x1e6>
 800b58e:	1b80      	subs	r0, r0, r6
 800b590:	6060      	str	r0, [r4, #4]
 800b592:	6863      	ldr	r3, [r4, #4]
 800b594:	6123      	str	r3, [r4, #16]
 800b596:	2300      	movs	r3, #0
 800b598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b59c:	e7aa      	b.n	800b4f4 <_printf_i+0x148>
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	47d0      	blx	sl
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d0ad      	beq.n	800b508 <_printf_i+0x15c>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	079b      	lsls	r3, r3, #30
 800b5b0:	d413      	bmi.n	800b5da <_printf_i+0x22e>
 800b5b2:	68e0      	ldr	r0, [r4, #12]
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	4298      	cmp	r0, r3
 800b5b8:	bfb8      	it	lt
 800b5ba:	4618      	movlt	r0, r3
 800b5bc:	e7a6      	b.n	800b50c <_printf_i+0x160>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4632      	mov	r2, r6
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	4640      	mov	r0, r8
 800b5c6:	47d0      	blx	sl
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d09d      	beq.n	800b508 <_printf_i+0x15c>
 800b5cc:	3501      	adds	r5, #1
 800b5ce:	68e3      	ldr	r3, [r4, #12]
 800b5d0:	9903      	ldr	r1, [sp, #12]
 800b5d2:	1a5b      	subs	r3, r3, r1
 800b5d4:	42ab      	cmp	r3, r5
 800b5d6:	dcf2      	bgt.n	800b5be <_printf_i+0x212>
 800b5d8:	e7eb      	b.n	800b5b2 <_printf_i+0x206>
 800b5da:	2500      	movs	r5, #0
 800b5dc:	f104 0619 	add.w	r6, r4, #25
 800b5e0:	e7f5      	b.n	800b5ce <_printf_i+0x222>
 800b5e2:	bf00      	nop
 800b5e4:	0800c6ad 	.word	0x0800c6ad
 800b5e8:	0800c6be 	.word	0x0800c6be

0800b5ec <_scanf_chars>:
 800b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	4615      	mov	r5, r2
 800b5f2:	688a      	ldr	r2, [r1, #8]
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	b932      	cbnz	r2, 800b608 <_scanf_chars+0x1c>
 800b5fa:	698a      	ldr	r2, [r1, #24]
 800b5fc:	2a00      	cmp	r2, #0
 800b5fe:	bf14      	ite	ne
 800b600:	f04f 32ff 	movne.w	r2, #4294967295
 800b604:	2201      	moveq	r2, #1
 800b606:	608a      	str	r2, [r1, #8]
 800b608:	6822      	ldr	r2, [r4, #0]
 800b60a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b69c <_scanf_chars+0xb0>
 800b60e:	06d1      	lsls	r1, r2, #27
 800b610:	bf5f      	itttt	pl
 800b612:	681a      	ldrpl	r2, [r3, #0]
 800b614:	1d11      	addpl	r1, r2, #4
 800b616:	6019      	strpl	r1, [r3, #0]
 800b618:	6816      	ldrpl	r6, [r2, #0]
 800b61a:	2700      	movs	r7, #0
 800b61c:	69a0      	ldr	r0, [r4, #24]
 800b61e:	b188      	cbz	r0, 800b644 <_scanf_chars+0x58>
 800b620:	2801      	cmp	r0, #1
 800b622:	d107      	bne.n	800b634 <_scanf_chars+0x48>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	781a      	ldrb	r2, [r3, #0]
 800b628:	6963      	ldr	r3, [r4, #20]
 800b62a:	5c9b      	ldrb	r3, [r3, r2]
 800b62c:	b953      	cbnz	r3, 800b644 <_scanf_chars+0x58>
 800b62e:	2f00      	cmp	r7, #0
 800b630:	d031      	beq.n	800b696 <_scanf_chars+0xaa>
 800b632:	e022      	b.n	800b67a <_scanf_chars+0x8e>
 800b634:	2802      	cmp	r0, #2
 800b636:	d120      	bne.n	800b67a <_scanf_chars+0x8e>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b640:	071b      	lsls	r3, r3, #28
 800b642:	d41a      	bmi.n	800b67a <_scanf_chars+0x8e>
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	06da      	lsls	r2, r3, #27
 800b648:	bf5e      	ittt	pl
 800b64a:	682b      	ldrpl	r3, [r5, #0]
 800b64c:	781b      	ldrbpl	r3, [r3, #0]
 800b64e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b652:	682a      	ldr	r2, [r5, #0]
 800b654:	686b      	ldr	r3, [r5, #4]
 800b656:	3201      	adds	r2, #1
 800b658:	602a      	str	r2, [r5, #0]
 800b65a:	68a2      	ldr	r2, [r4, #8]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	3a01      	subs	r2, #1
 800b660:	606b      	str	r3, [r5, #4]
 800b662:	3701      	adds	r7, #1
 800b664:	60a2      	str	r2, [r4, #8]
 800b666:	b142      	cbz	r2, 800b67a <_scanf_chars+0x8e>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	dcd7      	bgt.n	800b61c <_scanf_chars+0x30>
 800b66c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b670:	4629      	mov	r1, r5
 800b672:	4640      	mov	r0, r8
 800b674:	4798      	blx	r3
 800b676:	2800      	cmp	r0, #0
 800b678:	d0d0      	beq.n	800b61c <_scanf_chars+0x30>
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	f013 0310 	ands.w	r3, r3, #16
 800b680:	d105      	bne.n	800b68e <_scanf_chars+0xa2>
 800b682:	68e2      	ldr	r2, [r4, #12]
 800b684:	3201      	adds	r2, #1
 800b686:	60e2      	str	r2, [r4, #12]
 800b688:	69a2      	ldr	r2, [r4, #24]
 800b68a:	b102      	cbz	r2, 800b68e <_scanf_chars+0xa2>
 800b68c:	7033      	strb	r3, [r6, #0]
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	443b      	add	r3, r7
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	2000      	movs	r0, #0
 800b696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69a:	bf00      	nop
 800b69c:	0800c6eb 	.word	0x0800c6eb

0800b6a0 <_scanf_i>:
 800b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	4698      	mov	r8, r3
 800b6a6:	4b74      	ldr	r3, [pc, #464]	@ (800b878 <_scanf_i+0x1d8>)
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	4616      	mov	r6, r2
 800b6ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	ab03      	add	r3, sp, #12
 800b6b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b6ba:	4b70      	ldr	r3, [pc, #448]	@ (800b87c <_scanf_i+0x1dc>)
 800b6bc:	69a1      	ldr	r1, [r4, #24]
 800b6be:	4a70      	ldr	r2, [pc, #448]	@ (800b880 <_scanf_i+0x1e0>)
 800b6c0:	2903      	cmp	r1, #3
 800b6c2:	bf08      	it	eq
 800b6c4:	461a      	moveq	r2, r3
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	9201      	str	r2, [sp, #4]
 800b6ca:	1e5a      	subs	r2, r3, #1
 800b6cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b6d0:	bf88      	it	hi
 800b6d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b6d6:	4627      	mov	r7, r4
 800b6d8:	bf82      	ittt	hi
 800b6da:	eb03 0905 	addhi.w	r9, r3, r5
 800b6de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b6e2:	60a3      	strhi	r3, [r4, #8]
 800b6e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b6e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b6ec:	bf98      	it	ls
 800b6ee:	f04f 0900 	movls.w	r9, #0
 800b6f2:	6023      	str	r3, [r4, #0]
 800b6f4:	463d      	mov	r5, r7
 800b6f6:	f04f 0b00 	mov.w	fp, #0
 800b6fa:	6831      	ldr	r1, [r6, #0]
 800b6fc:	ab03      	add	r3, sp, #12
 800b6fe:	7809      	ldrb	r1, [r1, #0]
 800b700:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b704:	2202      	movs	r2, #2
 800b706:	f7f4 fd6b 	bl	80001e0 <memchr>
 800b70a:	b328      	cbz	r0, 800b758 <_scanf_i+0xb8>
 800b70c:	f1bb 0f01 	cmp.w	fp, #1
 800b710:	d159      	bne.n	800b7c6 <_scanf_i+0x126>
 800b712:	6862      	ldr	r2, [r4, #4]
 800b714:	b92a      	cbnz	r2, 800b722 <_scanf_i+0x82>
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	2108      	movs	r1, #8
 800b71a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b71e:	6061      	str	r1, [r4, #4]
 800b720:	6022      	str	r2, [r4, #0]
 800b722:	6822      	ldr	r2, [r4, #0]
 800b724:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b728:	6022      	str	r2, [r4, #0]
 800b72a:	68a2      	ldr	r2, [r4, #8]
 800b72c:	1e51      	subs	r1, r2, #1
 800b72e:	60a1      	str	r1, [r4, #8]
 800b730:	b192      	cbz	r2, 800b758 <_scanf_i+0xb8>
 800b732:	6832      	ldr	r2, [r6, #0]
 800b734:	1c51      	adds	r1, r2, #1
 800b736:	6031      	str	r1, [r6, #0]
 800b738:	7812      	ldrb	r2, [r2, #0]
 800b73a:	f805 2b01 	strb.w	r2, [r5], #1
 800b73e:	6872      	ldr	r2, [r6, #4]
 800b740:	3a01      	subs	r2, #1
 800b742:	2a00      	cmp	r2, #0
 800b744:	6072      	str	r2, [r6, #4]
 800b746:	dc07      	bgt.n	800b758 <_scanf_i+0xb8>
 800b748:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b74c:	4631      	mov	r1, r6
 800b74e:	4650      	mov	r0, sl
 800b750:	4790      	blx	r2
 800b752:	2800      	cmp	r0, #0
 800b754:	f040 8085 	bne.w	800b862 <_scanf_i+0x1c2>
 800b758:	f10b 0b01 	add.w	fp, fp, #1
 800b75c:	f1bb 0f03 	cmp.w	fp, #3
 800b760:	d1cb      	bne.n	800b6fa <_scanf_i+0x5a>
 800b762:	6863      	ldr	r3, [r4, #4]
 800b764:	b90b      	cbnz	r3, 800b76a <_scanf_i+0xca>
 800b766:	230a      	movs	r3, #10
 800b768:	6063      	str	r3, [r4, #4]
 800b76a:	6863      	ldr	r3, [r4, #4]
 800b76c:	4945      	ldr	r1, [pc, #276]	@ (800b884 <_scanf_i+0x1e4>)
 800b76e:	6960      	ldr	r0, [r4, #20]
 800b770:	1ac9      	subs	r1, r1, r3
 800b772:	f000 f997 	bl	800baa4 <__sccl>
 800b776:	f04f 0b00 	mov.w	fp, #0
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	6822      	ldr	r2, [r4, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d03d      	beq.n	800b7fe <_scanf_i+0x15e>
 800b782:	6831      	ldr	r1, [r6, #0]
 800b784:	6960      	ldr	r0, [r4, #20]
 800b786:	f891 c000 	ldrb.w	ip, [r1]
 800b78a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b78e:	2800      	cmp	r0, #0
 800b790:	d035      	beq.n	800b7fe <_scanf_i+0x15e>
 800b792:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b796:	d124      	bne.n	800b7e2 <_scanf_i+0x142>
 800b798:	0510      	lsls	r0, r2, #20
 800b79a:	d522      	bpl.n	800b7e2 <_scanf_i+0x142>
 800b79c:	f10b 0b01 	add.w	fp, fp, #1
 800b7a0:	f1b9 0f00 	cmp.w	r9, #0
 800b7a4:	d003      	beq.n	800b7ae <_scanf_i+0x10e>
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b7ac:	60a3      	str	r3, [r4, #8]
 800b7ae:	6873      	ldr	r3, [r6, #4]
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	6073      	str	r3, [r6, #4]
 800b7b6:	dd1b      	ble.n	800b7f0 <_scanf_i+0x150>
 800b7b8:	6833      	ldr	r3, [r6, #0]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	6033      	str	r3, [r6, #0]
 800b7be:	68a3      	ldr	r3, [r4, #8]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	60a3      	str	r3, [r4, #8]
 800b7c4:	e7d9      	b.n	800b77a <_scanf_i+0xda>
 800b7c6:	f1bb 0f02 	cmp.w	fp, #2
 800b7ca:	d1ae      	bne.n	800b72a <_scanf_i+0x8a>
 800b7cc:	6822      	ldr	r2, [r4, #0]
 800b7ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b7d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b7d6:	d1bf      	bne.n	800b758 <_scanf_i+0xb8>
 800b7d8:	2110      	movs	r1, #16
 800b7da:	6061      	str	r1, [r4, #4]
 800b7dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7e0:	e7a2      	b.n	800b728 <_scanf_i+0x88>
 800b7e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b7e6:	6022      	str	r2, [r4, #0]
 800b7e8:	780b      	ldrb	r3, [r1, #0]
 800b7ea:	f805 3b01 	strb.w	r3, [r5], #1
 800b7ee:	e7de      	b.n	800b7ae <_scanf_i+0x10e>
 800b7f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	4798      	blx	r3
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0df      	beq.n	800b7be <_scanf_i+0x11e>
 800b7fe:	6823      	ldr	r3, [r4, #0]
 800b800:	05d9      	lsls	r1, r3, #23
 800b802:	d50d      	bpl.n	800b820 <_scanf_i+0x180>
 800b804:	42bd      	cmp	r5, r7
 800b806:	d909      	bls.n	800b81c <_scanf_i+0x17c>
 800b808:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b80c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b810:	4632      	mov	r2, r6
 800b812:	4650      	mov	r0, sl
 800b814:	4798      	blx	r3
 800b816:	f105 39ff 	add.w	r9, r5, #4294967295
 800b81a:	464d      	mov	r5, r9
 800b81c:	42bd      	cmp	r5, r7
 800b81e:	d028      	beq.n	800b872 <_scanf_i+0x1d2>
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	f012 0210 	ands.w	r2, r2, #16
 800b826:	d113      	bne.n	800b850 <_scanf_i+0x1b0>
 800b828:	702a      	strb	r2, [r5, #0]
 800b82a:	6863      	ldr	r3, [r4, #4]
 800b82c:	9e01      	ldr	r6, [sp, #4]
 800b82e:	4639      	mov	r1, r7
 800b830:	4650      	mov	r0, sl
 800b832:	47b0      	blx	r6
 800b834:	f8d8 3000 	ldr.w	r3, [r8]
 800b838:	6821      	ldr	r1, [r4, #0]
 800b83a:	1d1a      	adds	r2, r3, #4
 800b83c:	f8c8 2000 	str.w	r2, [r8]
 800b840:	f011 0f20 	tst.w	r1, #32
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	d00f      	beq.n	800b868 <_scanf_i+0x1c8>
 800b848:	6018      	str	r0, [r3, #0]
 800b84a:	68e3      	ldr	r3, [r4, #12]
 800b84c:	3301      	adds	r3, #1
 800b84e:	60e3      	str	r3, [r4, #12]
 800b850:	6923      	ldr	r3, [r4, #16]
 800b852:	1bed      	subs	r5, r5, r7
 800b854:	445d      	add	r5, fp
 800b856:	442b      	add	r3, r5
 800b858:	6123      	str	r3, [r4, #16]
 800b85a:	2000      	movs	r0, #0
 800b85c:	b007      	add	sp, #28
 800b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b862:	f04f 0b00 	mov.w	fp, #0
 800b866:	e7ca      	b.n	800b7fe <_scanf_i+0x15e>
 800b868:	07ca      	lsls	r2, r1, #31
 800b86a:	bf4c      	ite	mi
 800b86c:	8018      	strhmi	r0, [r3, #0]
 800b86e:	6018      	strpl	r0, [r3, #0]
 800b870:	e7eb      	b.n	800b84a <_scanf_i+0x1aa>
 800b872:	2001      	movs	r0, #1
 800b874:	e7f2      	b.n	800b85c <_scanf_i+0x1bc>
 800b876:	bf00      	nop
 800b878:	0800c568 	.word	0x0800c568
 800b87c:	0800bd75 	.word	0x0800bd75
 800b880:	0800be55 	.word	0x0800be55
 800b884:	0800c6df 	.word	0x0800c6df

0800b888 <__sflush_r>:
 800b888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	0716      	lsls	r6, r2, #28
 800b892:	4605      	mov	r5, r0
 800b894:	460c      	mov	r4, r1
 800b896:	d454      	bmi.n	800b942 <__sflush_r+0xba>
 800b898:	684b      	ldr	r3, [r1, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dc02      	bgt.n	800b8a4 <__sflush_r+0x1c>
 800b89e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dd48      	ble.n	800b936 <__sflush_r+0xae>
 800b8a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8a6:	2e00      	cmp	r6, #0
 800b8a8:	d045      	beq.n	800b936 <__sflush_r+0xae>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8b0:	682f      	ldr	r7, [r5, #0]
 800b8b2:	6a21      	ldr	r1, [r4, #32]
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	d030      	beq.n	800b91a <__sflush_r+0x92>
 800b8b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	0759      	lsls	r1, r3, #29
 800b8be:	d505      	bpl.n	800b8cc <__sflush_r+0x44>
 800b8c0:	6863      	ldr	r3, [r4, #4]
 800b8c2:	1ad2      	subs	r2, r2, r3
 800b8c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8c6:	b10b      	cbz	r3, 800b8cc <__sflush_r+0x44>
 800b8c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8ca:	1ad2      	subs	r2, r2, r3
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8d0:	6a21      	ldr	r1, [r4, #32]
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	47b0      	blx	r6
 800b8d6:	1c43      	adds	r3, r0, #1
 800b8d8:	89a3      	ldrh	r3, [r4, #12]
 800b8da:	d106      	bne.n	800b8ea <__sflush_r+0x62>
 800b8dc:	6829      	ldr	r1, [r5, #0]
 800b8de:	291d      	cmp	r1, #29
 800b8e0:	d82b      	bhi.n	800b93a <__sflush_r+0xb2>
 800b8e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b98c <__sflush_r+0x104>)
 800b8e4:	410a      	asrs	r2, r1
 800b8e6:	07d6      	lsls	r6, r2, #31
 800b8e8:	d427      	bmi.n	800b93a <__sflush_r+0xb2>
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	6062      	str	r2, [r4, #4]
 800b8ee:	04d9      	lsls	r1, r3, #19
 800b8f0:	6922      	ldr	r2, [r4, #16]
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	d504      	bpl.n	800b900 <__sflush_r+0x78>
 800b8f6:	1c42      	adds	r2, r0, #1
 800b8f8:	d101      	bne.n	800b8fe <__sflush_r+0x76>
 800b8fa:	682b      	ldr	r3, [r5, #0]
 800b8fc:	b903      	cbnz	r3, 800b900 <__sflush_r+0x78>
 800b8fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b902:	602f      	str	r7, [r5, #0]
 800b904:	b1b9      	cbz	r1, 800b936 <__sflush_r+0xae>
 800b906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b90a:	4299      	cmp	r1, r3
 800b90c:	d002      	beq.n	800b914 <__sflush_r+0x8c>
 800b90e:	4628      	mov	r0, r5
 800b910:	f7fe ff80 	bl	800a814 <_free_r>
 800b914:	2300      	movs	r3, #0
 800b916:	6363      	str	r3, [r4, #52]	@ 0x34
 800b918:	e00d      	b.n	800b936 <__sflush_r+0xae>
 800b91a:	2301      	movs	r3, #1
 800b91c:	4628      	mov	r0, r5
 800b91e:	47b0      	blx	r6
 800b920:	4602      	mov	r2, r0
 800b922:	1c50      	adds	r0, r2, #1
 800b924:	d1c9      	bne.n	800b8ba <__sflush_r+0x32>
 800b926:	682b      	ldr	r3, [r5, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d0c6      	beq.n	800b8ba <__sflush_r+0x32>
 800b92c:	2b1d      	cmp	r3, #29
 800b92e:	d001      	beq.n	800b934 <__sflush_r+0xac>
 800b930:	2b16      	cmp	r3, #22
 800b932:	d11e      	bne.n	800b972 <__sflush_r+0xea>
 800b934:	602f      	str	r7, [r5, #0]
 800b936:	2000      	movs	r0, #0
 800b938:	e022      	b.n	800b980 <__sflush_r+0xf8>
 800b93a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b93e:	b21b      	sxth	r3, r3
 800b940:	e01b      	b.n	800b97a <__sflush_r+0xf2>
 800b942:	690f      	ldr	r7, [r1, #16]
 800b944:	2f00      	cmp	r7, #0
 800b946:	d0f6      	beq.n	800b936 <__sflush_r+0xae>
 800b948:	0793      	lsls	r3, r2, #30
 800b94a:	680e      	ldr	r6, [r1, #0]
 800b94c:	bf08      	it	eq
 800b94e:	694b      	ldreq	r3, [r1, #20]
 800b950:	600f      	str	r7, [r1, #0]
 800b952:	bf18      	it	ne
 800b954:	2300      	movne	r3, #0
 800b956:	eba6 0807 	sub.w	r8, r6, r7
 800b95a:	608b      	str	r3, [r1, #8]
 800b95c:	f1b8 0f00 	cmp.w	r8, #0
 800b960:	dde9      	ble.n	800b936 <__sflush_r+0xae>
 800b962:	6a21      	ldr	r1, [r4, #32]
 800b964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b966:	4643      	mov	r3, r8
 800b968:	463a      	mov	r2, r7
 800b96a:	4628      	mov	r0, r5
 800b96c:	47b0      	blx	r6
 800b96e:	2800      	cmp	r0, #0
 800b970:	dc08      	bgt.n	800b984 <__sflush_r+0xfc>
 800b972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b97a:	81a3      	strh	r3, [r4, #12]
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b984:	4407      	add	r7, r0
 800b986:	eba8 0800 	sub.w	r8, r8, r0
 800b98a:	e7e7      	b.n	800b95c <__sflush_r+0xd4>
 800b98c:	dfbffffe 	.word	0xdfbffffe

0800b990 <_fflush_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	690b      	ldr	r3, [r1, #16]
 800b994:	4605      	mov	r5, r0
 800b996:	460c      	mov	r4, r1
 800b998:	b913      	cbnz	r3, 800b9a0 <_fflush_r+0x10>
 800b99a:	2500      	movs	r5, #0
 800b99c:	4628      	mov	r0, r5
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	b118      	cbz	r0, 800b9aa <_fflush_r+0x1a>
 800b9a2:	6a03      	ldr	r3, [r0, #32]
 800b9a4:	b90b      	cbnz	r3, 800b9aa <_fflush_r+0x1a>
 800b9a6:	f7fe fcbb 	bl	800a320 <__sinit>
 800b9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0f3      	beq.n	800b99a <_fflush_r+0xa>
 800b9b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9b4:	07d0      	lsls	r0, r2, #31
 800b9b6:	d404      	bmi.n	800b9c2 <_fflush_r+0x32>
 800b9b8:	0599      	lsls	r1, r3, #22
 800b9ba:	d402      	bmi.n	800b9c2 <_fflush_r+0x32>
 800b9bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9be:	f7fe ff18 	bl	800a7f2 <__retarget_lock_acquire_recursive>
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	f7ff ff5f 	bl	800b888 <__sflush_r>
 800b9ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9cc:	07da      	lsls	r2, r3, #31
 800b9ce:	4605      	mov	r5, r0
 800b9d0:	d4e4      	bmi.n	800b99c <_fflush_r+0xc>
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	059b      	lsls	r3, r3, #22
 800b9d6:	d4e1      	bmi.n	800b99c <_fflush_r+0xc>
 800b9d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9da:	f7fe ff0b 	bl	800a7f4 <__retarget_lock_release_recursive>
 800b9de:	e7dd      	b.n	800b99c <_fflush_r+0xc>

0800b9e0 <__swhatbuf_r>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	460c      	mov	r4, r1
 800b9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e8:	2900      	cmp	r1, #0
 800b9ea:	b096      	sub	sp, #88	@ 0x58
 800b9ec:	4615      	mov	r5, r2
 800b9ee:	461e      	mov	r6, r3
 800b9f0:	da0d      	bge.n	800ba0e <__swhatbuf_r+0x2e>
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9f8:	f04f 0100 	mov.w	r1, #0
 800b9fc:	bf14      	ite	ne
 800b9fe:	2340      	movne	r3, #64	@ 0x40
 800ba00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba04:	2000      	movs	r0, #0
 800ba06:	6031      	str	r1, [r6, #0]
 800ba08:	602b      	str	r3, [r5, #0]
 800ba0a:	b016      	add	sp, #88	@ 0x58
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
 800ba0e:	466a      	mov	r2, sp
 800ba10:	f000 f8d6 	bl	800bbc0 <_fstat_r>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	dbec      	blt.n	800b9f2 <__swhatbuf_r+0x12>
 800ba18:	9901      	ldr	r1, [sp, #4]
 800ba1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba22:	4259      	negs	r1, r3
 800ba24:	4159      	adcs	r1, r3
 800ba26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba2a:	e7eb      	b.n	800ba04 <__swhatbuf_r+0x24>

0800ba2c <__smakebuf_r>:
 800ba2c:	898b      	ldrh	r3, [r1, #12]
 800ba2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba30:	079d      	lsls	r5, r3, #30
 800ba32:	4606      	mov	r6, r0
 800ba34:	460c      	mov	r4, r1
 800ba36:	d507      	bpl.n	800ba48 <__smakebuf_r+0x1c>
 800ba38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	6123      	str	r3, [r4, #16]
 800ba40:	2301      	movs	r3, #1
 800ba42:	6163      	str	r3, [r4, #20]
 800ba44:	b003      	add	sp, #12
 800ba46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba48:	ab01      	add	r3, sp, #4
 800ba4a:	466a      	mov	r2, sp
 800ba4c:	f7ff ffc8 	bl	800b9e0 <__swhatbuf_r>
 800ba50:	9f00      	ldr	r7, [sp, #0]
 800ba52:	4605      	mov	r5, r0
 800ba54:	4639      	mov	r1, r7
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7fe ff48 	bl	800a8ec <_malloc_r>
 800ba5c:	b948      	cbnz	r0, 800ba72 <__smakebuf_r+0x46>
 800ba5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba62:	059a      	lsls	r2, r3, #22
 800ba64:	d4ee      	bmi.n	800ba44 <__smakebuf_r+0x18>
 800ba66:	f023 0303 	bic.w	r3, r3, #3
 800ba6a:	f043 0302 	orr.w	r3, r3, #2
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	e7e2      	b.n	800ba38 <__smakebuf_r+0xc>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	6020      	str	r0, [r4, #0]
 800ba76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	9b01      	ldr	r3, [sp, #4]
 800ba7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba82:	b15b      	cbz	r3, 800ba9c <__smakebuf_r+0x70>
 800ba84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f000 f8ab 	bl	800bbe4 <_isatty_r>
 800ba8e:	b128      	cbz	r0, 800ba9c <__smakebuf_r+0x70>
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	f023 0303 	bic.w	r3, r3, #3
 800ba96:	f043 0301 	orr.w	r3, r3, #1
 800ba9a:	81a3      	strh	r3, [r4, #12]
 800ba9c:	89a3      	ldrh	r3, [r4, #12]
 800ba9e:	431d      	orrs	r5, r3
 800baa0:	81a5      	strh	r5, [r4, #12]
 800baa2:	e7cf      	b.n	800ba44 <__smakebuf_r+0x18>

0800baa4 <__sccl>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	780b      	ldrb	r3, [r1, #0]
 800baa8:	4604      	mov	r4, r0
 800baaa:	2b5e      	cmp	r3, #94	@ 0x5e
 800baac:	bf0b      	itete	eq
 800baae:	784b      	ldrbeq	r3, [r1, #1]
 800bab0:	1c4a      	addne	r2, r1, #1
 800bab2:	1c8a      	addeq	r2, r1, #2
 800bab4:	2100      	movne	r1, #0
 800bab6:	bf08      	it	eq
 800bab8:	2101      	moveq	r1, #1
 800baba:	3801      	subs	r0, #1
 800babc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800bac0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bac4:	42a8      	cmp	r0, r5
 800bac6:	d1fb      	bne.n	800bac0 <__sccl+0x1c>
 800bac8:	b90b      	cbnz	r3, 800bace <__sccl+0x2a>
 800baca:	1e50      	subs	r0, r2, #1
 800bacc:	bd70      	pop	{r4, r5, r6, pc}
 800bace:	f081 0101 	eor.w	r1, r1, #1
 800bad2:	54e1      	strb	r1, [r4, r3]
 800bad4:	4610      	mov	r0, r2
 800bad6:	4602      	mov	r2, r0
 800bad8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800badc:	2d2d      	cmp	r5, #45	@ 0x2d
 800bade:	d005      	beq.n	800baec <__sccl+0x48>
 800bae0:	2d5d      	cmp	r5, #93	@ 0x5d
 800bae2:	d016      	beq.n	800bb12 <__sccl+0x6e>
 800bae4:	2d00      	cmp	r5, #0
 800bae6:	d0f1      	beq.n	800bacc <__sccl+0x28>
 800bae8:	462b      	mov	r3, r5
 800baea:	e7f2      	b.n	800bad2 <__sccl+0x2e>
 800baec:	7846      	ldrb	r6, [r0, #1]
 800baee:	2e5d      	cmp	r6, #93	@ 0x5d
 800baf0:	d0fa      	beq.n	800bae8 <__sccl+0x44>
 800baf2:	42b3      	cmp	r3, r6
 800baf4:	dcf8      	bgt.n	800bae8 <__sccl+0x44>
 800baf6:	3002      	adds	r0, #2
 800baf8:	461a      	mov	r2, r3
 800bafa:	3201      	adds	r2, #1
 800bafc:	4296      	cmp	r6, r2
 800bafe:	54a1      	strb	r1, [r4, r2]
 800bb00:	dcfb      	bgt.n	800bafa <__sccl+0x56>
 800bb02:	1af2      	subs	r2, r6, r3
 800bb04:	3a01      	subs	r2, #1
 800bb06:	1c5d      	adds	r5, r3, #1
 800bb08:	42b3      	cmp	r3, r6
 800bb0a:	bfa8      	it	ge
 800bb0c:	2200      	movge	r2, #0
 800bb0e:	18ab      	adds	r3, r5, r2
 800bb10:	e7e1      	b.n	800bad6 <__sccl+0x32>
 800bb12:	4610      	mov	r0, r2
 800bb14:	e7da      	b.n	800bacc <__sccl+0x28>

0800bb16 <__submore>:
 800bb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bb1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb22:	4299      	cmp	r1, r3
 800bb24:	d11d      	bne.n	800bb62 <__submore+0x4c>
 800bb26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bb2a:	f7fe fedf 	bl	800a8ec <_malloc_r>
 800bb2e:	b918      	cbnz	r0, 800bb38 <__submore+0x22>
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295
 800bb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb3c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bb3e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bb42:	6360      	str	r0, [r4, #52]	@ 0x34
 800bb44:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bb48:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bb4c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bb50:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bb54:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bb58:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bb5c:	6020      	str	r0, [r4, #0]
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e7e8      	b.n	800bb34 <__submore+0x1e>
 800bb62:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800bb64:	0077      	lsls	r7, r6, #1
 800bb66:	463a      	mov	r2, r7
 800bb68:	f000 f85c 	bl	800bc24 <_realloc_r>
 800bb6c:	4605      	mov	r5, r0
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	d0de      	beq.n	800bb30 <__submore+0x1a>
 800bb72:	eb00 0806 	add.w	r8, r0, r6
 800bb76:	4601      	mov	r1, r0
 800bb78:	4632      	mov	r2, r6
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	f7fe fe3b 	bl	800a7f6 <memcpy>
 800bb80:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bb84:	f8c4 8000 	str.w	r8, [r4]
 800bb88:	e7e9      	b.n	800bb5e <__submore+0x48>

0800bb8a <memmove>:
 800bb8a:	4288      	cmp	r0, r1
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	eb01 0402 	add.w	r4, r1, r2
 800bb92:	d902      	bls.n	800bb9a <memmove+0x10>
 800bb94:	4284      	cmp	r4, r0
 800bb96:	4623      	mov	r3, r4
 800bb98:	d807      	bhi.n	800bbaa <memmove+0x20>
 800bb9a:	1e43      	subs	r3, r0, #1
 800bb9c:	42a1      	cmp	r1, r4
 800bb9e:	d008      	beq.n	800bbb2 <memmove+0x28>
 800bba0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bba4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bba8:	e7f8      	b.n	800bb9c <memmove+0x12>
 800bbaa:	4402      	add	r2, r0
 800bbac:	4601      	mov	r1, r0
 800bbae:	428a      	cmp	r2, r1
 800bbb0:	d100      	bne.n	800bbb4 <memmove+0x2a>
 800bbb2:	bd10      	pop	{r4, pc}
 800bbb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbb8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbbc:	e7f7      	b.n	800bbae <memmove+0x24>
	...

0800bbc0 <_fstat_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	4d07      	ldr	r5, [pc, #28]	@ (800bbe0 <_fstat_r+0x20>)
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	4608      	mov	r0, r1
 800bbca:	4611      	mov	r1, r2
 800bbcc:	602b      	str	r3, [r5, #0]
 800bbce:	f7f6 f957 	bl	8001e80 <_fstat>
 800bbd2:	1c43      	adds	r3, r0, #1
 800bbd4:	d102      	bne.n	800bbdc <_fstat_r+0x1c>
 800bbd6:	682b      	ldr	r3, [r5, #0]
 800bbd8:	b103      	cbz	r3, 800bbdc <_fstat_r+0x1c>
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	bd38      	pop	{r3, r4, r5, pc}
 800bbde:	bf00      	nop
 800bbe0:	20002e60 	.word	0x20002e60

0800bbe4 <_isatty_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4d06      	ldr	r5, [pc, #24]	@ (800bc00 <_isatty_r+0x1c>)
 800bbe8:	2300      	movs	r3, #0
 800bbea:	4604      	mov	r4, r0
 800bbec:	4608      	mov	r0, r1
 800bbee:	602b      	str	r3, [r5, #0]
 800bbf0:	f7f6 f956 	bl	8001ea0 <_isatty>
 800bbf4:	1c43      	adds	r3, r0, #1
 800bbf6:	d102      	bne.n	800bbfe <_isatty_r+0x1a>
 800bbf8:	682b      	ldr	r3, [r5, #0]
 800bbfa:	b103      	cbz	r3, 800bbfe <_isatty_r+0x1a>
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	bd38      	pop	{r3, r4, r5, pc}
 800bc00:	20002e60 	.word	0x20002e60

0800bc04 <_sbrk_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4d06      	ldr	r5, [pc, #24]	@ (800bc20 <_sbrk_r+0x1c>)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	602b      	str	r3, [r5, #0]
 800bc10:	f7f6 f95e 	bl	8001ed0 <_sbrk>
 800bc14:	1c43      	adds	r3, r0, #1
 800bc16:	d102      	bne.n	800bc1e <_sbrk_r+0x1a>
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	b103      	cbz	r3, 800bc1e <_sbrk_r+0x1a>
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	20002e60 	.word	0x20002e60

0800bc24 <_realloc_r>:
 800bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc28:	4680      	mov	r8, r0
 800bc2a:	4615      	mov	r5, r2
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	b921      	cbnz	r1, 800bc3a <_realloc_r+0x16>
 800bc30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc34:	4611      	mov	r1, r2
 800bc36:	f7fe be59 	b.w	800a8ec <_malloc_r>
 800bc3a:	b92a      	cbnz	r2, 800bc48 <_realloc_r+0x24>
 800bc3c:	f7fe fdea 	bl	800a814 <_free_r>
 800bc40:	2400      	movs	r4, #0
 800bc42:	4620      	mov	r0, r4
 800bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc48:	f000 f906 	bl	800be58 <_malloc_usable_size_r>
 800bc4c:	4285      	cmp	r5, r0
 800bc4e:	4606      	mov	r6, r0
 800bc50:	d802      	bhi.n	800bc58 <_realloc_r+0x34>
 800bc52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc56:	d8f4      	bhi.n	800bc42 <_realloc_r+0x1e>
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	f7fe fe46 	bl	800a8ec <_malloc_r>
 800bc60:	4607      	mov	r7, r0
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d0ec      	beq.n	800bc40 <_realloc_r+0x1c>
 800bc66:	42b5      	cmp	r5, r6
 800bc68:	462a      	mov	r2, r5
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	bf28      	it	cs
 800bc6e:	4632      	movcs	r2, r6
 800bc70:	f7fe fdc1 	bl	800a7f6 <memcpy>
 800bc74:	4621      	mov	r1, r4
 800bc76:	4640      	mov	r0, r8
 800bc78:	f7fe fdcc 	bl	800a814 <_free_r>
 800bc7c:	463c      	mov	r4, r7
 800bc7e:	e7e0      	b.n	800bc42 <_realloc_r+0x1e>

0800bc80 <_strtol_l.constprop.0>:
 800bc80:	2b24      	cmp	r3, #36	@ 0x24
 800bc82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc86:	4686      	mov	lr, r0
 800bc88:	4690      	mov	r8, r2
 800bc8a:	d801      	bhi.n	800bc90 <_strtol_l.constprop.0+0x10>
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d106      	bne.n	800bc9e <_strtol_l.constprop.0+0x1e>
 800bc90:	f7fe fd84 	bl	800a79c <__errno>
 800bc94:	2316      	movs	r3, #22
 800bc96:	6003      	str	r3, [r0, #0]
 800bc98:	2000      	movs	r0, #0
 800bc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9e:	4834      	ldr	r0, [pc, #208]	@ (800bd70 <_strtol_l.constprop.0+0xf0>)
 800bca0:	460d      	mov	r5, r1
 800bca2:	462a      	mov	r2, r5
 800bca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bca8:	5d06      	ldrb	r6, [r0, r4]
 800bcaa:	f016 0608 	ands.w	r6, r6, #8
 800bcae:	d1f8      	bne.n	800bca2 <_strtol_l.constprop.0+0x22>
 800bcb0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bcb2:	d12d      	bne.n	800bd10 <_strtol_l.constprop.0+0x90>
 800bcb4:	782c      	ldrb	r4, [r5, #0]
 800bcb6:	2601      	movs	r6, #1
 800bcb8:	1c95      	adds	r5, r2, #2
 800bcba:	f033 0210 	bics.w	r2, r3, #16
 800bcbe:	d109      	bne.n	800bcd4 <_strtol_l.constprop.0+0x54>
 800bcc0:	2c30      	cmp	r4, #48	@ 0x30
 800bcc2:	d12a      	bne.n	800bd1a <_strtol_l.constprop.0+0x9a>
 800bcc4:	782a      	ldrb	r2, [r5, #0]
 800bcc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bcca:	2a58      	cmp	r2, #88	@ 0x58
 800bccc:	d125      	bne.n	800bd1a <_strtol_l.constprop.0+0x9a>
 800bcce:	786c      	ldrb	r4, [r5, #1]
 800bcd0:	2310      	movs	r3, #16
 800bcd2:	3502      	adds	r5, #2
 800bcd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bcd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bcdc:	2200      	movs	r2, #0
 800bcde:	fbbc f9f3 	udiv	r9, ip, r3
 800bce2:	4610      	mov	r0, r2
 800bce4:	fb03 ca19 	mls	sl, r3, r9, ip
 800bce8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bcec:	2f09      	cmp	r7, #9
 800bcee:	d81b      	bhi.n	800bd28 <_strtol_l.constprop.0+0xa8>
 800bcf0:	463c      	mov	r4, r7
 800bcf2:	42a3      	cmp	r3, r4
 800bcf4:	dd27      	ble.n	800bd46 <_strtol_l.constprop.0+0xc6>
 800bcf6:	1c57      	adds	r7, r2, #1
 800bcf8:	d007      	beq.n	800bd0a <_strtol_l.constprop.0+0x8a>
 800bcfa:	4581      	cmp	r9, r0
 800bcfc:	d320      	bcc.n	800bd40 <_strtol_l.constprop.0+0xc0>
 800bcfe:	d101      	bne.n	800bd04 <_strtol_l.constprop.0+0x84>
 800bd00:	45a2      	cmp	sl, r4
 800bd02:	db1d      	blt.n	800bd40 <_strtol_l.constprop.0+0xc0>
 800bd04:	fb00 4003 	mla	r0, r0, r3, r4
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd0e:	e7eb      	b.n	800bce8 <_strtol_l.constprop.0+0x68>
 800bd10:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd12:	bf04      	itt	eq
 800bd14:	782c      	ldrbeq	r4, [r5, #0]
 800bd16:	1c95      	addeq	r5, r2, #2
 800bd18:	e7cf      	b.n	800bcba <_strtol_l.constprop.0+0x3a>
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1da      	bne.n	800bcd4 <_strtol_l.constprop.0+0x54>
 800bd1e:	2c30      	cmp	r4, #48	@ 0x30
 800bd20:	bf0c      	ite	eq
 800bd22:	2308      	moveq	r3, #8
 800bd24:	230a      	movne	r3, #10
 800bd26:	e7d5      	b.n	800bcd4 <_strtol_l.constprop.0+0x54>
 800bd28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bd2c:	2f19      	cmp	r7, #25
 800bd2e:	d801      	bhi.n	800bd34 <_strtol_l.constprop.0+0xb4>
 800bd30:	3c37      	subs	r4, #55	@ 0x37
 800bd32:	e7de      	b.n	800bcf2 <_strtol_l.constprop.0+0x72>
 800bd34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bd38:	2f19      	cmp	r7, #25
 800bd3a:	d804      	bhi.n	800bd46 <_strtol_l.constprop.0+0xc6>
 800bd3c:	3c57      	subs	r4, #87	@ 0x57
 800bd3e:	e7d8      	b.n	800bcf2 <_strtol_l.constprop.0+0x72>
 800bd40:	f04f 32ff 	mov.w	r2, #4294967295
 800bd44:	e7e1      	b.n	800bd0a <_strtol_l.constprop.0+0x8a>
 800bd46:	1c53      	adds	r3, r2, #1
 800bd48:	d108      	bne.n	800bd5c <_strtol_l.constprop.0+0xdc>
 800bd4a:	2322      	movs	r3, #34	@ 0x22
 800bd4c:	f8ce 3000 	str.w	r3, [lr]
 800bd50:	4660      	mov	r0, ip
 800bd52:	f1b8 0f00 	cmp.w	r8, #0
 800bd56:	d0a0      	beq.n	800bc9a <_strtol_l.constprop.0+0x1a>
 800bd58:	1e69      	subs	r1, r5, #1
 800bd5a:	e006      	b.n	800bd6a <_strtol_l.constprop.0+0xea>
 800bd5c:	b106      	cbz	r6, 800bd60 <_strtol_l.constprop.0+0xe0>
 800bd5e:	4240      	negs	r0, r0
 800bd60:	f1b8 0f00 	cmp.w	r8, #0
 800bd64:	d099      	beq.n	800bc9a <_strtol_l.constprop.0+0x1a>
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	d1f6      	bne.n	800bd58 <_strtol_l.constprop.0+0xd8>
 800bd6a:	f8c8 1000 	str.w	r1, [r8]
 800bd6e:	e794      	b.n	800bc9a <_strtol_l.constprop.0+0x1a>
 800bd70:	0800c6eb 	.word	0x0800c6eb

0800bd74 <_strtol_r>:
 800bd74:	f7ff bf84 	b.w	800bc80 <_strtol_l.constprop.0>

0800bd78 <_strtoul_l.constprop.0>:
 800bd78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd7c:	4e34      	ldr	r6, [pc, #208]	@ (800be50 <_strtoul_l.constprop.0+0xd8>)
 800bd7e:	4686      	mov	lr, r0
 800bd80:	460d      	mov	r5, r1
 800bd82:	4628      	mov	r0, r5
 800bd84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd88:	5d37      	ldrb	r7, [r6, r4]
 800bd8a:	f017 0708 	ands.w	r7, r7, #8
 800bd8e:	d1f8      	bne.n	800bd82 <_strtoul_l.constprop.0+0xa>
 800bd90:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd92:	d12f      	bne.n	800bdf4 <_strtoul_l.constprop.0+0x7c>
 800bd94:	782c      	ldrb	r4, [r5, #0]
 800bd96:	2701      	movs	r7, #1
 800bd98:	1c85      	adds	r5, r0, #2
 800bd9a:	f033 0010 	bics.w	r0, r3, #16
 800bd9e:	d109      	bne.n	800bdb4 <_strtoul_l.constprop.0+0x3c>
 800bda0:	2c30      	cmp	r4, #48	@ 0x30
 800bda2:	d12c      	bne.n	800bdfe <_strtoul_l.constprop.0+0x86>
 800bda4:	7828      	ldrb	r0, [r5, #0]
 800bda6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bdaa:	2858      	cmp	r0, #88	@ 0x58
 800bdac:	d127      	bne.n	800bdfe <_strtoul_l.constprop.0+0x86>
 800bdae:	786c      	ldrb	r4, [r5, #1]
 800bdb0:	2310      	movs	r3, #16
 800bdb2:	3502      	adds	r5, #2
 800bdb4:	f04f 38ff 	mov.w	r8, #4294967295
 800bdb8:	2600      	movs	r6, #0
 800bdba:	fbb8 f8f3 	udiv	r8, r8, r3
 800bdbe:	fb03 f908 	mul.w	r9, r3, r8
 800bdc2:	ea6f 0909 	mvn.w	r9, r9
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bdcc:	f1bc 0f09 	cmp.w	ip, #9
 800bdd0:	d81c      	bhi.n	800be0c <_strtoul_l.constprop.0+0x94>
 800bdd2:	4664      	mov	r4, ip
 800bdd4:	42a3      	cmp	r3, r4
 800bdd6:	dd2a      	ble.n	800be2e <_strtoul_l.constprop.0+0xb6>
 800bdd8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800bddc:	d007      	beq.n	800bdee <_strtoul_l.constprop.0+0x76>
 800bdde:	4580      	cmp	r8, r0
 800bde0:	d322      	bcc.n	800be28 <_strtoul_l.constprop.0+0xb0>
 800bde2:	d101      	bne.n	800bde8 <_strtoul_l.constprop.0+0x70>
 800bde4:	45a1      	cmp	r9, r4
 800bde6:	db1f      	blt.n	800be28 <_strtoul_l.constprop.0+0xb0>
 800bde8:	fb00 4003 	mla	r0, r0, r3, r4
 800bdec:	2601      	movs	r6, #1
 800bdee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdf2:	e7e9      	b.n	800bdc8 <_strtoul_l.constprop.0+0x50>
 800bdf4:	2c2b      	cmp	r4, #43	@ 0x2b
 800bdf6:	bf04      	itt	eq
 800bdf8:	782c      	ldrbeq	r4, [r5, #0]
 800bdfa:	1c85      	addeq	r5, r0, #2
 800bdfc:	e7cd      	b.n	800bd9a <_strtoul_l.constprop.0+0x22>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1d8      	bne.n	800bdb4 <_strtoul_l.constprop.0+0x3c>
 800be02:	2c30      	cmp	r4, #48	@ 0x30
 800be04:	bf0c      	ite	eq
 800be06:	2308      	moveq	r3, #8
 800be08:	230a      	movne	r3, #10
 800be0a:	e7d3      	b.n	800bdb4 <_strtoul_l.constprop.0+0x3c>
 800be0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800be10:	f1bc 0f19 	cmp.w	ip, #25
 800be14:	d801      	bhi.n	800be1a <_strtoul_l.constprop.0+0xa2>
 800be16:	3c37      	subs	r4, #55	@ 0x37
 800be18:	e7dc      	b.n	800bdd4 <_strtoul_l.constprop.0+0x5c>
 800be1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800be1e:	f1bc 0f19 	cmp.w	ip, #25
 800be22:	d804      	bhi.n	800be2e <_strtoul_l.constprop.0+0xb6>
 800be24:	3c57      	subs	r4, #87	@ 0x57
 800be26:	e7d5      	b.n	800bdd4 <_strtoul_l.constprop.0+0x5c>
 800be28:	f04f 36ff 	mov.w	r6, #4294967295
 800be2c:	e7df      	b.n	800bdee <_strtoul_l.constprop.0+0x76>
 800be2e:	1c73      	adds	r3, r6, #1
 800be30:	d106      	bne.n	800be40 <_strtoul_l.constprop.0+0xc8>
 800be32:	2322      	movs	r3, #34	@ 0x22
 800be34:	f8ce 3000 	str.w	r3, [lr]
 800be38:	4630      	mov	r0, r6
 800be3a:	b932      	cbnz	r2, 800be4a <_strtoul_l.constprop.0+0xd2>
 800be3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be40:	b107      	cbz	r7, 800be44 <_strtoul_l.constprop.0+0xcc>
 800be42:	4240      	negs	r0, r0
 800be44:	2a00      	cmp	r2, #0
 800be46:	d0f9      	beq.n	800be3c <_strtoul_l.constprop.0+0xc4>
 800be48:	b106      	cbz	r6, 800be4c <_strtoul_l.constprop.0+0xd4>
 800be4a:	1e69      	subs	r1, r5, #1
 800be4c:	6011      	str	r1, [r2, #0]
 800be4e:	e7f5      	b.n	800be3c <_strtoul_l.constprop.0+0xc4>
 800be50:	0800c6eb 	.word	0x0800c6eb

0800be54 <_strtoul_r>:
 800be54:	f7ff bf90 	b.w	800bd78 <_strtoul_l.constprop.0>

0800be58 <_malloc_usable_size_r>:
 800be58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be5c:	1f18      	subs	r0, r3, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bfbc      	itt	lt
 800be62:	580b      	ldrlt	r3, [r1, r0]
 800be64:	18c0      	addlt	r0, r0, r3
 800be66:	4770      	bx	lr

0800be68 <_init>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr

0800be74 <_fini>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr
